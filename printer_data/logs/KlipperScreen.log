2024-02-16 11:53:18,260 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-16 11:53:18,261 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-94-gcd51fae
2024-02-16 11:53:18,261 [functions.py:log_start()] - Python version: 3.9
2024-02-16 11:53:18,575 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-16 11:53:18,577 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-02-16 11:53:18,595 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-16 11:53:18,774 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-16 11:53:18,775 [config.py:install_language()] - Using lang en
2024-02-16 11:53:18,822 [screen.py:__init__()] - Screen resolution: 720x480
2024-02-16 11:53:18,824 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-16 11:53:20,075 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-16 11:53:20,086 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-16 11:53:20,095 [screen.py:initial_connection()] - Default printer: None
2024-02-16 11:53:20,143 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-16 11:53:20,144 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-16 11:53:20,223 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 11:53:20,236 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-16 11:53:20,262 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 11:53:20,278 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-16 11:53:20,279 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-16 11:53:20,292 [_logging.py:info()] - Websocket connected
2024-02-16 11:53:20,292 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-16 11:53:20,344 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 11:53:20,358 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 11:53:20,361 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 11:53:20,361 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 11:53:20,375 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 11:53:20,395 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 11:53:20,397 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/<your-mcu-id>'}, 'printer': {'kinematics': 'none', 'max_velocity': '1000', 'max_accel': '1000'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/<your-mcu-id>', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'printer': {'max_velocity': 1000.0, 'max_accel': 1000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'none'}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 11:53:20,398 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 11:53:20,398 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-16 11:53:20,399 [printer.py:reinit()] - # Extruders: 0
2024-02-16 11:53:20,399 [printer.py:reinit()] - # Temperature devices: 0
2024-02-16 11:53:20,399 [printer.py:reinit()] - # Fans: 0
2024-02-16 11:53:20,399 [printer.py:reinit()] - # Output pins: 0
2024-02-16 11:53:20,399 [printer.py:reinit()] - # Leds: 0
2024-02-16 11:53:20,418 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 11:53:20,420 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 11:53:20,672 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-02-16 11:53:20,679 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-16 11:53:20,679 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 11:53:20,687 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 11:53:20,694 [screen.py:init_klipper()] - Printer initialized
2024-02-16 11:53:20,694 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-16 11:53:20,694 [printer.py:change_state()] - Adding callback for state: startup
2024-02-16 11:54:56,020 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-02-16 11:54:56,021 [printer.py:change_state()] - Adding callback for state: error
2024-02-16 11:54:56,023 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 11:54:56,115 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 12:07:06,198 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-16 12:07:06,207 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-94-gcd51fae
2024-02-16 12:07:06,207 [functions.py:log_start()] - Python version: 3.9
2024-02-16 12:07:06,552 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-16 12:07:06,554 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-02-16 12:07:06,577 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-16 12:07:06,749 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-16 12:07:06,749 [config.py:install_language()] - Using lang en
2024-02-16 12:07:06,773 [screen.py:__init__()] - Screen resolution: 720x480
2024-02-16 12:07:06,774 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-16 12:07:08,004 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-16 12:07:08,020 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-16 12:07:08,036 [screen.py:initial_connection()] - Default printer: None
2024-02-16 12:07:08,114 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-16 12:07:08,115 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-16 12:07:08,238 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 12:07:08,264 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-16 12:07:08,311 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:07:08,339 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-16 12:07:08,341 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-16 12:07:08,426 [_logging.py:info()] - Websocket connected
2024-02-16 12:07:08,426 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-16 12:07:08,451 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:07:08,475 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 12:07:08,479 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 12:07:08,480 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 12:07:08,534 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-02-16 12:07:11,822 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:07:11,851 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 12:07:11,854 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 12:07:11,855 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 12:07:11,882 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 12:07:11,926 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 12:07:11,933 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '-12', 'position_min': '-12', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'rotation_distance': '7.71', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '300'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'control': 'pid', 'pid_kp': '54.027', 'pid_ki': '0.770', 'pid_kd': '948.182', 'min_temp': '0', 'max_temp': '130'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan electronic_enclosure_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_27000D000150414235363020-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.16'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/gcode_files'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_27000D000150414235363020-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': -12.0, 'position_min': -12.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 7.71, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 54.027, 'pid_ki': 0.77, 'pid_kd': 948.182, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan electronic_enclosure_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.16, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/gcode_files', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 12:07:11,938 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:07:11,942 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-16 12:07:11,942 [printer.py:reinit()] - # Extruders: 1
2024-02-16 12:07:11,942 [printer.py:reinit()] - # Temperature devices: 1
2024-02-16 12:07:11,943 [printer.py:reinit()] - # Fans: 3
2024-02-16 12:07:11,943 [printer.py:reinit()] - # Output pins: 1
2024-02-16 12:07:11,943 [printer.py:reinit()] - # Leds: 0
2024-02-16 12:07:11,968 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 12:07:11,972 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 12:07:12,220 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan electronic_enclosure_fan&heater_fan hotend_fan&output_pin beeper
2024-02-16 12:07:12,231 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/gcode_files
2024-02-16 12:07:12,231 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 12:07:12,238 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 12:07:12,250 [screen.py:init_klipper()] - Printer initialized
2024-02-16 12:07:12,251 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-16 12:07:12,251 [printer.py:change_state()] - Adding callback for state: startup
2024-02-16 12:09:49,555 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-16 12:09:49,562 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-94-gcd51fae
2024-02-16 12:09:49,563 [functions.py:log_start()] - Python version: 3.9
2024-02-16 12:09:49,850 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-16 12:09:49,852 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-02-16 12:09:49,869 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-16 12:09:50,057 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-16 12:09:50,057 [config.py:install_language()] - Using lang en
2024-02-16 12:09:50,081 [screen.py:__init__()] - Screen resolution: 720x480
2024-02-16 12:09:50,083 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-16 12:09:51,300 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-16 12:09:51,317 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-16 12:09:51,335 [screen.py:initial_connection()] - Default printer: None
2024-02-16 12:09:51,394 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-16 12:09:51,395 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-16 12:09:51,479 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 12:09:51,493 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-16 12:09:51,523 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:09:51,539 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-16 12:09:51,542 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-16 12:09:51,567 [_logging.py:info()] - Websocket connected
2024-02-16 12:09:51,568 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-16 12:09:51,664 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:09:51,688 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 12:09:51,690 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 12:09:51,691 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 12:09:51,744 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-02-16 12:09:54,896 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:09:54,911 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 12:09:54,913 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 12:09:54,913 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 12:09:54,930 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 12:09:54,962 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 12:09:54,966 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'control': 'pid', 'pid_kp': '54.027', 'pid_ki': '0.770', 'pid_kd': '948.182', 'min_temp': '0', 'max_temp': '130'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan electronic_enclosure_fan': {'pin': 'PC7', 'idle_timeout': '60'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_27000D000150414235363020-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.16'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/gcode_files'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_27000D000150414235363020-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 54.027, 'pid_ki': 0.77, 'pid_kd': 948.182, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'controller_fan electronic_enclosure_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC7', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 60, 'heater': ['extruder']}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.16, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/gcode_files', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 12:09:54,971 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:09:54,973 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-16 12:09:54,973 [printer.py:reinit()] - # Extruders: 1
2024-02-16 12:09:54,974 [printer.py:reinit()] - # Temperature devices: 1
2024-02-16 12:09:54,974 [printer.py:reinit()] - # Fans: 3
2024-02-16 12:09:54,974 [printer.py:reinit()] - # Output pins: 1
2024-02-16 12:09:54,974 [printer.py:reinit()] - # Leds: 0
2024-02-16 12:09:54,994 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 12:09:54,998 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 12:09:55,270 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&controller_fan electronic_enclosure_fan&heater_fan hotend_fan&output_pin beeper
2024-02-16 12:09:55,287 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/gcode_files
2024-02-16 12:09:55,288 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 12:09:55,300 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 12:09:55,306 [screen.py:init_klipper()] - Printer initialized
2024-02-16 12:09:55,307 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-16 12:09:55,307 [printer.py:change_state()] - Adding callback for state: startup
2024-02-16 12:12:18,447 [printer.py:change_state()] - Changing state from 'startup' to 'disconnected'
2024-02-16 12:12:18,448 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-16 12:12:18,451 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-16 12:12:18,451 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:12:18,457 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:12:18,544 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 12:12:21,437 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:12:21,451 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 12:12:21,453 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 12:12:21,453 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 12:12:21,469 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 12:12:21,499 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 12:12:21,503 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'control': 'pid', 'pid_kp': '54.027', 'pid_ki': '0.770', 'pid_kd': '948.182', 'min_temp': '0', 'max_temp': '130'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.16'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/gcode_files'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 54.027, 'pid_ki': 0.77, 'pid_kd': 948.182, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.16, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/gcode_files', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 12:12:21,509 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:12:21,512 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-16 12:12:21,512 [printer.py:reinit()] - # Extruders: 1
2024-02-16 12:12:21,512 [printer.py:reinit()] - # Temperature devices: 1
2024-02-16 12:12:21,512 [printer.py:reinit()] - # Fans: 2
2024-02-16 12:12:21,512 [printer.py:reinit()] - # Output pins: 1
2024-02-16 12:12:21,512 [printer.py:reinit()] - # Leds: 0
2024-02-16 12:12:21,535 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 12:12:21,538 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 12:12:21,798 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-16 12:12:21,814 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/gcode_files
2024-02-16 12:12:21,814 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 12:12:21,815 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 12:12:21,816 [screen.py:init_klipper()] - Printer initialized
2024-02-16 12:12:21,817 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-16 12:12:21,817 [printer.py:change_state()] - Adding callback for state: startup
2024-02-16 12:12:23,245 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-16 12:12:23,245 [printer.py:change_state()] - Adding callback for state: ready
2024-02-16 12:12:23,249 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-16 12:12:23,394 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-16 12:12:23,406 [main_menu.py:add_device()] - Adding device: extruder
2024-02-16 12:12:23,415 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-16 12:12:23,462 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-16 12:12:23,476 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-16 12:12:23,477 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-02-16 12:12:23,478 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: None
2024-02-16 12:12:28,449 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-16 12:12:28,503 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-16 12:12:28,533 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-16 12:12:28,534 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-16 12:13:36,021 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-16 12:13:36,021 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-16 12:13:36,022 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-16 12:13:36,023 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:13:36,028 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:13:36,109 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 12:13:39,437 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:13:39,441 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
GCode path received from Klipper does not match expected location.

Received:
 '/home/pi/gcode_files'
Expected:
 '/home/pi/printer_data/gcodes'

Modify the [virtual_sdcard] section Klipper's configuration to correct this error.

[virtual_sdcard]
path:
 /home/pi/printer_data/gcodes

2024-02-16 12:13:39,461 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 12:13:39,463 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 12:13:39,463 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["GCode path received from Klipper does not match expected location.<br/><br/>Received: '/home/pi/gcode_files'<br/>Expected: '/home/pi/printer_data/gcodes'<br/><br/>Modify the [virtual_sdcard] section Klipper's configuration to correct this error.<br/><br/>[virtual_sdcard]<br/>path: /home/pi/printer_data/gcodes"], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 12:13:39,690 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 12:13:39,727 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 12:13:39,732 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'control': 'pid', 'pid_kp': '54.027', 'pid_ki': '0.770', 'pid_kd': '948.182', 'min_temp': '0', 'max_temp': '130'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.16'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/gcode_files'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 54.027, 'pid_ki': 0.77, 'pid_kd': 948.182, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.16, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/gcode_files', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 12:13:39,736 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:13:39,739 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-16 12:13:39,740 [printer.py:reinit()] - # Extruders: 1
2024-02-16 12:13:39,740 [printer.py:reinit()] - # Temperature devices: 1
2024-02-16 12:13:39,740 [printer.py:reinit()] - # Fans: 2
2024-02-16 12:13:39,740 [printer.py:reinit()] - # Output pins: 1
2024-02-16 12:13:39,740 [printer.py:reinit()] - # Leds: 0
2024-02-16 12:13:39,758 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 12:13:39,760 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 12:13:40,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-16 12:13:40,046 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/gcode_files
2024-02-16 12:13:40,046 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 12:13:40,054 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 12:13:40,055 [screen.py:init_klipper()] - Printer initialized
2024-02-16 12:13:40,056 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-16 12:13:40,056 [printer.py:change_state()] - Adding callback for state: startup
2024-02-16 12:13:42,489 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-16 12:13:42,489 [printer.py:change_state()] - Adding callback for state: ready
2024-02-16 12:13:42,495 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:13:42,616 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-16 12:13:42,635 [main_menu.py:add_device()] - Adding device: extruder
2024-02-16 12:13:42,643 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-16 12:13:42,688 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-16 12:13:42,703 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-16 12:13:42,726 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-16 12:13:42,742 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-16 12:13:42,745 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-16 12:15:07,334 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=720, height=480)
2024-02-16 12:15:27,839 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-16 12:15:27,840 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-16 12:15:27,841 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-16 12:15:27,841 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:15:27,852 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-16 12:15:27,854 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:15:27,915 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 12:15:31,437 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:15:31,441 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
GCode path received from Klipper does not match expected location.

Received:
 '/home/pi/gcode_files'
Expected:
 '/home/pi/printer_data/gcodes'

Modify the [virtual_sdcard] section Klipper's configuration to correct this error.

[virtual_sdcard]
path:
 /home/pi/printer_data/gcodes

2024-02-16 12:15:31,460 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 12:15:31,461 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 12:15:31,462 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["GCode path received from Klipper does not match expected location.<br/><br/>Received: '/home/pi/gcode_files'<br/>Expected: '/home/pi/printer_data/gcodes'<br/><br/>Modify the [virtual_sdcard] section Klipper's configuration to correct this error.<br/><br/>[virtual_sdcard]<br/>path: /home/pi/printer_data/gcodes"], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 12:15:31,502 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 12:15:31,542 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 12:15:31,547 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'control': 'pid', 'pid_kp': '54.027', 'pid_ki': '0.770', 'pid_kd': '948.182', 'min_temp': '0', 'max_temp': '130'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.16'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/gcode_files'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 54.027, 'pid_ki': 0.77, 'pid_kd': 948.182, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.16, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/gcode_files', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 12:15:31,552 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:15:31,554 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-16 12:15:31,554 [printer.py:reinit()] - # Extruders: 1
2024-02-16 12:15:31,555 [printer.py:reinit()] - # Temperature devices: 1
2024-02-16 12:15:31,555 [printer.py:reinit()] - # Fans: 2
2024-02-16 12:15:31,555 [printer.py:reinit()] - # Output pins: 1
2024-02-16 12:15:31,555 [printer.py:reinit()] - # Leds: 0
2024-02-16 12:15:31,574 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 12:15:31,578 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 12:15:31,806 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-16 12:15:31,811 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/gcode_files
2024-02-16 12:15:31,811 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 12:15:31,833 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 12:15:31,839 [screen.py:init_klipper()] - Printer initialized
2024-02-16 12:15:31,839 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-16 12:15:31,839 [printer.py:change_state()] - Adding callback for state: startup
2024-02-16 12:15:34,355 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-16 12:15:34,355 [printer.py:change_state()] - Adding callback for state: ready
2024-02-16 12:15:34,359 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:15:34,462 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-16 12:15:34,474 [main_menu.py:add_device()] - Adding device: extruder
2024-02-16 12:15:34,482 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-16 12:15:34,528 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-16 12:15:34,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-16 12:15:34,566 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-16 12:15:34,581 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-16 12:15:34,583 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-16 12:17:24,485 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-16 12:17:24,486 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-16 12:17:24,487 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-16 12:17:24,487 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:17:24,492 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:17:24,582 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 12:17:27,438 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:17:27,442 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
GCode path received from Klipper does not match expected location.

Received:
 '/home/pi/gcode_files'
Expected:
 '/home/pi/printer_data/gcodes'

Modify the [virtual_sdcard] section Klipper's configuration to correct this error.

[virtual_sdcard]
path:
 /home/pi/printer_data/gcodes

2024-02-16 12:17:27,460 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 12:17:27,461 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 12:17:27,462 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["GCode path received from Klipper does not match expected location.<br/><br/>Received: '/home/pi/gcode_files'<br/>Expected: '/home/pi/printer_data/gcodes'<br/><br/>Modify the [virtual_sdcard] section Klipper's configuration to correct this error.<br/><br/>[virtual_sdcard]<br/>path: /home/pi/printer_data/gcodes"], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 12:17:28,107 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 12:17:28,144 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 12:17:28,149 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'control': 'pid', 'pid_kp': '54.027', 'pid_ki': '0.770', 'pid_kd': '948.182', 'min_temp': '0', 'max_temp': '130'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/gcode_files'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 54.027, 'pid_ki': 0.77, 'pid_kd': 948.182, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/gcode_files', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 12:17:28,154 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:17:28,156 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-16 12:17:28,157 [printer.py:reinit()] - # Extruders: 1
2024-02-16 12:17:28,157 [printer.py:reinit()] - # Temperature devices: 1
2024-02-16 12:17:28,157 [printer.py:reinit()] - # Fans: 2
2024-02-16 12:17:28,157 [printer.py:reinit()] - # Output pins: 1
2024-02-16 12:17:28,157 [printer.py:reinit()] - # Leds: 0
2024-02-16 12:17:28,176 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 12:17:28,179 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 12:17:28,410 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-16 12:17:28,426 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/gcode_files
2024-02-16 12:17:28,426 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 12:17:28,427 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 12:17:28,428 [screen.py:init_klipper()] - Printer initialized
2024-02-16 12:17:28,429 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-16 12:17:28,429 [printer.py:change_state()] - Adding callback for state: startup
2024-02-16 12:17:30,951 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-16 12:17:30,951 [printer.py:change_state()] - Adding callback for state: ready
2024-02-16 12:17:30,955 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:17:31,057 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-16 12:17:31,069 [main_menu.py:add_device()] - Adding device: extruder
2024-02-16 12:17:31,077 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-16 12:17:31,123 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-16 12:17:31,139 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-16 12:17:31,160 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-16 12:17:31,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-16 12:17:31,175 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-16 12:17:39,490 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-02-16 12:17:39,490 [printer.py:change_state()] - Adding callback for state: shutdown
2024-02-16 12:17:39,553 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:17:39,558 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:17:39,659 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 12:17:54,280 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-02-16 12:17:54,280 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-16 12:17:54,282 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-16 12:17:54,283 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:17:54,286 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:17:54,370 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 12:17:57,438 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:17:57,442 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
GCode path received from Klipper does not match expected location.

Received:
 '/home/pi/gcode_files'
Expected:
 '/home/pi/printer_data/gcodes'

Modify the [virtual_sdcard] section Klipper's configuration to correct this error.

[virtual_sdcard]
path:
 /home/pi/printer_data/gcodes

2024-02-16 12:17:57,465 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 12:17:57,466 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 12:17:57,466 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["GCode path received from Klipper does not match expected location.<br/><br/>Received: '/home/pi/gcode_files'<br/>Expected: '/home/pi/printer_data/gcodes'<br/><br/>Modify the [virtual_sdcard] section Klipper's configuration to correct this error.<br/><br/>[virtual_sdcard]<br/>path: /home/pi/printer_data/gcodes"], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 12:17:57,935 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 12:17:57,973 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 12:17:57,978 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'control': 'pid', 'pid_kp': '54.027', 'pid_ki': '0.770', 'pid_kd': '948.182', 'min_temp': '0', 'max_temp': '130'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/gcode_files'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 54.027, 'pid_ki': 0.77, 'pid_kd': 948.182, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/gcode_files', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 12:17:57,984 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:17:57,986 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-16 12:17:57,987 [printer.py:reinit()] - # Extruders: 1
2024-02-16 12:17:57,987 [printer.py:reinit()] - # Temperature devices: 1
2024-02-16 12:17:57,987 [printer.py:reinit()] - # Fans: 2
2024-02-16 12:17:57,987 [printer.py:reinit()] - # Output pins: 1
2024-02-16 12:17:57,987 [printer.py:reinit()] - # Leds: 0
2024-02-16 12:17:58,006 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 12:17:58,008 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 12:17:58,278 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-16 12:17:58,287 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/gcode_files
2024-02-16 12:17:58,287 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 12:17:58,293 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 12:17:58,299 [screen.py:init_klipper()] - Printer initialized
2024-02-16 12:17:58,299 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-16 12:17:58,299 [printer.py:change_state()] - Adding callback for state: startup
2024-02-16 12:18:00,780 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-16 12:18:00,780 [printer.py:change_state()] - Adding callback for state: ready
2024-02-16 12:18:00,784 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:18:00,888 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-16 12:18:00,900 [main_menu.py:add_device()] - Adding device: extruder
2024-02-16 12:18:00,908 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-16 12:18:00,959 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-16 12:18:00,975 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-16 12:18:00,996 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-16 12:18:01,011 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-16 12:18:01,013 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-16 12:22:29,833 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0x63010848 (GtkDialog at 0x284f1b0)>
2024-02-16 12:22:29,852 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=720, height=480)
2024-02-16 12:29:10,691 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-16 12:29:10,691 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-16 12:29:10,694 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-16 12:29:10,695 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:29:10,705 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-16 12:29:10,707 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:29:10,803 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 12:29:14,438 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:29:14,442 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
GCode path received from Klipper does not match expected location.

Received:
 '/home/pi/gcode_files'
Expected:
 '/home/pi/printer_data/gcodes'

Modify the [virtual_sdcard] section Klipper's configuration to correct this error.

[virtual_sdcard]
path:
 /home/pi/printer_data/gcodes

2024-02-16 12:29:14,459 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 12:29:14,460 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 12:29:14,461 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["GCode path received from Klipper does not match expected location.<br/><br/>Received: '/home/pi/gcode_files'<br/>Expected: '/home/pi/printer_data/gcodes'<br/><br/>Modify the [virtual_sdcard] section Klipper's configuration to correct this error.<br/><br/>[virtual_sdcard]<br/>path: /home/pi/printer_data/gcodes"], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 12:29:14,477 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 12:29:14,514 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 12:29:14,520 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'control': 'pid', 'pid_kp': '54.027', 'pid_ki': '0.770', 'pid_kd': '948.182', 'min_temp': '0', 'max_temp': '130'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/gcode_files'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 54.027, 'pid_ki': 0.77, 'pid_kd': 948.182, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/gcode_files', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 12:29:14,526 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:29:14,529 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-16 12:29:14,529 [printer.py:reinit()] - # Extruders: 1
2024-02-16 12:29:14,529 [printer.py:reinit()] - # Temperature devices: 1
2024-02-16 12:29:14,529 [printer.py:reinit()] - # Fans: 2
2024-02-16 12:29:14,529 [printer.py:reinit()] - # Output pins: 1
2024-02-16 12:29:14,529 [printer.py:reinit()] - # Leds: 0
2024-02-16 12:29:14,551 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 12:29:14,555 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 12:29:14,806 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-16 12:29:14,811 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/gcode_files
2024-02-16 12:29:14,812 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 12:29:14,818 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 12:29:14,825 [screen.py:init_klipper()] - Printer initialized
2024-02-16 12:29:14,825 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-16 12:29:14,825 [printer.py:change_state()] - Adding callback for state: startup
2024-02-16 12:29:17,004 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-16 12:29:17,005 [printer.py:change_state()] - Adding callback for state: ready
2024-02-16 12:29:17,013 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:29:17,152 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-16 12:29:17,163 [main_menu.py:add_device()] - Adding device: extruder
2024-02-16 12:29:17,172 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-16 12:29:17,217 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-16 12:29:17,244 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-16 12:29:17,259 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-16 12:29:17,274 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-16 12:29:17,277 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-16 12:41:20,720 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0x63010048 (GtkDialog at 0x284f370)>
2024-02-16 12:41:20,757 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=720, height=480)
2024-02-16 12:41:35,659 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-16 12:41:35,659 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-16 12:41:35,661 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-16 12:41:35,662 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:41:35,670 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-16 12:41:35,672 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:41:35,774 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 12:41:39,437 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 12:41:39,440 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
GCode path received from Klipper does not match expected location.

Received:
 '/home/pi/gcode_files'
Expected:
 '/home/pi/printer_data/gcodes'

Modify the [virtual_sdcard] section Klipper's configuration to correct this error.

[virtual_sdcard]
path:
 /home/pi/printer_data/gcodes

2024-02-16 12:41:39,458 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 12:41:39,461 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 12:41:39,461 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["GCode path received from Klipper does not match expected location.<br/><br/>Received: '/home/pi/gcode_files'<br/>Expected: '/home/pi/printer_data/gcodes'<br/><br/>Modify the [virtual_sdcard] section Klipper's configuration to correct this error.<br/><br/>[virtual_sdcard]<br/>path: /home/pi/printer_data/gcodes"], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 12:41:39,480 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 12:41:39,517 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 12:41:39,523 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/gcode_files'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/gcode_files', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 12:41:39,530 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 12:41:39,535 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-16 12:41:39,535 [printer.py:reinit()] - # Extruders: 1
2024-02-16 12:41:39,535 [printer.py:reinit()] - # Temperature devices: 1
2024-02-16 12:41:39,536 [printer.py:reinit()] - # Fans: 2
2024-02-16 12:41:39,536 [printer.py:reinit()] - # Output pins: 1
2024-02-16 12:41:39,536 [printer.py:reinit()] - # Leds: 0
2024-02-16 12:41:39,561 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 12:41:39,565 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 12:41:39,827 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-16 12:41:39,836 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/gcode_files
2024-02-16 12:41:39,836 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 12:41:39,842 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 12:41:39,853 [screen.py:init_klipper()] - Printer initialized
2024-02-16 12:41:39,854 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-16 12:41:39,854 [printer.py:change_state()] - Adding callback for state: startup
2024-02-16 12:41:42,011 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-16 12:41:42,011 [printer.py:change_state()] - Adding callback for state: ready
2024-02-16 12:41:42,017 [screen.py:show_panel()] - Reinitializing panel
2024-02-16 12:41:42,140 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-16 12:41:42,152 [main_menu.py:add_device()] - Adding device: extruder
2024-02-16 12:41:42,160 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-16 12:41:42,205 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-16 12:41:42,231 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-16 12:41:42,238 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-16 12:41:42,252 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-16 12:41:42,254 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-16 13:10:55,426 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-16 15:17:22,066 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-16 15:17:22,073 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-94-gcd51fae
2024-02-16 15:17:22,073 [functions.py:log_start()] - Python version: 3.9
2024-02-16 15:17:22,414 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-16 15:17:22,416 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-02-16 15:17:22,434 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-16 15:17:22,626 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-16 15:17:22,626 [config.py:install_language()] - Using lang en
2024-02-16 15:17:22,651 [screen.py:__init__()] - Screen resolution: 720x480
2024-02-16 15:17:22,653 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-16 15:17:23,876 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-16 15:17:23,901 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-16 15:17:23,910 [screen.py:initial_connection()] - Default printer: None
2024-02-16 15:17:23,971 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-16 15:17:23,971 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-16 15:17:24,076 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 15:17:24,090 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-16 15:17:24,120 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 15:17:24,141 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-16 15:17:24,143 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-16 15:17:24,162 [_logging.py:info()] - Websocket connected
2024-02-16 15:17:24,162 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-16 15:17:24,255 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 15:17:24,274 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 15:17:24,276 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-16 15:17:24,277 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 15:17:24,297 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 15:17:24,335 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 15:17:24,340 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/gcode_files'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/gcode_files', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 15:17:24,345 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 15:17:24,354 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-16 15:17:24,354 [printer.py:reinit()] - # Extruders: 1
2024-02-16 15:17:24,355 [printer.py:reinit()] - # Temperature devices: 1
2024-02-16 15:17:24,355 [printer.py:reinit()] - # Fans: 2
2024-02-16 15:17:24,355 [printer.py:reinit()] - # Output pins: 1
2024-02-16 15:17:24,355 [printer.py:reinit()] - # Leds: 0
2024-02-16 15:17:24,377 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 15:17:24,381 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 15:17:24,626 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-16 15:17:24,638 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/gcode_files
2024-02-16 15:17:24,638 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 15:17:24,648 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 15:17:24,649 [screen.py:init_klipper()] - Printer initialized
2024-02-16 15:17:24,650 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-16 15:17:24,650 [printer.py:change_state()] - Adding callback for state: startup
2024-02-16 15:17:24,834 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-16 15:17:24,835 [printer.py:change_state()] - Adding callback for state: ready
2024-02-16 15:17:24,843 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-16 15:17:25,001 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-16 15:17:25,018 [main_menu.py:add_device()] - Adding device: extruder
2024-02-16 15:17:25,032 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-16 15:17:25,101 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-16 15:17:25,120 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-16 15:17:25,121 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-02-16 15:17:25,122 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: None
2024-02-16 15:17:30,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-16 15:17:30,054 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-16 15:17:30,071 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-16 15:17:30,073 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 16:31:41,077 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 16:31:41,077 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 16:31:41,079 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 16:31:41,079 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 16:31:41,082 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 16:31:41,143 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 16:31:44,401 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 16:31:44,404 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
GCode path received from Klipper does not match expected location.

Received:
 '/home/pi/gcode_files'
Expected:
 '/home/pi/printer_data/gcodes'

Modify the [virtual_sdcard] section Klipper's configuration to correct this error.

[virtual_sdcard]
path:
 /home/pi/printer_data/gcodes

2024-02-19 16:31:44,425 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 16:31:44,426 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 16:31:44,427 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["GCode path received from Klipper does not match expected location.<br/><br/>Received: '/home/pi/gcode_files'<br/>Expected: '/home/pi/printer_data/gcodes'<br/><br/>Modify the [virtual_sdcard] section Klipper's configuration to correct this error.<br/><br/>[virtual_sdcard]<br/>path: /home/pi/printer_data/gcodes"], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 16:31:44,697 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 16:31:44,734 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 16:31:44,739 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcode'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcode', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 16:31:44,744 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 16:31:44,747 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-19 16:31:44,747 [printer.py:reinit()] - # Extruders: 1
2024-02-19 16:31:44,747 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 16:31:44,748 [printer.py:reinit()] - # Fans: 2
2024-02-19 16:31:44,748 [printer.py:reinit()] - # Output pins: 1
2024-02-19 16:31:44,748 [printer.py:reinit()] - # Leds: 0
2024-02-19 16:31:44,771 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 16:31:44,774 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 16:31:45,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 16:31:45,037 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcode
2024-02-19 16:31:45,037 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 16:31:45,046 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 16:31:45,052 [screen.py:init_klipper()] - Printer initialized
2024-02-19 16:31:45,052 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 16:31:45,052 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 16:31:47,490 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 16:31:47,491 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 16:31:47,499 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 16:31:47,640 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 16:31:47,652 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 16:31:47,660 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 16:31:47,705 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 16:31:47,723 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 16:31:47,742 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 16:31:47,760 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 16:31:47,762 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 16:33:07,607 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 16:33:07,607 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 16:33:07,610 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 16:33:07,610 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 16:33:07,615 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 16:33:07,702 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 16:33:11,400 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 16:33:11,404 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
GCode path received from Klipper does not match expected location.

Received:
 '/home/pi/printer_data/gcode'
Expected:
 '/home/pi/printer_data/gcodes'

Modify the [virtual_sdcard] section Klipper's configuration to correct this error.

[virtual_sdcard]
path:
 /home/pi/printer_data/gcodes

2024-02-19 16:33:11,421 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 16:33:11,424 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 16:33:11,424 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["GCode path received from Klipper does not match expected location.<br/><br/>Received: '/home/pi/printer_data/gcode'<br/>Expected: '/home/pi/printer_data/gcodes'<br/><br/>Modify the [virtual_sdcard] section Klipper's configuration to correct this error.<br/><br/>[virtual_sdcard]<br/>path: /home/pi/printer_data/gcodes"], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 16:33:11,440 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 16:33:11,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 16:33:11,479 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcode'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcode', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 16:33:11,485 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 16:33:11,487 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-19 16:33:11,488 [printer.py:reinit()] - # Extruders: 1
2024-02-19 16:33:11,488 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 16:33:11,488 [printer.py:reinit()] - # Fans: 2
2024-02-19 16:33:11,488 [printer.py:reinit()] - # Output pins: 1
2024-02-19 16:33:11,488 [printer.py:reinit()] - # Leds: 0
2024-02-19 16:33:11,512 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 16:33:11,515 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 16:33:11,759 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 16:33:11,768 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcode
2024-02-19 16:33:11,769 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 16:33:11,774 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 16:33:11,786 [screen.py:init_klipper()] - Printer initialized
2024-02-19 16:33:11,787 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 16:33:11,787 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 16:33:13,990 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 16:33:13,990 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 16:33:13,994 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 16:33:14,098 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 16:33:14,110 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 16:33:14,118 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 16:33:14,166 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 16:33:14,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 16:33:14,203 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 16:33:14,218 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 16:33:14,220 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 16:34:21,396 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 16:34:21,406 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-94-gcd51fae
2024-02-19 16:34:21,406 [functions.py:log_start()] - Python version: 3.9
2024-02-19 16:34:21,732 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 16:34:21,734 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-02-19 16:34:21,750 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 16:34:21,928 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 16:34:21,929 [config.py:install_language()] - Using lang en
2024-02-19 16:34:21,954 [screen.py:__init__()] - Screen resolution: 720x480
2024-02-19 16:34:21,957 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-19 16:34:23,153 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 16:34:23,171 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-19 16:34:23,194 [screen.py:initial_connection()] - Default printer: None
2024-02-19 16:34:23,260 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 16:34:23,261 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 16:34:23,363 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 16:34:23,377 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 16:34:23,420 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 16:34:23,438 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 16:34:23,440 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 16:34:23,466 [_logging.py:info()] - Websocket connected
2024-02-19 16:34:23,467 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 16:34:23,522 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 16:34:23,542 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 16:34:23,545 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 16:34:23,546 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 16:34:23,546 [screen.py:init_klipper()] - Klipper not connected
2024-02-19 16:34:26,865 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 16:34:26,867 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["GCode path received from Klipper does not match expected location.<br/><br/>Received: '/home/pi/printer_data/gcode'<br/>Expected: '/home/pi/printer_data/gcodes'<br/><br/>Modify the [virtual_sdcard] section Klipper's configuration to correct this error.<br/><br/>[virtual_sdcard]<br/>path: /home/pi/printer_data/gcodes"], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 16:34:26,888 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 16:34:27,013 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 16:34:27,019 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcode'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcode', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 16:34:27,023 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 16:34:27,026 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-19 16:34:27,026 [printer.py:reinit()] - # Extruders: 1
2024-02-19 16:34:27,026 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 16:34:27,026 [printer.py:reinit()] - # Fans: 2
2024-02-19 16:34:27,027 [printer.py:reinit()] - # Output pins: 1
2024-02-19 16:34:27,027 [printer.py:reinit()] - # Leds: 0
2024-02-19 16:34:27,048 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 16:34:27,051 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 16:34:27,338 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 16:34:27,347 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcode
2024-02-19 16:34:27,348 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 16:34:27,355 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 16:34:27,365 [screen.py:init_klipper()] - Printer initialized
2024-02-19 16:34:27,366 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 16:34:27,366 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 16:34:27,381 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 16:34:27,544 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 16:34:27,558 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 16:34:27,567 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 16:34:27,618 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 16:34:27,633 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 16:34:27,657 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 16:34:27,674 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 16:34:27,676 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 16:34:27,865 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 16:34:27,866 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["GCode path received from Klipper does not match expected location.<br/><br/>Received: '/home/pi/printer_data/gcode'<br/>Expected: '/home/pi/printer_data/gcodes'<br/><br/>Modify the [virtual_sdcard] section Klipper's configuration to correct this error.<br/><br/>[virtual_sdcard]<br/>path: /home/pi/printer_data/gcodes"], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 16:34:27,883 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 16:34:28,016 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 16:34:28,022 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcode'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcode', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 16:34:28,027 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 16:34:28,032 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-19 16:34:28,033 [printer.py:reinit()] - # Extruders: 1
2024-02-19 16:34:28,033 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 16:34:28,033 [printer.py:reinit()] - # Fans: 2
2024-02-19 16:34:28,033 [printer.py:reinit()] - # Output pins: 1
2024-02-19 16:34:28,033 [printer.py:reinit()] - # Leds: 0
2024-02-19 16:34:28,052 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 16:34:28,056 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 16:34:28,320 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 16:34:28,330 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcode
2024-02-19 16:34:28,331 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 16:34:28,336 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 16:34:28,343 [screen.py:init_klipper()] - Printer initialized
2024-02-19 16:34:33,001 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:26:14,688 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:26:19,690 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:26:24,688 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:26:29,687 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:26:34,697 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:26:39,687 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:26:44,688 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:26:49,687 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:26:54,690 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:26:57,159 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 17:26:57,159 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 17:26:57,161 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 17:26:57,162 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:26:57,167 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:26:57,241 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:27:00,700 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:27:00,705 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
GCode path received from Klipper does not match expected location.

Received:
 '/home/pi/printer_data/gcode'
Expected:
 '/home/pi/printer_data/gcodes'

Modify the [virtual_sdcard] section Klipper's configuration to correct this error.

[virtual_sdcard]
path:
 /home/pi/printer_data/gcodes

2024-02-19 17:27:00,726 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:27:00,729 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:27:00,729 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["GCode path received from Klipper does not match expected location.<br/><br/>Received: '/home/pi/printer_data/gcode'<br/>Expected: '/home/pi/printer_data/gcodes'<br/><br/>Modify the [virtual_sdcard] section Klipper's configuration to correct this error.<br/><br/>[virtual_sdcard]<br/>path: /home/pi/printer_data/gcodes"], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:27:00,809 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:27:00,846 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:27:00,851 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:27:00,856 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:27:00,859 [printer.py:reinit()] - Klipper version: v0.12.0-111-g4f00f219
2024-02-19 17:27:00,859 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:27:00,859 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 17:27:00,859 [printer.py:reinit()] - # Fans: 2
2024-02-19 17:27:00,859 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:27:00,859 [printer.py:reinit()] - # Leds: 0
2024-02-19 17:27:00,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:27:00,879 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:27:01,157 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 17:27:01,166 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:27:01,166 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:27:01,173 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:27:01,179 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:27:01,179 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 17:27:01,179 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 17:27:03,598 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 17:27:03,598 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 17:27:03,602 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:27:03,710 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 17:27:03,722 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 17:27:03,730 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 17:27:03,786 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 17:27:03,800 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 17:27:03,822 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 17:27:03,837 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 17:27:03,840 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 17:28:48,163 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-02-19 17:28:48,163 [printer.py:change_state()] - Adding callback for state: shutdown
2024-02-19 17:28:48,174 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:28:48,179 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:28:48,242 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:28:49,120 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-02-19 17:28:49,120 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 17:28:49,121 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 17:28:49,121 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:28:49,123 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:28:49,191 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:28:52,700 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:28:52,715 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:28:52,716 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:28:52,717 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:28:52,717 [screen.py:init_klipper()] - Klipper not connected
2024-02-19 17:28:55,700 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:28:55,701 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-311-g65a8271', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:28:55,702 [screen.py:init_klipper()] - Klipper not connected
2024-02-19 17:28:57,135 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-02-19 17:28:57,136 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-02-19 17:28:57,137 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-02-19 17:28:57,139 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:28:57,225 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:28:57,303 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 17:28:57,306 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:28:57,382 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:28:57,399 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 17:28:57,409 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-02-19 17:28:58,693 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-02-19 17:28:58,696 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: 'bool' object is not subscriptable
  File "/home/pi/KlipperScreen/screen.py", line 945, in init_klipper
    server_info = self.apiclient.get_server_info()["result"]
NoneType: None
2024-02-19 17:29:20,293 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 17:29:20,302 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-100-gf0abcfb
2024-02-19 17:29:20,302 [functions.py:log_start()] - Python version: 3.9
2024-02-19 17:29:20,486 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 17:29:20,487 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-02-19 17:29:20,501 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 17:29:20,619 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 17:29:20,619 [config.py:install_language()] - Using lang en
2024-02-19 17:29:20,637 [screen.py:__init__()] - Screen resolution: 720x480
2024-02-19 17:29:20,639 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-19 17:29:21,128 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 17:29:21,138 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-19 17:29:21,146 [screen.py:initial_connection()] - Default printer: None
2024-02-19 17:29:21,190 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 17:29:21,191 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 17:29:21,252 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:29:21,264 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 17:29:21,285 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:29:21,299 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 17:29:21,300 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 17:29:21,314 [_logging.py:info()] - Websocket connected
2024-02-19 17:29:21,315 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 17:29:21,361 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:29:21,375 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:29:21,376 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:29:21,377 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:29:21,393 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:29:21,610 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:29:21,616 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:29:21,620 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:29:21,622 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 17:29:21,623 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:29:21,623 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 17:29:21,623 [printer.py:reinit()] - # Fans: 2
2024-02-19 17:29:21,623 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:29:21,623 [printer.py:reinit()] - # Leds: 0
2024-02-19 17:29:21,645 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:29:21,648 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:29:21,929 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 17:29:21,949 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:29:21,950 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:29:21,962 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:29:21,972 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:29:21,972 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-02-19 17:29:21,972 [printer.py:change_state()] - Adding callback for state: error
2024-02-19 17:29:21,976 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:29:22,040 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:30:55,151 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-02-19 17:30:55,152 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 17:30:55,154 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 17:30:55,155 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:30:55,160 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:30:55,234 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:30:58,699 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:30:58,714 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:30:58,716 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:30:58,716 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:30:58,776 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:30:58,815 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:30:58,819 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-36', 'y_offset': '0', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -36.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:30:58,824 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:30:58,827 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 17:30:58,827 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:30:58,827 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 17:30:58,827 [printer.py:reinit()] - # Fans: 2
2024-02-19 17:30:58,827 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:30:58,827 [printer.py:reinit()] - # Leds: 0
2024-02-19 17:30:58,845 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:30:58,849 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:30:59,114 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 17:30:59,124 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:30:59,124 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:30:59,141 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:30:59,147 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:30:59,148 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 17:30:59,148 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 17:31:01,635 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 17:31:01,635 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 17:31:01,639 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 17:31:01,744 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 17:31:01,757 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 17:31:01,766 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 17:31:01,812 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 17:31:01,826 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 17:31:01,827 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-02-19 17:31:01,828 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: None
2024-02-19 17:31:06,710 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 17:31:06,749 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 17:31:06,772 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 17:31:06,775 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 17:33:18,881 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 17:33:18,882 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 17:33:18,885 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 17:33:18,885 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:33:18,890 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:33:18,965 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:33:22,701 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:33:22,719 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:33:22,721 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:33:22,721 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:33:22,739 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:33:22,775 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:33:22,780 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-30', 'y_offset': '-40', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -30.0, 'y_offset': -40.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:33:22,785 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:33:22,789 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 17:33:22,789 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:33:22,789 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 17:33:22,789 [printer.py:reinit()] - # Fans: 2
2024-02-19 17:33:22,789 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:33:22,790 [printer.py:reinit()] - # Leds: 0
2024-02-19 17:33:22,810 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:33:22,813 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:33:23,065 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 17:33:23,074 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:33:23,074 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:33:23,081 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:33:23,087 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:33:23,087 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 17:33:23,087 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 17:33:25,263 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 17:33:25,264 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 17:33:25,269 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:33:25,372 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 17:33:25,384 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 17:33:25,392 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 17:33:25,439 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 17:33:25,453 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 17:33:25,476 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 17:33:25,490 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 17:33:25,492 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 17:36:08,552 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 17:36:08,560 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-100-gf0abcfb
2024-02-19 17:36:08,561 [functions.py:log_start()] - Python version: 3.9
2024-02-19 17:36:08,922 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 17:36:08,923 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-02-19 17:36:08,940 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 17:36:09,128 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 17:36:09,128 [config.py:install_language()] - Using lang en
2024-02-19 17:36:09,153 [screen.py:__init__()] - Screen resolution: 720x480
2024-02-19 17:36:09,156 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-19 17:36:10,339 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 17:36:10,357 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-19 17:36:10,382 [screen.py:initial_connection()] - Default printer: None
2024-02-19 17:36:10,452 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 17:36:10,453 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 17:36:10,550 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:36:10,568 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 17:36:10,600 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:36:10,618 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 17:36:10,620 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 17:36:10,649 [_logging.py:info()] - Websocket connected
2024-02-19 17:36:10,650 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 17:36:10,760 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:36:10,780 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:36:10,782 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:36:10,783 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:36:10,835 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-02-19 17:36:13,844 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:36:13,864 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:36:13,866 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:36:13,866 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:36:13,887 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:36:14,166 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:36:14,170 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-30', 'y_offset': '-40', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -30.0, 'y_offset': -40.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:36:14,175 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:36:14,178 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 17:36:14,178 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:36:14,178 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 17:36:14,178 [printer.py:reinit()] - # Fans: 2
2024-02-19 17:36:14,178 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:36:14,178 [printer.py:reinit()] - # Leds: 0
2024-02-19 17:36:14,200 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:36:14,203 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:36:14,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 17:36:14,494 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:36:14,494 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:36:14,497 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:36:14,503 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:36:14,504 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 17:36:14,504 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 17:36:14,529 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 17:36:14,675 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 17:36:14,692 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 17:36:14,704 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 17:36:14,759 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 17:36:14,772 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 17:36:14,795 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 17:36:14,812 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 17:36:14,813 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 17:36:14,846 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:36:14,848 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:36:14,865 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:36:14,917 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:36:14,922 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-30', 'y_offset': '-40', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -30.0, 'y_offset': -40.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:36:14,928 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:36:14,930 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 17:36:14,931 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:36:14,931 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 17:36:14,931 [printer.py:reinit()] - # Fans: 2
2024-02-19 17:36:14,931 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:36:14,931 [printer.py:reinit()] - # Leds: 0
2024-02-19 17:36:14,951 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:36:14,954 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:36:15,220 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 17:36:15,231 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:36:15,232 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:36:15,242 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:36:15,243 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:36:15,316 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:36:19,825 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:36:36,864 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:36:41,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:36:46,867 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:36:51,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:36:56,867 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:01,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:06,867 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:11,867 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:16,865 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:21,880 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:26,867 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:31,867 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:36,868 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:41,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:46,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:51,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:37:56,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:38:01,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:38:06,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:38:11,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:38:16,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:38:21,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:38:26,866 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:38:31,882 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 17:38:32,129 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 17:38:32,130 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 17:38:32,131 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 17:38:32,131 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:38:32,138 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:38:32,217 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:38:35,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:38:35,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:38:35,892 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:38:35,893 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:38:35,911 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:38:35,941 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:38:35,945 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-30', 'y_offset': '-40', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -30.0, 'y_offset': -40.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:38:35,951 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:38:35,954 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 17:38:35,954 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:38:35,954 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 17:38:35,954 [printer.py:reinit()] - # Fans: 2
2024-02-19 17:38:35,954 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:38:35,955 [printer.py:reinit()] - # Leds: 0
2024-02-19 17:38:35,975 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:38:35,981 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:38:36,240 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 17:38:36,249 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:38:36,249 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:38:36,273 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:38:36,285 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:38:36,286 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 17:38:36,286 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 17:38:38,444 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 17:38:38,444 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 17:38:38,452 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:38:38,570 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 17:38:38,582 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 17:38:38,590 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 17:38:38,636 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 17:38:38,650 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 17:38:38,673 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 17:38:38,687 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 17:38:38,688 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 17:41:40,867 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 17:41:40,867 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 17:41:40,868 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 17:41:40,869 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:41:40,873 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:41:40,955 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:41:43,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:41:43,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:41:43,893 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:41:43,894 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:41:44,547 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:41:44,584 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:41:44,589 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '250'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 250.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:41:44,594 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:41:44,596 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 17:41:44,596 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:41:44,596 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 17:41:44,597 [printer.py:reinit()] - # Fans: 2
2024-02-19 17:41:44,597 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:41:44,597 [printer.py:reinit()] - # Leds: 0
2024-02-19 17:41:44,616 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:41:44,619 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:41:44,885 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 17:41:44,894 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:41:44,894 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:41:44,900 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:41:44,901 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:41:44,902 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 17:41:44,902 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 17:41:47,391 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 17:41:47,391 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 17:41:47,397 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:41:47,556 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 17:41:47,568 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 17:41:47,576 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 17:41:47,623 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 17:41:47,644 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 17:41:47,667 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 17:41:47,681 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 17:41:47,683 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 17:44:22,793 [screen.py:show_popup_message()] - error: Move out of range: 231.000 0.000 2.000 [0.000]
2024-02-19 17:44:23,990 [screen.py:show_popup_message()] - error: Move out of range: 231.000 0.000 2.000 [0.000]
2024-02-19 17:45:00,037 [screen.py:show_popup_message()] - error: Move out of range: 230.000 231.000 2.000 [0.000]
2024-02-19 17:45:02,269 [screen.py:show_popup_message()] - error: Move out of range: 230.000 231.000 2.000 [0.000]
2024-02-19 17:48:31,842 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 17:48:31,843 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 17:48:31,848 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 17:48:31,848 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:48:31,854 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:48:31,920 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:48:34,877 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:48:34,894 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:48:34,897 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:48:34,897 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:48:35,484 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:48:35,526 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:48:35,531 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '151,115', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CCW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [151.0, 115.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CCW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:48:35,536 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:48:35,539 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 17:48:35,539 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:48:35,539 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 17:48:35,539 [printer.py:reinit()] - # Fans: 2
2024-02-19 17:48:35,539 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:48:35,540 [printer.py:reinit()] - # Leds: 0
2024-02-19 17:48:35,558 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:48:35,562 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:48:35,825 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 17:48:35,834 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:48:35,835 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:48:35,852 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:48:35,858 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:48:35,859 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 17:48:35,859 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 17:48:38,335 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 17:48:38,335 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 17:48:38,340 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:48:38,444 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 17:48:38,456 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 17:48:38,465 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 17:48:38,513 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 17:48:38,533 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 17:48:38,549 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 17:48:38,564 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 17:48:38,566 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 17:50:33,585 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 17:50:33,585 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 17:50:33,587 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 17:50:33,587 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:50:33,592 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:50:33,678 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:50:36,875 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:50:36,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:50:36,893 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:50:36,894 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:50:37,206 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:50:37,243 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:50:37,249 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '71,35', 'screw1_name': 'front left screw', 'screw2': '230,35', 'screw2_name': 'front right screw', 'screw3': '230,200', 'screw3_name': 'rear right screw', 'screw4': '71,200', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 35.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 35.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 200.0], 'screw3_name': 'rear right screw', 'screw4': [71.0, 200.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:50:37,254 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:50:37,256 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 17:50:37,257 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:50:37,257 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 17:50:37,257 [printer.py:reinit()] - # Fans: 2
2024-02-19 17:50:37,257 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:50:37,257 [printer.py:reinit()] - # Leds: 0
2024-02-19 17:50:37,278 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:50:37,280 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:50:37,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 17:50:37,553 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:50:37,554 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:50:37,572 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:50:37,573 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:50:37,573 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 17:50:37,573 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 17:50:40,057 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 17:50:40,058 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 17:50:40,063 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:50:40,165 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 17:50:40,177 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 17:50:40,185 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 17:50:40,230 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 17:50:40,252 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 17:50:40,266 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 17:50:40,280 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 17:50:40,282 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 17:56:33,533 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 17:56:33,534 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 17:56:33,536 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 17:56:33,536 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:56:33,542 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:56:33,623 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:56:36,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:56:36,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:56:36,893 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 17:56:36,893 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:56:37,168 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:56:37,205 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:56:37,209 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.65'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.65, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:56:37,216 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:56:37,218 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 17:56:37,218 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:56:37,219 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 17:56:37,219 [printer.py:reinit()] - # Fans: 2
2024-02-19 17:56:37,219 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:56:37,219 [printer.py:reinit()] - # Leds: 0
2024-02-19 17:56:37,240 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:56:37,243 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:56:37,504 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 17:56:37,514 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:56:37,514 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:56:37,520 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:56:37,526 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:56:37,527 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 17:56:37,527 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 17:56:39,953 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 17:56:39,953 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 17:56:39,957 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 17:56:40,063 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 17:56:40,075 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 17:56:40,083 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 17:56:40,129 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 17:56:40,154 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 17:56:40,161 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 17:56:40,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 17:56:40,177 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 17:57:42,411 [screen.py:_load_panel()] - Loading panel: bed_level
2024-02-19 17:57:42,474 [bed_level.py:_get_screws()] - screws_tilt_adjust
2024-02-19 17:57:42,474 [bed_level.py:_get_screws()] - screw1: 61.8,86
2024-02-19 17:57:42,476 [bed_level.py:_get_screws()] - screw1_name: front left screw
2024-02-19 17:57:42,477 [bed_level.py:_get_screws()] - screw2: 230,86
2024-02-19 17:57:42,477 [bed_level.py:_get_screws()] - screw2_name: front right screw
2024-02-19 17:57:42,477 [bed_level.py:_get_screws()] - screw3: 230,230
2024-02-19 17:57:42,477 [bed_level.py:_get_screws()] - screw3_name: rear right screw
2024-02-19 17:57:42,478 [bed_level.py:_get_screws()] - screw4: 61.8,230
2024-02-19 17:57:42,478 [bed_level.py:_get_screws()] - screw4_name: rear left screw
2024-02-19 17:57:42,478 [bed_level.py:_get_screws()] - horizontal_move_z: 5.
2024-02-19 17:57:42,479 [bed_level.py:_get_screws()] - speed: 250.
2024-02-19 17:57:42,479 [bed_level.py:_get_screws()] - screw_thread: CW-M4
2024-02-19 17:57:42,479 [bed_level.py:__init__()] - screws_tilt_adjust: [[61.8, 86.0], [230.0, 86.0], [61.8, 230.0], [230.0, 230.0]]
2024-02-19 17:57:42,480 [printer.py:get_probe()] - Probe type: bltouch
2024-02-19 17:57:42,481 [bed_level.py:__init__()] - offset X: -31.8 Y: -41.0
2024-02-19 17:57:42,481 [bed_level.py:__init__()] - screws with offset: [[30.0, 45.0], [198.2, 45.0], [30.0, 189.0], [198.2, 189.0]]
2024-02-19 17:57:42,481 [bed_level.py:__init__()] - X: {30.0, 198.2}
Y: {45.0, 189.0}
2024-02-19 17:57:42,482 [bed_level.py:__init__()] - Using max_distance: 111 to fit: 4 screws.
2024-02-19 17:57:42,482 [bed_level.py:__init__()] - Using 4/4-screw locations
2024-02-19 17:57:42,561 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > bed_level
2024-02-19 17:57:42,563 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 17:57:42,563 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 17:57:42,563 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 17:57:42,572 [bed_level.py:process_update()] - screw2 CW 02:01
2024-02-19 17:57:42,572 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 02:01 Pos: fr
2024-02-19 17:57:42,579 [bed_level.py:process_update()] - screw3 CW 03:08
2024-02-19 17:57:42,580 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 03:08 Pos: br
2024-02-19 17:57:42,586 [bed_level.py:process_update()] - screw4 CW 01:08
2024-02-19 17:57:42,586 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 01:08 Pos: bl
2024-02-19 17:57:42,598 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 17:57:42,598 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 17:57:42,598 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 17:57:42,605 [bed_level.py:process_update()] - screw2 CW 02:01
2024-02-19 17:57:42,606 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 02:01 Pos: fr
2024-02-19 17:57:42,613 [bed_level.py:process_update()] - screw3 CW 03:08
2024-02-19 17:57:42,613 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 03:08 Pos: br
2024-02-19 17:57:42,620 [bed_level.py:process_update()] - screw4 CW 01:08
2024-02-19 17:57:42,621 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 01:08 Pos: bl
2024-02-19 17:58:18,788 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 17:58:18,789 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 17:58:18,789 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 17:58:18,804 [bed_level.py:process_update()] - screw2 CW 00:50
2024-02-19 17:58:18,805 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:50 Pos: fr
2024-02-19 17:58:18,819 [bed_level.py:process_update()] - screw3 CW 01:32
2024-02-19 17:58:18,819 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 01:32 Pos: br
2024-02-19 17:58:18,834 [bed_level.py:process_update()] - screw4 CW 00:02
2024-02-19 17:58:18,834 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:02 Pos: bl
2024-02-19 17:59:08,429 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 17:59:08,430 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 17:59:08,430 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 17:59:08,444 [bed_level.py:process_update()] - screw2 CW 00:60
2024-02-19 17:59:08,444 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:60 Pos: fr
2024-02-19 17:59:08,457 [bed_level.py:process_update()] - screw3 CW 01:43
2024-02-19 17:59:08,458 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 01:43 Pos: br
2024-02-19 17:59:08,471 [bed_level.py:process_update()] - screw4 CW 00:03
2024-02-19 17:59:08,472 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:03 Pos: bl
2024-02-19 17:59:46,537 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 17:59:46,537 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 17:59:46,538 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 17:59:46,554 [bed_level.py:process_update()] - screw2 CW 00:03
2024-02-19 17:59:46,554 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:03 Pos: fr
2024-02-19 17:59:46,569 [bed_level.py:process_update()] - screw3 CW 00:44
2024-02-19 17:59:46,570 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:44 Pos: br
2024-02-19 17:59:46,584 [bed_level.py:process_update()] - screw4 CCW 00:02
2024-02-19 17:59:46,585 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:02 Pos: bl
2024-02-19 18:00:29,938 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 18:00:29,938 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 18:00:29,939 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 18:00:29,952 [bed_level.py:process_update()] - screw2 CCW 00:11
2024-02-19 18:00:29,953 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:11 Pos: fr
2024-02-19 18:00:29,967 [bed_level.py:process_update()] - screw3 CW 00:10
2024-02-19 18:00:29,968 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:10 Pos: br
2024-02-19 18:00:29,980 [bed_level.py:process_update()] - screw4 CCW 00:07
2024-02-19 18:00:29,981 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:07 Pos: bl
2024-02-19 18:01:06,547 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 18:01:06,548 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 18:01:06,548 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 18:01:06,563 [bed_level.py:process_update()] - screw2 CCW 00:10
2024-02-19 18:01:06,563 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:10 Pos: fr
2024-02-19 18:01:06,576 [bed_level.py:process_update()] - screw3 CCW 00:01
2024-02-19 18:01:06,576 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:01 Pos: br
2024-02-19 18:01:06,589 [bed_level.py:process_update()] - screw4 CCW 00:06
2024-02-19 18:01:06,590 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:06 Pos: bl
2024-02-19 18:01:37,410 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 18:01:37,410 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 18:01:37,411 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 18:01:37,426 [bed_level.py:process_update()] - screw2 CCW 00:09
2024-02-19 18:01:37,427 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:09 Pos: fr
2024-02-19 18:01:37,442 [bed_level.py:process_update()] - screw3 CW 00:10
2024-02-19 18:01:37,442 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:10 Pos: br
2024-02-19 18:01:37,462 [bed_level.py:process_update()] - screw4 CW 00:01
2024-02-19 18:01:37,463 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:01 Pos: bl
2024-02-19 18:02:10,247 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 18:02:10,248 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 18:02:10,248 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 18:02:10,265 [bed_level.py:process_update()] - screw2 CCW 00:01
2024-02-19 18:02:10,266 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:01 Pos: fr
2024-02-19 18:02:10,280 [bed_level.py:process_update()] - screw3 CW 00:00
2024-02-19 18:02:10,281 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:00 Pos: br
2024-02-19 18:02:10,296 [bed_level.py:process_update()] - screw4 CCW 00:04
2024-02-19 18:02:10,297 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:04 Pos: bl
2024-02-19 18:02:37,330 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 18:02:37,331 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 18:02:37,331 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 18:02:37,344 [bed_level.py:process_update()] - screw2 CCW 00:03
2024-02-19 18:02:37,345 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:03 Pos: fr
2024-02-19 18:02:37,358 [bed_level.py:process_update()] - screw3 CCW 00:01
2024-02-19 18:02:37,358 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:01 Pos: br
2024-02-19 18:02:37,372 [bed_level.py:process_update()] - screw4 CW 00:01
2024-02-19 18:02:37,373 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:01 Pos: bl
2024-02-19 18:03:07,669 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 18:03:07,669 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 18:03:07,670 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 18:03:07,681 [bed_level.py:process_update()] - screw2 CW 00:01
2024-02-19 18:03:07,681 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:01 Pos: fr
2024-02-19 18:03:07,692 [bed_level.py:process_update()] - screw3 CW 00:00
2024-02-19 18:03:07,692 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:00 Pos: br
2024-02-19 18:03:07,703 [bed_level.py:process_update()] - screw4 CW 00:00
2024-02-19 18:03:07,703 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:00 Pos: bl
2024-02-19 18:04:52,496 [screen.py:_load_panel()] - Loading panel: zcalibrate
2024-02-19 18:04:52,536 [printer.py:get_probe()] - Probe type: bltouch
2024-02-19 18:04:52,537 [zcalibrate.py:__init__()] - Z offset: 2.65
2024-02-19 18:04:52,590 [zcalibrate.py:__init__()] - Available functions for calibration: ['probe']
2024-02-19 18:04:52,616 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > bed_level > zcalibrate
2024-02-19 18:05:56,632 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=720, height=480)
2024-02-19 18:06:04,223 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 18:06:04,223 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 18:06:04,226 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 18:06:04,226 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 18:06:04,235 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-19 18:06:04,236 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 18:06:04,311 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 18:06:07,881 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 18:06:07,894 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 18:06:07,896 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 18:06:07,897 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 18:06:07,911 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 18:06:07,941 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 18:06:07,946 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '64', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '64', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '64', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.580', 'interpolate': 'False', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.561'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro G29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 64, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 64, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 64, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 64, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.561, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro g29': {'gcode': '\nBED_MESH_CALIBRATE\nG1 X151 Y115 Z5 F15000', 'description': 'G-Code macro'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 18:06:07,952 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 18:06:07,955 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 18:06:07,955 [printer.py:reinit()] - # Extruders: 1
2024-02-19 18:06:07,955 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 18:06:07,955 [printer.py:reinit()] - # Fans: 2
2024-02-19 18:06:07,955 [printer.py:reinit()] - # Output pins: 1
2024-02-19 18:06:07,955 [printer.py:reinit()] - # Leds: 0
2024-02-19 18:06:07,976 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 18:06:07,979 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 18:06:08,248 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 18:06:08,259 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 18:06:08,260 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 18:06:08,287 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 18:06:08,289 [screen.py:init_klipper()] - Printer initialized
2024-02-19 18:06:08,290 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 18:06:08,290 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 18:06:10,709 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 18:06:10,710 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 18:06:10,713 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 18:06:10,816 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 18:06:10,828 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 18:06:10,836 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 18:06:10,882 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 18:06:10,907 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 18:06:10,913 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 18:06:10,929 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 18:06:10,930 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 18:36:22,864 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-19 19:11:44,385 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 19:11:44,385 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 19:11:44,387 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 19:11:44,387 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:11:44,388 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-19 19:11:44,428 [screen.py:wake_screen()] - Screen wake up
2024-02-19 19:11:44,438 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:11:44,501 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:11:47,878 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 19:11:47,894 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 19:11:47,895 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 19:11:47,896 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 19:11:48,007 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 19:11:48,045 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 19:11:48,050 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.561'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro PREPARE_1': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n{% set MAX_TILT = params.MAX_TILT|default(0.01)|float %}\nG28\nSCREWS_TILT_CALCULATE MAX_DEVIATION=0.01\n\n{% if MAX_TILT < MAX_DEVIATION %}\nG28\nSCREWS_TILT_CALCULATE\n{% else %}\nG28\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% endif %}'}, 'gcode_macro PREPARE_2': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'respond': {'default_type': 'echo'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.561, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro prepare_1': {'gcode': '\n{% set MAX_TILT = params.MAX_TILT|default(0.01)|float %}\nG28\nSCREWS_TILT_CALCULATE MAX_DEVIATION=0.01\n\n{% if MAX_TILT < MAX_DEVIATION %}\nG28\nSCREWS_TILT_CALCULATE\n{% else %}\nG28\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro prepare_2': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 19:11:48,055 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:11:48,058 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 19:11:48,058 [printer.py:reinit()] - # Extruders: 1
2024-02-19 19:11:48,058 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 19:11:48,058 [printer.py:reinit()] - # Fans: 2
2024-02-19 19:11:48,058 [printer.py:reinit()] - # Output pins: 1
2024-02-19 19:11:48,059 [printer.py:reinit()] - # Leds: 0
2024-02-19 19:11:48,079 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 19:11:48,082 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 19:11:48,346 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 19:11:48,355 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 19:11:48,355 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 19:11:48,368 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 19:11:48,370 [screen.py:init_klipper()] - Printer initialized
2024-02-19 19:11:48,371 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 19:11:48,372 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 19:11:50,886 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 19:11:50,887 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 19:11:50,896 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:11:51,021 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 19:11:51,034 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 19:11:51,043 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 19:11:51,090 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 19:11:51,119 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 19:11:51,127 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 19:11:51,146 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 19:11:51,147 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 19:12:02,899 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PREPARE_1:gcode': jinja2.exceptions.UndefinedError: 'MAX_DEVIATION' is undefined
2024-02-19 19:23:07,456 [screen.py:show_popup_message()] - error: // Unknown command:"SCREWS_TILT_ADJUST."
2024-02-19 19:23:21,578 [screen.py:show_popup_message()] - error: // Unknown command:"SCREWS_TILT_CALCULATE."
2024-02-19 19:25:05,877 [screen.py:show_popup_message()] - error: // Unknown command:"SCREWS_TILT_ADJUST"
2024-02-19 19:33:26,736 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 19:33:26,737 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 19:33:26,739 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 19:33:26,739 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:33:26,744 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:33:26,826 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:33:29,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 19:33:29,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 19:33:29,893 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 19:33:29,894 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 19:33:30,286 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 19:33:30,310 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 19:33:30,312 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 19:33:30,313 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:33:30,314 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 19:33:30,314 [printer.py:reinit()] - # Extruders: 0
2024-02-19 19:33:30,314 [printer.py:reinit()] - # Temperature devices: 0
2024-02-19 19:33:30,314 [printer.py:reinit()] - # Fans: 0
2024-02-19 19:33:30,314 [printer.py:reinit()] - # Output pins: 0
2024-02-19 19:33:30,314 [printer.py:reinit()] - # Leds: 0
2024-02-19 19:33:30,331 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 19:33:30,333 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 19:33:30,564 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-02-19 19:33:30,566 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 19:33:30,567 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 19:33:30,568 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 19:33:30,570 [screen.py:init_klipper()] - Printer initialized
2024-02-19 19:33:30,571 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-02-19 19:33:30,571 [printer.py:change_state()] - Adding callback for state: error
2024-02-19 19:33:30,575 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:33:30,642 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:37:59,558 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-02-19 19:37:59,559 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 19:37:59,560 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 19:37:59,560 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:37:59,562 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:37:59,623 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:38:02,879 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 19:38:02,896 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 19:38:02,898 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 19:38:02,898 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 19:38:03,090 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 19:38:03,118 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 19:38:03,119 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 19:38:03,120 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:38:03,120 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 19:38:03,120 [printer.py:reinit()] - # Extruders: 0
2024-02-19 19:38:03,121 [printer.py:reinit()] - # Temperature devices: 0
2024-02-19 19:38:03,121 [printer.py:reinit()] - # Fans: 0
2024-02-19 19:38:03,121 [printer.py:reinit()] - # Output pins: 0
2024-02-19 19:38:03,121 [printer.py:reinit()] - # Leds: 0
2024-02-19 19:38:03,137 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 19:38:03,138 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 19:38:03,376 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-02-19 19:38:03,377 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 19:38:03,378 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 19:38:03,379 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 19:38:03,379 [screen.py:init_klipper()] - Printer initialized
2024-02-19 19:38:03,380 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-02-19 19:38:03,380 [printer.py:change_state()] - Adding callback for state: error
2024-02-19 19:38:03,384 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:38:03,448 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:38:30,762 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-02-19 19:38:30,762 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 19:38:30,763 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 19:38:30,764 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:38:30,769 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:38:30,871 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:38:33,877 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 19:38:33,893 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 19:38:33,894 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 19:38:33,895 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 19:38:34,264 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 19:38:34,288 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 19:38:34,290 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 19:38:34,290 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:38:34,290 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 19:38:34,291 [printer.py:reinit()] - # Extruders: 0
2024-02-19 19:38:34,291 [printer.py:reinit()] - # Temperature devices: 0
2024-02-19 19:38:34,291 [printer.py:reinit()] - # Fans: 0
2024-02-19 19:38:34,291 [printer.py:reinit()] - # Output pins: 0
2024-02-19 19:38:34,291 [printer.py:reinit()] - # Leds: 0
2024-02-19 19:38:34,307 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 19:38:34,308 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 19:38:34,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-02-19 19:38:34,547 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 19:38:34,547 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 19:38:34,548 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 19:38:34,549 [screen.py:init_klipper()] - Printer initialized
2024-02-19 19:38:34,549 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-02-19 19:38:34,550 [printer.py:change_state()] - Adding callback for state: error
2024-02-19 19:38:34,553 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:38:34,617 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:39:21,848 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-02-19 19:39:21,848 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 19:39:21,850 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 19:39:21,850 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:39:21,854 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:39:21,965 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:39:24,877 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 19:39:24,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 19:39:24,893 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 19:39:24,893 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 19:39:25,456 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 19:39:25,494 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 19:39:25,499 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.561'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro PREPARE_1': {'description': 'Etape 1 de la calibration avant impression', 'gcode': "\n\nG28\nSCREWS_TILT_CALCULATE MAX_DEVIATION=0.01\n\n\n{% if printer.screws_tilt_adjust.error == 'true' %}\nM117 Bed screws need ajusting, run PREPARE_1_2\n{% else %}\nG28\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% endif %}"}, 'gcode_macro PREPARE_1_2': {'description': 'Etape 1.2 de la calibration avant impression', 'gcode': '\nG28\nSCREWS_TILT_CALCULATE'}, 'gcode_macro PREPARE_2': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'respond': {'default_type': 'echo'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.561, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro prepare_1': {'gcode': "\n\nG28\nSCREWS_TILT_CALCULATE MAX_DEVIATION=0.01\n\n\n{% if printer.screws_tilt_adjust.error == 'true' %}\nM117 Bed screws need ajusting, run PREPARE_1_2\n{% else %}\nG28\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% endif %}", 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro prepare_1_2': {'gcode': '\nG28\nSCREWS_TILT_CALCULATE', 'description': 'Etape 1.2 de la calibration avant impression'}, 'gcode_macro prepare_2': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 19:39:25,503 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:39:25,506 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 19:39:25,506 [printer.py:reinit()] - # Extruders: 1
2024-02-19 19:39:25,506 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 19:39:25,506 [printer.py:reinit()] - # Fans: 2
2024-02-19 19:39:25,507 [printer.py:reinit()] - # Output pins: 1
2024-02-19 19:39:25,507 [printer.py:reinit()] - # Leds: 0
2024-02-19 19:39:25,523 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 19:39:25,527 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 19:39:25,795 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 19:39:25,805 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 19:39:25,805 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 19:39:25,811 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 19:39:25,817 [screen.py:init_klipper()] - Printer initialized
2024-02-19 19:39:25,818 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 19:39:25,818 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 19:39:28,299 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 19:39:28,299 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 19:39:28,303 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:39:28,406 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 19:39:28,419 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 19:39:28,427 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 19:39:28,474 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 19:39:28,499 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 19:39:28,506 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 19:39:28,524 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 19:39:28,525 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 19:40:11,901 [screen.py:show_popup_message()] - error: bed level exceeds configured limits (0.01mm)! Adjust screws and restart print.
2024-02-19 19:40:11,993 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:40:12,013 [bed_level.py:_get_screws()] - screws_tilt_adjust
2024-02-19 19:40:12,013 [bed_level.py:_get_screws()] - screw1: 61.8,86
2024-02-19 19:40:12,014 [bed_level.py:_get_screws()] - screw1_name: front left screw
2024-02-19 19:40:12,014 [bed_level.py:_get_screws()] - screw2: 230,86
2024-02-19 19:40:12,014 [bed_level.py:_get_screws()] - screw2_name: front right screw
2024-02-19 19:40:12,014 [bed_level.py:_get_screws()] - screw3: 230,230
2024-02-19 19:40:12,014 [bed_level.py:_get_screws()] - screw3_name: rear right screw
2024-02-19 19:40:12,014 [bed_level.py:_get_screws()] - screw4: 61.8,230
2024-02-19 19:40:12,015 [bed_level.py:_get_screws()] - screw4_name: rear left screw
2024-02-19 19:40:12,015 [bed_level.py:_get_screws()] - horizontal_move_z: 5.
2024-02-19 19:40:12,015 [bed_level.py:_get_screws()] - speed: 250.
2024-02-19 19:40:12,015 [bed_level.py:_get_screws()] - screw_thread: CW-M4
2024-02-19 19:40:12,015 [bed_level.py:__init__()] - screws_tilt_adjust: [[61.8, 86.0], [230.0, 86.0], [61.8, 230.0], [230.0, 230.0]]
2024-02-19 19:40:12,016 [printer.py:get_probe()] - Probe type: bltouch
2024-02-19 19:40:12,016 [bed_level.py:__init__()] - offset X: -31.8 Y: -41.0
2024-02-19 19:40:12,016 [bed_level.py:__init__()] - screws with offset: [[30.0, 45.0], [198.2, 45.0], [30.0, 189.0], [198.2, 189.0]]
2024-02-19 19:40:12,016 [bed_level.py:__init__()] - X: {30.0, 198.2}
Y: {45.0, 189.0}
2024-02-19 19:40:12,017 [bed_level.py:__init__()] - Using max_distance: 111 to fit: 4 screws.
2024-02-19 19:40:12,017 [bed_level.py:__init__()] - Using 4/4-screw locations
2024-02-19 19:40:12,092 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > bed_level
2024-02-19 19:40:12,094 [bed_level.py:process_update()] - Error reported by screws_tilt_adjust
2024-02-19 19:40:12,094 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 19:40:12,094 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 19:40:12,095 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 19:40:12,103 [bed_level.py:process_update()] - screw2 CCW 00:01
2024-02-19 19:40:12,103 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:01 Pos: fr
2024-02-19 19:40:12,110 [bed_level.py:process_update()] - screw3 CCW 00:02
2024-02-19 19:40:12,110 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:02 Pos: br
2024-02-19 19:40:12,117 [bed_level.py:process_update()] - screw4 CW 00:01
2024-02-19 19:40:12,118 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:01 Pos: bl
2024-02-19 19:40:12,130 [bed_level.py:process_update()] - Error reported by screws_tilt_adjust
2024-02-19 19:40:12,131 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 19:40:12,131 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 19:40:12,131 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 19:40:12,140 [bed_level.py:process_update()] - screw2 CCW 00:01
2024-02-19 19:40:12,140 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:01 Pos: fr
2024-02-19 19:40:12,148 [bed_level.py:process_update()] - screw3 CCW 00:02
2024-02-19 19:40:12,148 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:02 Pos: br
2024-02-19 19:40:12,156 [bed_level.py:process_update()] - screw4 CW 00:01
2024-02-19 19:40:12,157 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:01 Pos: bl
2024-02-19 19:40:58,799 [screen.py:show_popup_message()] - error: bed level exceeds configured limits (0.01mm)! Adjust screws and restart print.
2024-02-19 19:40:58,855 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 19:40:58,855 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 19:40:58,855 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 19:40:58,864 [bed_level.py:process_update()] - screw2 CCW 00:00
2024-02-19 19:40:58,864 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:00 Pos: fr
2024-02-19 19:40:58,872 [bed_level.py:process_update()] - screw3 CCW 00:01
2024-02-19 19:40:58,872 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:01 Pos: br
2024-02-19 19:40:58,880 [bed_level.py:process_update()] - screw4 CW 00:01
2024-02-19 19:40:58,881 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:01 Pos: bl
2024-02-19 19:46:47,207 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 19:46:47,207 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 19:46:47,208 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 19:46:47,209 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:46:47,211 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:46:47,273 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:46:50,877 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 19:46:50,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 19:46:50,893 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 19:46:50,893 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 19:46:50,911 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 19:46:50,944 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 19:46:50,957 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.561'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro PREPARE_1': {'description': 'Etape 1 de la calibration avant impression', 'gcode': "\n\nG28\nSCREWS_TILT_CALCULATE MAX_DEVIATION=0.025\n\n\n{% if printer.screws_tilt_adjust.error == 'true' %}\nM117 Bed screws need ajusting, run PREPARE_1_2\n{% else %}\nG28\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% endif %}"}, 'gcode_macro PREPARE_1_2': {'description': 'Etape 1.2 de la calibration avant impression', 'gcode': '\nG28\nSCREWS_TILT_CALCULATE'}, 'gcode_macro PREPARE_2': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'respond': {'default_type': 'echo'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.561, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro prepare_1': {'gcode': "\n\nG28\nSCREWS_TILT_CALCULATE MAX_DEVIATION=0.025\n\n\n{% if printer.screws_tilt_adjust.error == 'true' %}\nM117 Bed screws need ajusting, run PREPARE_1_2\n{% else %}\nG28\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% endif %}", 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro prepare_1_2': {'gcode': '\nG28\nSCREWS_TILT_CALCULATE', 'description': 'Etape 1.2 de la calibration avant impression'}, 'gcode_macro prepare_2': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 19:46:50,962 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:46:50,965 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 19:46:50,965 [printer.py:reinit()] - # Extruders: 1
2024-02-19 19:46:50,965 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 19:46:50,965 [printer.py:reinit()] - # Fans: 2
2024-02-19 19:46:50,965 [printer.py:reinit()] - # Output pins: 1
2024-02-19 19:46:50,965 [printer.py:reinit()] - # Leds: 0
2024-02-19 19:46:50,984 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 19:46:50,987 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 19:46:51,245 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 19:46:51,262 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 19:46:51,262 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 19:46:51,268 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 19:46:51,274 [screen.py:init_klipper()] - Printer initialized
2024-02-19 19:46:51,275 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 19:46:51,275 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 19:46:53,688 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 19:46:53,688 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 19:46:53,692 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:46:53,794 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 19:46:53,807 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 19:46:53,815 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 19:46:53,862 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 19:46:53,896 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 19:46:53,903 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 19:46:53,918 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 19:46:53,919 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 19:47:36,132 [screen.py:show_popup_message()] - error: bed level exceeds configured limits (0.025mm)! Adjust screws and restart print.
2024-02-19 19:47:36,315 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:47:36,335 [bed_level.py:_get_screws()] - screws_tilt_adjust
2024-02-19 19:47:36,335 [bed_level.py:_get_screws()] - screw1: 61.8,86
2024-02-19 19:47:36,335 [bed_level.py:_get_screws()] - screw1_name: front left screw
2024-02-19 19:47:36,335 [bed_level.py:_get_screws()] - screw2: 230,86
2024-02-19 19:47:36,336 [bed_level.py:_get_screws()] - screw2_name: front right screw
2024-02-19 19:47:36,336 [bed_level.py:_get_screws()] - screw3: 230,230
2024-02-19 19:47:36,336 [bed_level.py:_get_screws()] - screw3_name: rear right screw
2024-02-19 19:47:36,336 [bed_level.py:_get_screws()] - screw4: 61.8,230
2024-02-19 19:47:36,336 [bed_level.py:_get_screws()] - screw4_name: rear left screw
2024-02-19 19:47:36,337 [bed_level.py:_get_screws()] - horizontal_move_z: 5.
2024-02-19 19:47:36,337 [bed_level.py:_get_screws()] - speed: 250.
2024-02-19 19:47:36,337 [bed_level.py:_get_screws()] - screw_thread: CW-M4
2024-02-19 19:47:36,337 [bed_level.py:__init__()] - screws_tilt_adjust: [[61.8, 86.0], [230.0, 86.0], [61.8, 230.0], [230.0, 230.0]]
2024-02-19 19:47:36,338 [printer.py:get_probe()] - Probe type: bltouch
2024-02-19 19:47:36,338 [bed_level.py:__init__()] - offset X: -31.8 Y: -41.0
2024-02-19 19:47:36,338 [bed_level.py:__init__()] - screws with offset: [[30.0, 45.0], [198.2, 45.0], [30.0, 189.0], [198.2, 189.0]]
2024-02-19 19:47:36,338 [bed_level.py:__init__()] - X: {30.0, 198.2}
Y: {45.0, 189.0}
2024-02-19 19:47:36,339 [bed_level.py:__init__()] - Using max_distance: 111 to fit: 4 screws.
2024-02-19 19:47:36,339 [bed_level.py:__init__()] - Using 4/4-screw locations
2024-02-19 19:47:36,410 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > bed_level
2024-02-19 19:47:36,412 [bed_level.py:process_update()] - Error reported by screws_tilt_adjust
2024-02-19 19:47:36,412 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 19:47:36,412 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 19:47:36,412 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 19:47:36,420 [bed_level.py:process_update()] - screw2 CCW 00:01
2024-02-19 19:47:36,420 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:01 Pos: fr
2024-02-19 19:47:36,427 [bed_level.py:process_update()] - screw3 CCW 00:02
2024-02-19 19:47:36,428 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:02 Pos: br
2024-02-19 19:47:36,435 [bed_level.py:process_update()] - screw4 CCW 00:01
2024-02-19 19:47:36,435 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:01 Pos: bl
2024-02-19 19:47:36,447 [bed_level.py:process_update()] - Error reported by screws_tilt_adjust
2024-02-19 19:47:36,447 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 19:47:36,448 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 19:47:36,448 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 19:47:36,456 [bed_level.py:process_update()] - screw2 CCW 00:01
2024-02-19 19:47:36,456 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:01 Pos: fr
2024-02-19 19:47:36,464 [bed_level.py:process_update()] - screw3 CCW 00:02
2024-02-19 19:47:36,464 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:02 Pos: br
2024-02-19 19:47:36,472 [bed_level.py:process_update()] - screw4 CCW 00:01
2024-02-19 19:47:36,472 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:01 Pos: bl
2024-02-19 19:48:31,724 [bed_level.py:process_update()] - Error reported by screws_tilt_adjust
2024-02-19 19:48:31,724 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 19:48:31,725 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 19:48:31,725 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 19:48:31,738 [bed_level.py:process_update()] - screw2 CW 00:00
2024-02-19 19:48:31,739 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:00 Pos: fr
2024-02-19 19:48:31,751 [bed_level.py:process_update()] - screw3 CCW 00:01
2024-02-19 19:48:31,751 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:01 Pos: br
2024-02-19 19:48:31,763 [bed_level.py:process_update()] - screw4 CW 00:00
2024-02-19 19:48:31,764 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:00 Pos: bl
2024-02-19 19:48:55,290 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:48:55,299 [printer.py:get_probe()] - Probe type: bltouch
2024-02-19 19:48:55,299 [zcalibrate.py:__init__()] - Z offset: 2.561
2024-02-19 19:48:55,364 [zcalibrate.py:__init__()] - Available functions for calibration: ['probe']
2024-02-19 19:48:55,392 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > bed_level > zcalibrate
2024-02-19 20:11:44,865 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-19 20:28:17,457 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 20:28:17,457 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:28:17,461 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:28:17,462 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:28:17,462 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-19 20:28:17,490 [screen.py:wake_screen()] - Screen wake up
2024-02-19 20:28:17,504 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:28:17,587 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:28:20,877 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:28:20,893 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:28:20,895 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 20:28:20,896 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:28:21,107 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:28:21,146 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:28:21,152 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.561'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro PREPARE_1': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation > 0.025 %}\nM117 Bed screws need ajusting\nPREPARE_1_2\n{% else %}\nG28\nPROBE_CALIBRATE\n{% endif %}\nM117 Please save & reboot'}, 'gcode_macro PREPARE_1_2': {'description': 'Etape 1.2 de la calibration avant impression', 'gcode': '\nG28\nSCREWS_TILT_CALCULATE\nPREPARE_1'}, 'gcode_macro PREPARE_2': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'respond': {'default_type': 'echo'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.561, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro prepare_1': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation > 0.025 %}\nM117 Bed screws need ajusting\nPREPARE_1_2\n{% else %}\nG28\nPROBE_CALIBRATE\n{% endif %}\nM117 Please save & reboot', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro prepare_1_2': {'gcode': '\nG28\nSCREWS_TILT_CALCULATE\nPREPARE_1', 'description': 'Etape 1.2 de la calibration avant impression'}, 'gcode_macro prepare_2': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:28:21,157 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:28:21,160 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 20:28:21,160 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:28:21,160 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 20:28:21,160 [printer.py:reinit()] - # Fans: 2
2024-02-19 20:28:21,160 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:28:21,160 [printer.py:reinit()] - # Leds: 0
2024-02-19 20:28:21,180 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:28:21,182 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:28:21,455 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 20:28:21,472 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:28:21,472 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:28:21,484 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:28:21,485 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:28:21,485 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 20:28:21,486 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 20:28:23,908 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 20:28:23,908 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:28:23,914 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:28:24,037 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:28:24,050 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:28:24,059 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:28:24,105 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:28:24,130 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:28:24,137 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 20:28:24,152 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:28:24,153 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:28:29,455 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PREPARE_1:gcode': TypeError: '>' not supported between instances of 'NoneType' and 'float'
2024-02-19 20:29:14,058 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-02-19 20:29:14,058 [printer.py:change_state()] - Adding callback for state: shutdown
2024-02-19 20:29:14,073 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:29:14,077 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:29:14,162 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:29:14,176 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-02-19 20:29:14,176 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:29:14,226 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:29:14,226 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:29:14,228 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:29:14,289 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:29:17,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:29:17,892 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:29:17,894 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 20:29:17,895 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:29:17,910 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:29:17,946 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:29:17,951 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.561'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro PREPARE_1': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nPREPARE_1_2\n{% else %}\nG28\nPROBE_CALIBRATE\n{% endif %}\nM117 Please save & reboot'}, 'gcode_macro PREPARE_1_2': {'description': 'Etape 1.2 de la calibration avant impression', 'gcode': '\nG28\nSCREWS_TILT_CALCULATE\nPREPARE_1'}, 'gcode_macro PREPARE_2': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'respond': {'default_type': 'echo'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.561, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro prepare_1': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nPREPARE_1_2\n{% else %}\nG28\nPROBE_CALIBRATE\n{% endif %}\nM117 Please save & reboot', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro prepare_1_2': {'gcode': '\nG28\nSCREWS_TILT_CALCULATE\nPREPARE_1', 'description': 'Etape 1.2 de la calibration avant impression'}, 'gcode_macro prepare_2': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:29:17,957 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:29:17,960 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 20:29:17,960 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:29:17,960 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 20:29:17,960 [printer.py:reinit()] - # Fans: 2
2024-02-19 20:29:17,961 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:29:17,961 [printer.py:reinit()] - # Leds: 0
2024-02-19 20:29:17,984 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:29:17,988 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:29:18,241 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 20:29:18,250 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:29:18,251 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:29:18,257 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:29:18,263 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:29:18,263 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 20:29:18,263 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 20:29:20,438 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 20:29:20,438 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:29:20,445 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:29:20,563 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:29:20,576 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:29:20,584 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:29:20,632 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:29:20,657 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:29:20,664 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 20:29:20,678 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:29:20,680 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:30:01,546 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:30:01,566 [bed_level.py:_get_screws()] - screws_tilt_adjust
2024-02-19 20:30:01,566 [bed_level.py:_get_screws()] - screw1: 61.8,86
2024-02-19 20:30:01,566 [bed_level.py:_get_screws()] - screw1_name: front left screw
2024-02-19 20:30:01,566 [bed_level.py:_get_screws()] - screw2: 230,86
2024-02-19 20:30:01,567 [bed_level.py:_get_screws()] - screw2_name: front right screw
2024-02-19 20:30:01,567 [bed_level.py:_get_screws()] - screw3: 230,230
2024-02-19 20:30:01,567 [bed_level.py:_get_screws()] - screw3_name: rear right screw
2024-02-19 20:30:01,567 [bed_level.py:_get_screws()] - screw4: 61.8,230
2024-02-19 20:30:01,567 [bed_level.py:_get_screws()] - screw4_name: rear left screw
2024-02-19 20:30:01,567 [bed_level.py:_get_screws()] - horizontal_move_z: 5.
2024-02-19 20:30:01,567 [bed_level.py:_get_screws()] - speed: 250.
2024-02-19 20:30:01,568 [bed_level.py:_get_screws()] - screw_thread: CW-M4
2024-02-19 20:30:01,568 [bed_level.py:__init__()] - screws_tilt_adjust: [[61.8, 86.0], [230.0, 86.0], [61.8, 230.0], [230.0, 230.0]]
2024-02-19 20:30:01,568 [printer.py:get_probe()] - Probe type: bltouch
2024-02-19 20:30:01,569 [bed_level.py:__init__()] - offset X: -31.8 Y: -41.0
2024-02-19 20:30:01,569 [bed_level.py:__init__()] - screws with offset: [[30.0, 45.0], [198.2, 45.0], [30.0, 189.0], [198.2, 189.0]]
2024-02-19 20:30:01,569 [bed_level.py:__init__()] - X: {30.0, 198.2}
Y: {45.0, 189.0}
2024-02-19 20:30:01,569 [bed_level.py:__init__()] - Using max_distance: 111 to fit: 4 screws.
2024-02-19 20:30:01,569 [bed_level.py:__init__()] - Using 4/4-screw locations
2024-02-19 20:30:01,638 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > bed_level
2024-02-19 20:30:01,639 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 20:30:01,640 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 20:30:01,640 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 20:30:01,647 [bed_level.py:process_update()] - screw2 CW 00:01
2024-02-19 20:30:01,648 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:01 Pos: fr
2024-02-19 20:30:01,654 [bed_level.py:process_update()] - screw3 CW 00:00
2024-02-19 20:30:01,655 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:00 Pos: br
2024-02-19 20:30:01,661 [bed_level.py:process_update()] - screw4 CW 00:01
2024-02-19 20:30:01,662 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:01 Pos: bl
2024-02-19 20:30:01,674 [bed_level.py:process_update()] - screw1 CW 00:00
2024-02-19 20:30:01,675 [bed_level.py:process_update()] - X: 30.0 Y: 45.0 Adjust: 00:00 Pos: fl
2024-02-19 20:30:01,675 [bed_level.py:process_update()] - screw1 is the Reference
2024-02-19 20:30:01,687 [bed_level.py:process_update()] - screw2 CW 00:01
2024-02-19 20:30:01,687 [bed_level.py:process_update()] - X: 198.2 Y: 45.0 Adjust: 00:01 Pos: fr
2024-02-19 20:30:01,699 [bed_level.py:process_update()] - screw3 CW 00:00
2024-02-19 20:30:01,700 [bed_level.py:process_update()] - X: 198.2 Y: 189.0 Adjust: 00:00 Pos: br
2024-02-19 20:30:01,712 [bed_level.py:process_update()] - screw4 CW 00:01
2024-02-19 20:30:01,712 [bed_level.py:process_update()] - X: 30.0 Y: 189.0 Adjust: 00:01 Pos: bl
2024-02-19 20:30:25,122 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:30:25,132 [printer.py:get_probe()] - Probe type: bltouch
2024-02-19 20:30:25,133 [zcalibrate.py:__init__()] - Z offset: 2.561
2024-02-19 20:30:25,196 [zcalibrate.py:__init__()] - Available functions for calibration: ['probe']
2024-02-19 20:30:25,236 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > bed_level > zcalibrate
2024-02-19 20:36:40,865 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0x627721e8 (GtkDialog at 0x26621a8)>
2024-02-19 20:36:40,907 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=720, height=480)
2024-02-19 20:36:47,354 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 20:36:47,355 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:36:47,357 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:36:47,357 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:36:47,368 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-19 20:36:47,368 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:36:47,454 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:36:50,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:36:50,890 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:36:50,892 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 20:36:50,893 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:36:51,013 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:36:51,051 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:36:51,055 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '190, 190', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro PREPARE_1': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nPREPARE_1_2\n{% else %}\nG28\nPROBE_CALIBRATE\n{% endif %}\nM117 Please save & reboot'}, 'gcode_macro PREPARE_1_2': {'description': 'Etape 1.2 de la calibration avant impression', 'gcode': '\nG28\nSCREWS_TILT_CALCULATE\nPREPARE_1'}, 'gcode_macro PREPARE_2': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'respond': {'default_type': 'echo'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [190.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro prepare_1': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nPREPARE_1_2\n{% else %}\nG28\nPROBE_CALIBRATE\n{% endif %}\nM117 Please save & reboot', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro prepare_1_2': {'gcode': '\nG28\nSCREWS_TILT_CALCULATE\nPREPARE_1', 'description': 'Etape 1.2 de la calibration avant impression'}, 'gcode_macro prepare_2': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:36:51,061 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:36:51,064 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 20:36:51,064 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:36:51,064 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 20:36:51,064 [printer.py:reinit()] - # Fans: 2
2024-02-19 20:36:51,064 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:36:51,064 [printer.py:reinit()] - # Leds: 0
2024-02-19 20:36:51,083 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:36:51,086 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:36:51,315 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 20:36:51,331 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:36:51,331 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:36:51,332 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:36:51,333 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:36:51,334 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 20:36:51,334 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 20:36:53,889 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 20:36:53,889 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:36:53,900 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:36:54,040 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:36:54,053 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:36:54,062 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:36:54,110 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:36:54,139 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:36:54,147 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 20:36:54,162 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:36:54,164 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:40:32,993 [screen.py:show_popup_message()] - error: Move out of range: 71.800 231.000 5.000 [0.000]
2024-02-19 20:41:56,390 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 20:41:56,391 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:41:56,392 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:41:56,393 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:41:56,398 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:41:56,480 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:41:59,877 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:41:59,892 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:41:59,894 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 20:41:59,894 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:42:00,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:42:00,065 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:42:00,070 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro PREPARE_1': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\n{% else %}\nG28\nPROBE_CALIBRATE\n{% endif %}\nM117 Please save & reboot'}, 'gcode_macro PREPARE_2': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'respond': {'default_type': 'echo'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro prepare_1': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\n{% else %}\nG28\nPROBE_CALIBRATE\n{% endif %}\nM117 Please save & reboot', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro prepare_2': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:42:00,076 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:42:00,078 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 20:42:00,078 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:42:00,079 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 20:42:00,079 [printer.py:reinit()] - # Fans: 2
2024-02-19 20:42:00,079 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:42:00,079 [printer.py:reinit()] - # Leds: 0
2024-02-19 20:42:00,097 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:42:00,100 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:42:00,336 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 20:42:00,346 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:42:00,346 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:42:00,352 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:42:00,364 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:42:00,364 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 20:42:00,364 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 20:42:02,906 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 20:42:02,907 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:42:02,916 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:42:03,043 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:42:03,055 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:42:03,064 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:42:03,110 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:42:03,137 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:42:03,145 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 20:42:03,167 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:42:03,170 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:44:12,955 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 20:44:12,955 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:44:12,957 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:44:12,957 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:44:12,962 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:44:13,051 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:44:15,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:44:15,892 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:44:15,893 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 20:44:15,894 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:44:16,587 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:44:16,627 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:44:16,632 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'respond': {'default_type': 'echo'}, 'bed_mesh default': {'version': '1', 'points': '\n0.188125, 0.130625, 0.169375\n0.033125, -0.026250, 0.028125\n0.046875, -0.003125, 0.028750', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '190.0', 'min_y': '40.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.188125, 0.130625, 0.169375], [0.033125, -0.02625, 0.028125], [0.046875, -0.003125, 0.02875]], 'min_x': 40.0, 'max_x': 190.0, 'min_y': 40.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:44:16,637 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:44:16,640 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 20:44:16,640 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:44:16,640 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 20:44:16,640 [printer.py:reinit()] - # Fans: 2
2024-02-19 20:44:16,641 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:44:16,641 [printer.py:reinit()] - # Leds: 0
2024-02-19 20:44:16,658 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:44:16,661 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:44:16,889 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 20:44:16,902 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:44:16,903 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:44:16,912 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:44:16,913 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:44:16,914 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 20:44:16,914 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 20:44:19,389 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 20:44:19,390 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:44:19,396 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:44:19,531 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:44:19,543 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:44:19,551 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:44:19,597 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:44:19,624 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:44:19,631 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 20:44:19,651 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:44:19,654 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:46:07,649 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0x631037c8 (GtkDialog at 0x2662368)>
2024-02-19 20:46:07,680 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=720, height=480)
2024-02-19 20:46:18,378 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 20:46:18,379 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:46:18,379 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:46:18,380 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:46:18,390 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-19 20:46:18,392 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:46:18,470 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:46:21,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:46:21,892 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:46:21,893 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 20:46:21,893 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:46:22,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:46:22,072 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:46:22,076 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes'}, 'display_status': {}, 'pause_resume': {}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_extrude': '1.0', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE'}, 'respond': {'default_type': 'echo'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': ''}, 'pause_resume': {'recover_velocity': 50.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro pause': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - 2.0) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nPAUSE_BASE\nG91\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG1 E-{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_extrude': '1.0'}, 'gcode_macro resume': {'gcode': '\n\n{% set E = printer["gcode_macro PAUSE"].extrude|float %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nG91\nG1 E{E} F2100\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:46:22,082 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:46:22,084 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 20:46:22,085 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:46:22,085 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 20:46:22,085 [printer.py:reinit()] - # Fans: 2
2024-02-19 20:46:22,085 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:46:22,085 [printer.py:reinit()] - # Leds: 0
2024-02-19 20:46:22,102 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:46:22,105 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:46:22,371 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 20:46:22,381 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:46:22,381 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:46:22,387 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:46:22,397 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:46:22,398 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 20:46:22,398 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 20:46:24,822 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 20:46:24,822 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:46:24,826 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:46:24,928 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:46:24,940 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:46:24,949 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:46:24,995 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:46:25,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:46:25,026 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 20:46:25,041 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:46:25,043 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:51:30,310 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 20:51:30,311 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:51:30,312 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:51:30,312 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:51:30,316 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:51:30,393 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:51:33,877 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:51:33,893 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:51:33,894 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 20:51:33,894 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:51:34,273 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:51:34,311 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:51:34,316 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:51:34,322 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:51:34,325 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 20:51:34,325 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:51:34,325 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 20:51:34,325 [printer.py:reinit()] - # Fans: 2
2024-02-19 20:51:34,325 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:51:34,325 [printer.py:reinit()] - # Leds: 0
2024-02-19 20:51:34,346 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:51:34,349 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:51:34,621 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 20:51:34,631 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:51:34,631 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:51:34,637 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:51:34,643 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:51:34,643 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 20:51:34,644 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 20:51:37,051 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 20:51:37,051 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:51:37,055 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:51:37,158 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:51:37,172 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:51:37,192 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:51:37,248 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:51:37,273 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:51:37,280 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 20:51:37,294 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:51:37,296 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 21:02:30,937 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 21:02:30,937 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 21:02:30,938 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 21:02:30,938 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 21:02:30,944 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:02:31,042 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 21:02:33,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 21:02:33,892 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 21:02:33,894 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 21:02:33,894 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 21:02:35,301 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 21:02:35,326 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 21:02:35,327 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 21:02:35,328 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 21:02:35,329 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 21:02:35,329 [printer.py:reinit()] - # Extruders: 0
2024-02-19 21:02:35,329 [printer.py:reinit()] - # Temperature devices: 0
2024-02-19 21:02:35,329 [printer.py:reinit()] - # Fans: 0
2024-02-19 21:02:35,329 [printer.py:reinit()] - # Output pins: 0
2024-02-19 21:02:35,329 [printer.py:reinit()] - # Leds: 0
2024-02-19 21:02:35,346 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 21:02:35,347 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 21:02:35,584 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-02-19 21:02:35,586 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 21:02:35,586 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 21:02:35,588 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 21:02:35,589 [screen.py:init_klipper()] - Printer initialized
2024-02-19 21:02:35,590 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-02-19 21:02:35,590 [printer.py:change_state()] - Adding callback for state: error
2024-02-19 21:02:35,602 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:02:35,693 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 21:02:49,602 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-02-19 21:02:49,603 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 21:02:49,604 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 21:02:49,605 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 21:02:49,609 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:02:49,699 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 21:02:52,874 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 21:02:52,889 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 21:02:52,891 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 21:02:52,891 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 21:02:53,674 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 21:02:53,714 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 21:02:53,719 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu host': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu host': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 21:02:53,725 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 21:02:53,727 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 21:02:53,727 [printer.py:reinit()] - # Extruders: 1
2024-02-19 21:02:53,727 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 21:02:53,728 [printer.py:reinit()] - # Fans: 2
2024-02-19 21:02:53,728 [printer.py:reinit()] - # Output pins: 1
2024-02-19 21:02:53,728 [printer.py:reinit()] - # Leds: 0
2024-02-19 21:02:53,747 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 21:02:53,751 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 21:02:54,025 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 21:02:54,035 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 21:02:54,035 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 21:02:54,042 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 21:02:54,043 [screen.py:init_klipper()] - Printer initialized
2024-02-19 21:02:54,044 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 21:02:54,044 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 21:02:56,454 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 21:02:56,454 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 21:02:56,458 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:02:56,564 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 21:02:56,580 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 21:02:56,588 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 21:02:56,637 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 21:02:56,662 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 21:02:56,669 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 21:02:56,683 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 21:02:56,686 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 21:04:37,620 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 21:04:37,621 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 21:04:37,621 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 21:04:37,621 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 21:04:37,625 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:04:37,703 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 21:04:40,879 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 21:04:40,894 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 21:04:40,895 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 21:04:40,896 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 21:04:41,613 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 21:04:41,640 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 21:04:41,641 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 21:04:41,643 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 21:04:41,643 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 21:04:41,643 [printer.py:reinit()] - # Extruders: 0
2024-02-19 21:04:41,643 [printer.py:reinit()] - # Temperature devices: 0
2024-02-19 21:04:41,643 [printer.py:reinit()] - # Fans: 0
2024-02-19 21:04:41,643 [printer.py:reinit()] - # Output pins: 0
2024-02-19 21:04:41,644 [printer.py:reinit()] - # Leds: 0
2024-02-19 21:04:41,658 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 21:04:41,660 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 21:04:41,894 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-02-19 21:04:41,895 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 21:04:41,895 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 21:04:41,896 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 21:04:41,897 [screen.py:init_klipper()] - Printer initialized
2024-02-19 21:04:41,898 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-02-19 21:04:41,898 [printer.py:change_state()] - Adding callback for state: error
2024-02-19 21:04:41,913 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:04:41,974 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 21:05:15,724 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-02-19 21:05:15,725 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 21:05:15,727 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 21:05:15,728 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 21:05:15,731 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:05:15,831 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 21:05:18,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 21:05:18,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 21:05:18,893 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 21:05:18,893 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 21:05:19,764 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 21:05:19,809 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 21:05:19,815 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 21:05:19,820 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 21:05:19,822 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 21:05:19,822 [printer.py:reinit()] - # Extruders: 1
2024-02-19 21:05:19,823 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 21:05:19,823 [printer.py:reinit()] - # Fans: 2
2024-02-19 21:05:19,823 [printer.py:reinit()] - # Output pins: 1
2024-02-19 21:05:19,823 [printer.py:reinit()] - # Leds: 0
2024-02-19 21:05:19,842 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 21:05:19,846 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 21:05:20,125 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 21:05:20,135 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 21:05:20,135 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 21:05:20,143 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 21:05:20,155 [screen.py:init_klipper()] - Printer initialized
2024-02-19 21:05:20,156 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 21:05:20,156 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 21:05:22,548 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 21:05:22,549 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 21:05:22,553 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:05:22,660 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 21:05:22,676 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 21:05:22,684 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 21:05:22,733 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 21:05:22,760 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 21:05:22,767 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 21:05:22,781 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 21:05:22,783 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 21:27:08,993 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-19 21:27:08,993 [printer.py:change_state()] - Adding callback for state: printing
2024-02-19 21:27:09,007 [screen.py:_load_panel()] - Loading panel: job_status
2024-02-19 21:27:09,271 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-19 21:27:09,279 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-19 21:27:09,298 [job_status.py:update_file_metadata()] - Update Metadata. File: 4040-ender-3-extrusion-cover_39m_0,16mm_205C_PLA_ENDER3S1PRO.gcode Size: 917806
2024-02-19 21:27:09,315 [job_status.py:show_file_thumbnail()] - 4040-ender-3-extrusion-cover_39m_0,16mm_205C_PLA_ENDER3S1PRO.gcode
2024-02-19 21:27:09,321 [KlippyWebsocket.py:get_file_dir()] - Sending server.files.directory gcodes/.thumbs
2024-02-19 21:28:17,864 [screen.py:show_screensaver()] - Showing Screensaver
2024-02-19 21:29:42,352 [screen.py:close_screensaver()] - Closing Screensaver
2024-02-19 21:29:42,392 [screen.py:wake_screen()] - Screen wake up
2024-02-19 21:29:42,407 [screen.py:show_popup_message()] - echo: "extruder" not hot enough
2024-02-19 21:29:42,455 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-02-19 21:29:42,455 [printer.py:change_state()] - Adding callback for state: paused
2024-02-19 21:29:42,461 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-02-19 21:29:42,500 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x63140598>>
2024-02-19 21:29:42,501 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:29:42,676 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-19 21:29:42,683 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-02-19 21:29:42,696 [job_status.py:update_file_metadata()] - Update Metadata. File: 4040-ender-3-extrusion-cover_39m_0,16mm_205C_PLA_ENDER3S1PRO.gcode Size: 917806
2024-02-19 21:29:42,709 [job_status.py:show_file_thumbnail()] - 4040-ender-3-extrusion-cover_39m_0,16mm_205C_PLA_ENDER3S1PRO.gcode
2024-02-19 21:29:42,716 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x63140598>>
2024-02-19 21:29:42,717 [screen.py:_load_panel()] - Loading panel: extrude
2024-02-19 21:29:42,829 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-02-19 21:36:48,969 [screen.py:show_popup_message()] - echo: "extruder" not hot enough
2024-02-19 21:36:49,059 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2024-02-19 21:36:49,059 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 21:36:58,554 [files.py:_callback()] - Error in getting metadata for .thumbs/4040-ender-3-extrusion-cover_39m_0,16mm_205C_PLA_ENDER3S1PRO-32x32.png. Retrying in 6 seconds
2024-02-19 21:36:58,559 [files.py:_callback()] - Error in getting metadata for .thumbs/4040-ender-3-extrusion-cover_39m_0,16mm_205C_PLA_ENDER3S1PRO-400x300.png. Retrying in 6 seconds
2024-02-19 21:36:58,560 [files.py:add_file()] - File already exists: 4040-ender-3-extrusion-cover_39m_0,16mm_205C_PLA_ENDER3S1PRO.gcode
2024-02-19 21:36:58,581 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-19 21:36:58,581 [printer.py:change_state()] - Adding callback for state: printing
2024-02-19 21:36:58,596 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x63140598>>
2024-02-19 21:36:58,596 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:36:58,788 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-19 21:36:58,796 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-19 21:36:58,810 [job_status.py:update_file_metadata()] - Update Metadata. File: 4040-ender-3-extrusion-cover_39m_0,16mm_205C_PLA_ENDER3S1PRO.gcode Size: 917984
2024-02-19 21:36:58,823 [job_status.py:show_file_thumbnail()] - 4040-ender-3-extrusion-cover_39m_0,16mm_205C_PLA_ENDER3S1PRO.gcode
2024-02-19 22:17:54,436 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-19 22:17:54,436 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 22:17:54,457 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-02-19 22:24:50,536 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 22:24:50,537 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 22:24:50,538 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 22:24:50,539 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 22:24:50,543 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x63140598>>
2024-02-19 22:24:50,544 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 22:24:50,641 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 22:24:53,881 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:24:53,896 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 22:24:53,898 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 22:24:53,898 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:24:54,813 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 22:24:54,856 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 22:24:54,862 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 22:24:54,868 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 22:24:54,871 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 22:24:54,871 [printer.py:reinit()] - # Extruders: 1
2024-02-19 22:24:54,872 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 22:24:54,872 [printer.py:reinit()] - # Fans: 2
2024-02-19 22:24:54,872 [printer.py:reinit()] - # Output pins: 1
2024-02-19 22:24:54,872 [printer.py:reinit()] - # Leds: 0
2024-02-19 22:24:54,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 22:24:54,895 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 22:24:55,169 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 22:24:55,180 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 22:24:55,180 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 22:24:55,186 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 22:24:55,192 [screen.py:init_klipper()] - Printer initialized
2024-02-19 22:24:55,193 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 22:24:55,193 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 22:24:57,658 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 22:24:57,658 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 22:24:57,667 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x63140598>>
2024-02-19 22:24:57,668 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 22:24:57,825 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 22:24:57,842 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 22:24:57,850 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 22:24:57,900 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 22:24:57,933 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 22:24:57,940 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 22:24:57,955 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 22:24:57,958 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 22:25:09,534 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 22:25:09,535 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 22:25:09,537 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 22:25:09,538 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 22:25:09,543 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x63140598>>
2024-02-19 22:25:09,544 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 22:25:09,623 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 22:25:12,877 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:25:12,895 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 22:25:12,897 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 22:25:12,897 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:25:13,780 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 22:25:13,822 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 22:25:13,827 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 22:25:13,833 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 22:25:13,836 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 22:25:13,836 [printer.py:reinit()] - # Extruders: 1
2024-02-19 22:25:13,836 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 22:25:13,836 [printer.py:reinit()] - # Fans: 2
2024-02-19 22:25:13,837 [printer.py:reinit()] - # Output pins: 1
2024-02-19 22:25:13,837 [printer.py:reinit()] - # Leds: 0
2024-02-19 22:25:13,856 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 22:25:13,860 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 22:25:14,144 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 22:25:14,160 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 22:25:14,160 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 22:25:14,174 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 22:25:14,180 [screen.py:init_klipper()] - Printer initialized
2024-02-19 22:25:14,180 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-19 22:25:14,180 [printer.py:change_state()] - Adding callback for state: startup
2024-02-19 22:25:16,572 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-19 22:25:16,572 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 22:25:16,576 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x63140598>>
2024-02-19 22:25:16,576 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 22:25:16,685 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 22:25:16,702 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 22:25:16,710 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 22:25:16,761 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 22:25:16,790 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 22:25:16,797 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 22:25:16,812 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 22:25:16,813 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 22:26:17,174 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 22:26:17,183 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-100-gf0abcfb
2024-02-19 22:26:17,183 [functions.py:log_start()] - Python version: 3.9
2024-02-19 22:26:17,525 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 22:26:17,526 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-02-19 22:26:17,549 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 22:26:17,795 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 22:26:17,796 [config.py:install_language()] - Using lang en
2024-02-19 22:26:17,827 [screen.py:__init__()] - Screen resolution: 720x480
2024-02-19 22:26:17,830 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-19 22:26:19,060 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 22:26:19,072 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-19 22:26:19,088 [screen.py:initial_connection()] - Default printer: None
2024-02-19 22:26:19,148 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 22:26:19,150 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 22:26:19,256 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 22:26:19,269 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 22:26:19,288 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-02-19 22:26:41,917 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 22:26:41,932 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:26:41,946 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 22:26:41,948 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 22:26:41,958 [_logging.py:info()] - Websocket connected
2024-02-19 22:26:41,959 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 22:26:41,972 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:26:41,986 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 22:26:41,988 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 22:26:41,988 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:26:42,003 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 22:26:42,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 22:26:42,197 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 22:26:42,205 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 22:26:42,209 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 22:26:42,209 [printer.py:reinit()] - # Extruders: 1
2024-02-19 22:26:42,210 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 22:26:42,210 [printer.py:reinit()] - # Fans: 2
2024-02-19 22:26:42,214 [printer.py:reinit()] - # Output pins: 1
2024-02-19 22:26:42,214 [printer.py:reinit()] - # Leds: 0
2024-02-19 22:26:42,237 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 22:26:42,242 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 22:26:42,444 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 22:26:42,465 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 22:26:42,466 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 22:26:42,467 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 22:26:42,468 [screen.py:init_klipper()] - Printer initialized
2024-02-19 22:26:42,469 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 22:26:42,469 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 22:26:42,476 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 22:26:42,674 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 22:26:42,690 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 22:26:42,699 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 22:26:42,751 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 22:26:42,764 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 22:26:42,787 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 22:26:42,802 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 22:26:42,803 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 22:27:05,922 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 22:27:05,930 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-100-gf0abcfb
2024-02-19 22:27:05,930 [functions.py:log_start()] - Python version: 3.9
2024-02-19 22:27:06,104 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 22:27:06,105 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-02-19 22:27:06,120 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 22:27:06,241 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 22:27:06,241 [config.py:install_language()] - Using lang en
2024-02-19 22:27:06,260 [screen.py:__init__()] - Screen resolution: 720x480
2024-02-19 22:27:06,262 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-19 22:27:06,732 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 22:27:06,742 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-19 22:27:06,751 [screen.py:initial_connection()] - Default printer: None
2024-02-19 22:27:06,794 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 22:27:06,795 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 22:27:06,856 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 22:27:06,868 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 22:27:06,887 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:27:06,900 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 22:27:06,902 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 22:27:06,912 [_logging.py:info()] - Websocket connected
2024-02-19 22:27:06,913 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 22:27:06,960 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:27:06,973 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 22:27:06,975 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 22:27:06,975 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:27:06,990 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 22:27:07,201 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 22:27:07,206 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 22:27:07,213 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 22:27:07,216 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 22:27:07,216 [printer.py:reinit()] - # Extruders: 1
2024-02-19 22:27:07,216 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 22:27:07,216 [printer.py:reinit()] - # Fans: 2
2024-02-19 22:27:07,216 [printer.py:reinit()] - # Output pins: 1
2024-02-19 22:27:07,218 [printer.py:reinit()] - # Leds: 0
2024-02-19 22:27:07,235 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 22:27:07,238 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 22:27:07,471 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 22:27:07,476 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 22:27:07,477 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 22:27:07,483 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 22:27:07,490 [screen.py:init_klipper()] - Printer initialized
2024-02-19 22:27:07,490 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 22:27:07,491 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 22:27:07,514 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 22:27:07,771 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 22:27:07,788 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 22:27:07,796 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 22:27:07,847 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 22:27:07,860 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 22:27:07,882 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 22:27:07,897 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 22:27:07,899 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 22:34:50,336 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-02-19 22:34:50,336 [printer.py:change_state()] - Adding callback for state: shutdown
2024-02-19 22:34:50,342 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 22:34:50,344 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 22:34:50,407 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 22:34:51,282 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-02-19 22:34:51,282 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 22:34:51,283 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 22:34:51,283 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 22:34:51,284 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 22:34:51,354 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 22:34:54,931 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:34:54,946 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 22:34:54,948 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 22:34:54,949 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:34:54,949 [screen.py:init_klipper()] - Klipper not connected
2024-02-19 22:34:57,936 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:34:57,938 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:34:57,939 [screen.py:init_klipper()] - Klipper not connected
2024-02-19 22:35:00,930 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:35:00,932 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:35:00,932 [screen.py:init_klipper()] - Klipper not connected
2024-02-19 22:35:03,937 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:35:03,940 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:35:03,940 [screen.py:init_klipper()] - Klipper not connected
2024-02-19 22:35:06,934 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:35:06,936 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:35:06,936 [screen.py:init_klipper()] - Klipper not connected
2024-02-19 22:35:09,917 [screen.py:init_klipper()] - Stopping Retries
2024-02-19 22:35:27,939 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:35:27,942 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:35:27,968 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 22:35:28,108 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 22:35:28,118 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 22:35:28,126 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 22:35:28,130 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 22:35:28,132 [printer.py:reinit()] - # Extruders: 1
2024-02-19 22:35:28,132 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 22:35:28,132 [printer.py:reinit()] - # Fans: 2
2024-02-19 22:35:28,132 [printer.py:reinit()] - # Output pins: 1
2024-02-19 22:35:28,133 [printer.py:reinit()] - # Leds: 0
2024-02-19 22:35:28,160 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 22:35:28,165 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 22:35:28,429 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 22:35:28,439 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 22:35:28,440 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 22:35:28,446 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 22:35:28,452 [screen.py:init_klipper()] - Printer initialized
2024-02-19 22:35:28,452 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 22:35:28,453 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 22:35:28,488 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 22:35:28,613 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 22:35:28,629 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 22:35:28,637 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 22:35:28,687 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 22:35:28,705 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 22:35:28,724 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 22:35:28,738 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 22:35:28,740 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 22:40:46,686 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 22:40:46,692 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-100-gf0abcfb
2024-02-19 22:40:46,692 [functions.py:log_start()] - Python version: 3.9
2024-02-19 22:40:46,873 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 22:40:46,874 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-02-19 22:40:46,888 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 22:40:47,006 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 22:40:47,006 [config.py:install_language()] - Using lang en
2024-02-19 22:40:47,025 [screen.py:__init__()] - Screen resolution: 2560x1440
2024-02-19 22:40:47,026 [KlippyGtk.py:__init__()] - Font size: 49.7 (medium)
2024-02-19 22:40:47,641 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 22:40:47,650 [screen.py:set_screenblanking_timeout()] - DPMS State FAIL
2024-02-19 22:40:47,652 [config.py:save_user_config_options()] - Creating a new config file in /home/pi/printer_data/config/KlipperScreen.conf
2024-02-19 22:40:47,654 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-02-19 22:40:47,664 [screen.py:initial_connection()] - Default printer: None
2024-02-19 22:40:47,710 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 22:40:47,711 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 22:40:47,797 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 22:40:47,808 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 22:40:47,827 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:40:47,842 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 22:40:47,844 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 22:40:47,854 [_logging.py:info()] - Websocket connected
2024-02-19 22:40:47,855 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 22:40:47,901 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:40:47,915 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 22:40:47,916 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 22:40:47,916 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:40:47,933 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 22:40:48,115 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 22:40:48,123 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 22:40:48,131 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 22:40:48,135 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 22:40:48,135 [printer.py:reinit()] - # Extruders: 1
2024-02-19 22:40:48,136 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 22:40:48,137 [printer.py:reinit()] - # Fans: 2
2024-02-19 22:40:48,137 [printer.py:reinit()] - # Output pins: 1
2024-02-19 22:40:48,137 [printer.py:reinit()] - # Leds: 0
2024-02-19 22:40:48,161 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 22:40:48,167 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 22:40:48,459 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 22:40:48,482 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 22:40:48,482 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 22:40:48,484 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 22:40:48,485 [screen.py:init_klipper()] - Printer initialized
2024-02-19 22:40:48,486 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 22:40:48,486 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 22:40:48,667 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 22:40:48,780 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 22:40:48,796 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 22:40:48,805 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 22:40:48,858 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 22:40:48,880 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 22:40:48,894 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 22:40:48,909 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 22:40:48,912 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 22:41:20,847 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 22:41:20,854 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-100-gf0abcfb
2024-02-19 22:41:20,854 [functions.py:log_start()] - Python version: 3.9
2024-02-19 22:41:21,026 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 22:41:21,027 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-19 22:41:21,043 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-19 22:41:21,046 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

=======================
2024-02-19 22:41:21,047 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 22:41:21,165 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 22:41:21,166 [config.py:install_language()] - Using lang en
2024-02-19 22:41:21,185 [screen.py:__init__()] - Screen resolution: 2560x1440
2024-02-19 22:41:21,186 [KlippyGtk.py:__init__()] - Font size: 49.7 (medium)
2024-02-19 22:41:21,891 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 22:41:21,891 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-02-19 22:41:21,900 [screen.py:initial_connection()] - Default printer: None
2024-02-19 22:41:21,945 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 22:41:21,946 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 22:41:22,031 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 22:41:22,042 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 22:41:22,060 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:41:22,074 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 22:41:22,077 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 22:41:22,086 [_logging.py:info()] - Websocket connected
2024-02-19 22:41:22,088 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 22:41:22,103 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 22:41:22,116 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 22:41:22,118 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 22:41:22,119 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 22:41:22,133 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 22:41:22,200 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 22:41:22,206 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '77.8', 'shaper_type_x': '3hump_ei', 'shaper_freq_y': '33.6', 'shaper_type_y': 'mzv'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 77.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 33.6}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 22:41:22,212 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 22:41:22,214 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 22:41:22,214 [printer.py:reinit()] - # Extruders: 1
2024-02-19 22:41:22,215 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 22:41:22,215 [printer.py:reinit()] - # Fans: 2
2024-02-19 22:41:22,215 [printer.py:reinit()] - # Output pins: 1
2024-02-19 22:41:22,215 [printer.py:reinit()] - # Leds: 0
2024-02-19 22:41:22,234 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 22:41:22,238 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 22:41:22,528 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 22:41:22,543 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 22:41:22,544 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 22:41:22,545 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 22:41:22,546 [screen.py:init_klipper()] - Printer initialized
2024-02-19 22:41:22,546 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 22:41:22,547 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 22:41:22,663 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 22:41:22,778 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 22:41:22,794 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 22:41:22,803 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 22:41:22,854 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 22:41:22,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 22:41:22,889 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 22:41:22,904 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 22:41:22,905 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 23:13:02,847 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 23:13:02,853 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-100-gf0abcfb
2024-02-19 23:13:02,854 [functions.py:log_start()] - Python version: 3.9
2024-02-19 23:13:03,112 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 23:13:03,113 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-19 23:13:03,131 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-19 23:13:03,134 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

=======================
2024-02-19 23:13:03,135 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 23:13:03,301 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 23:13:03,301 [config.py:install_language()] - Using lang en
2024-02-19 23:13:03,323 [screen.py:__init__()] - Screen resolution: 2560x1800
2024-02-19 23:13:03,325 [KlippyGtk.py:__init__()] - Font size: 59.5 (medium)
2024-02-19 23:13:04,576 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 23:13:04,576 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-02-19 23:13:04,585 [screen.py:initial_connection()] - Default printer: None
2024-02-19 23:13:04,630 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 23:13:04,630 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 23:13:04,729 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 23:13:04,741 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 23:13:04,768 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 23:13:04,788 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 23:13:04,790 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 23:13:04,805 [_logging.py:info()] - Websocket connected
2024-02-19 23:13:04,806 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 23:13:04,950 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 23:13:04,973 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 23:13:04,975 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 23:13:04,976 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 23:13:05,002 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 23:13:05,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 23:13:05,236 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 23:13:05,246 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 23:13:05,254 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 23:13:05,255 [printer.py:reinit()] - # Extruders: 1
2024-02-19 23:13:05,255 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 23:13:05,256 [printer.py:reinit()] - # Fans: 2
2024-02-19 23:13:05,256 [printer.py:reinit()] - # Output pins: 1
2024-02-19 23:13:05,256 [printer.py:reinit()] - # Leds: 0
2024-02-19 23:13:05,281 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 23:13:05,286 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 23:13:05,549 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 23:13:05,573 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 23:13:05,573 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 23:13:05,574 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 23:13:05,575 [screen.py:init_klipper()] - Printer initialized
2024-02-19 23:13:05,576 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 23:13:05,576 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 23:13:05,747 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 23:13:05,877 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 23:13:05,893 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 23:13:05,907 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 23:13:05,963 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 23:13:05,979 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 23:13:06,000 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 23:13:06,015 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 23:13:06,017 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 23:13:17,648 [heatergraph.py:event_cb()] - Graph area: 1106.0 780.0
2024-02-19 23:13:18,795 [heatergraph.py:event_cb()] - Graph area: 1055.0 763.0
2024-02-19 23:13:48,259 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 23:13:48,266 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-100-gf0abcfb
2024-02-19 23:13:48,266 [functions.py:log_start()] - Python version: 3.9
2024-02-19 23:13:48,442 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 23:13:48,443 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-19 23:13:48,460 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-19 23:13:48,464 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

=======================
2024-02-19 23:13:48,465 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 23:13:48,586 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 23:13:48,587 [config.py:install_language()] - Using lang en
2024-02-19 23:13:48,607 [screen.py:__init__()] - Screen resolution: 2560x1800
2024-02-19 23:13:48,608 [KlippyGtk.py:__init__()] - Font size: 59.5 (medium)
2024-02-19 23:13:49,417 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 23:13:49,418 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-02-19 23:13:49,426 [screen.py:initial_connection()] - Default printer: None
2024-02-19 23:13:49,472 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 23:13:49,472 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 23:13:49,562 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 23:13:49,574 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 23:13:49,592 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 23:13:49,606 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 23:13:49,608 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 23:13:49,617 [_logging.py:info()] - Websocket connected
2024-02-19 23:13:49,618 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 23:13:49,853 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 23:13:49,866 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 23:13:49,868 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 23:13:49,869 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 23:13:49,884 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 23:13:50,085 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 23:13:50,093 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 23:13:50,101 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 23:13:50,105 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 23:13:50,105 [printer.py:reinit()] - # Extruders: 1
2024-02-19 23:13:50,105 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 23:13:50,106 [printer.py:reinit()] - # Fans: 2
2024-02-19 23:13:50,107 [printer.py:reinit()] - # Output pins: 1
2024-02-19 23:13:50,108 [printer.py:reinit()] - # Leds: 0
2024-02-19 23:13:50,132 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 23:13:50,137 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 23:13:50,406 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 23:13:50,422 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 23:13:50,422 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 23:13:50,434 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 23:13:50,435 [screen.py:init_klipper()] - Printer initialized
2024-02-19 23:13:50,435 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 23:13:50,435 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 23:13:50,578 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 23:13:50,694 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 23:13:50,710 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 23:13:50,719 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 23:13:50,771 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 23:13:50,787 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 23:13:50,808 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 23:13:50,824 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 23:13:50,826 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 23:14:08,779 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-19 23:14:08,779 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-19 23:14:08,793 [screen.py:_load_panel()] - Loading panel: menu
2024-02-19 23:14:09,234 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 23:14:09,260 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 23:14:09,270 [menu.py:arrangeMenuItems()] - X > more led
2024-02-19 23:14:09,286 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 23:14:09,300 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 23:14:09,313 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 23:14:11,111 [screen.py:_load_panel()] - Loading panel: system
2024-02-19 23:14:11,177 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/machine/system_info
2024-02-19 23:14:11,244 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-02-19 23:14:11,266 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': None, 'github_requests_remaining': None, 'github_limit_reset_time': None, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-313', 'remote_version': 'v0.8.0-313', 'rollback_version': 'v0.8.0-311', 'current_hash': 'e87ab4a8955ca434b7f7c09d3eba443200cb523d', 'remote_hash': 'e87ab4a8955ca434b7f7c09d3eba443200cb523d', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-313-ge87ab4a8', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-113', 'remote_version': 'v0.12.0-113', 'rollback_version': 'v0.12.0-111', 'current_hash': '28f06a104bc0cfe3a7d36db343ade5a805b3e132', 'remote_hash': '28f06a104bc0cfe3a7d36db343ade5a805b3e132', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-113-g28f06a10', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.2.1-0', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.10.0', 'remote_version': 'v2.10.0', 'rollback_version': 'v2.10.0', 'last_error': '', 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.3.8-100', 'remote_version': 'v0.3.8-100', 'rollback_version': 'v0.3.8-100', 'current_hash': 'f0abcfb0b053d5b3fb82a262d34c802538effac1', 'remote_hash': 'f0abcfb0b053d5b3fb82a262d34c802538effac1', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.3.8-100-gf0abcfb0', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 5}
2024-02-19 23:14:17,226 [system.py:refresh_updates()] - Sending machine.update.refresh
2024-02-19 23:14:37,223 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': 60, 'github_requests_remaining': 59, 'github_limit_reset_time': 1708384475.0, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-313', 'remote_version': 'v0.8.0-313', 'rollback_version': 'v0.8.0-311', 'current_hash': 'e87ab4a8955ca434b7f7c09d3eba443200cb523d', 'remote_hash': 'e87ab4a8955ca434b7f7c09d3eba443200cb523d', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-313-ge87ab4a8', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-113', 'remote_version': 'v0.12.0-113', 'rollback_version': 'v0.12.0-111', 'current_hash': '28f06a104bc0cfe3a7d36db343ade5a805b3e132', 'remote_hash': '28f06a104bc0cfe3a7d36db343ade5a805b3e132', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-113-g28f06a10', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.2.1-0', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.10.0', 'remote_version': 'v2.10.0', 'rollback_version': 'v2.10.0', 'last_error': '', 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.3.8-100', 'remote_version': 'v0.3.8-100', 'rollback_version': 'v0.3.8-100', 'current_hash': 'f0abcfb0b053d5b3fb82a262d34c802538effac1', 'remote_hash': 'f0abcfb0b053d5b3fb82a262d34c802538effac1', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.3.8-100-gf0abcfb0', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 6}
2024-02-19 23:14:40,427 [KlippyGtk.py:Dialog()] - Showing dialog Update (width=2560, height=1800)
2024-02-19 23:14:42,198 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-19 23:14:42,199 [system.py:update_confirm()] - Updating full
2024-02-19 23:14:42,354 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=2560, height=1800)
2024-02-19 23:14:42,355 [system.py:update_program()] - Sending machine.update.full
2024-02-19 23:14:42,408 [base_panel.py:process_update()] - Update complete
2024-02-19 23:14:47,220 [base_panel.py:finish_updating()] - Finishing update
2024-02-19 23:14:47,231 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-19 23:14:47,231 [screen.py:_menu_go_back()] - #### Menu go home
2024-02-19 23:14:47,305 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 23:14:49,387 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-19 23:14:49,388 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-19 23:14:49,480 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 23:14:49,516 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 23:14:49,526 [menu.py:arrangeMenuItems()] - X > more led
2024-02-19 23:14:49,540 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 23:14:49,554 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 23:14:49,567 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 23:14:51,176 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-02-19 23:14:51,247 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': 60, 'github_requests_remaining': 59, 'github_limit_reset_time': 1708384475.0, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-313', 'remote_version': 'v0.8.0-313', 'rollback_version': 'v0.8.0-311', 'current_hash': 'e87ab4a8955ca434b7f7c09d3eba443200cb523d', 'remote_hash': 'e87ab4a8955ca434b7f7c09d3eba443200cb523d', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-313-ge87ab4a8', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-113', 'remote_version': 'v0.12.0-113', 'rollback_version': 'v0.12.0-111', 'current_hash': '28f06a104bc0cfe3a7d36db343ade5a805b3e132', 'remote_hash': '28f06a104bc0cfe3a7d36db343ade5a805b3e132', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-113-g28f06a10', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.2.1-0', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.10.0', 'remote_version': 'v2.10.0', 'rollback_version': 'v2.10.0', 'last_error': '', 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.3.8-100', 'remote_version': 'v0.3.8-100', 'rollback_version': 'v0.3.8-100', 'current_hash': 'f0abcfb0b053d5b3fb82a262d34c802538effac1', 'remote_hash': 'f0abcfb0b053d5b3fb82a262d34c802538effac1', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.3.8-100-gf0abcfb0', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 8}
2024-02-19 23:14:52,778 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 23:14:52,853 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 23:14:52,899 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 23:14:52,908 [menu.py:arrangeMenuItems()] - X > more led
2024-02-19 23:14:52,923 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 23:14:52,936 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 23:14:52,949 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 23:14:55,082 [screen.py:_load_panel()] - Loading panel: network
2024-02-19 23:14:55,148 [network.py:__init__()] - Found wireless interfaces: ['wlan0']
2024-02-19 23:14:55,149 [network.py:__init__()] - Using wpa_cli
2024-02-19 23:14:55,178 [wifi.py:run()] - Setting up wifi event loop
2024-02-19 23:14:55,236 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > network
2024-02-19 23:14:56,707 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 23:14:56,788 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 23:14:56,830 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 23:14:56,841 [menu.py:arrangeMenuItems()] - X > more led
2024-02-19 23:14:56,855 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 23:14:56,868 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 23:14:56,881 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 23:14:57,509 [screen.py:_load_panel()] - Loading panel: bed_level
2024-02-19 23:14:57,542 [bed_level.py:_get_screws()] - screws_tilt_adjust
2024-02-19 23:14:57,543 [bed_level.py:_get_screws()] - screw1: 61.8,86
2024-02-19 23:14:57,545 [bed_level.py:_get_screws()] - screw1_name: front left screw
2024-02-19 23:14:57,545 [bed_level.py:_get_screws()] - screw2: 230,86
2024-02-19 23:14:57,546 [bed_level.py:_get_screws()] - screw2_name: front right screw
2024-02-19 23:14:57,546 [bed_level.py:_get_screws()] - screw3: 230,230
2024-02-19 23:14:57,546 [bed_level.py:_get_screws()] - screw3_name: rear right screw
2024-02-19 23:14:57,546 [bed_level.py:_get_screws()] - screw4: 61.8,230
2024-02-19 23:14:57,547 [bed_level.py:_get_screws()] - screw4_name: rear left screw
2024-02-19 23:14:57,547 [bed_level.py:_get_screws()] - horizontal_move_z: 5.
2024-02-19 23:14:57,547 [bed_level.py:_get_screws()] - speed: 250.
2024-02-19 23:14:57,547 [bed_level.py:_get_screws()] - screw_thread: CW-M4
2024-02-19 23:14:57,548 [bed_level.py:__init__()] - screws_tilt_adjust: [[61.8, 86.0], [230.0, 86.0], [61.8, 230.0], [230.0, 230.0]]
2024-02-19 23:14:57,549 [printer.py:get_probe()] - Probe type: bltouch
2024-02-19 23:14:57,550 [bed_level.py:__init__()] - offset X: -31.8 Y: -41.0
2024-02-19 23:14:57,550 [bed_level.py:__init__()] - screws with offset: [[30.0, 45.0], [198.2, 45.0], [30.0, 189.0], [198.2, 189.0]]
2024-02-19 23:14:57,550 [bed_level.py:__init__()] - X: {30.0, 198.2}
Y: {45.0, 189.0}
2024-02-19 23:14:57,551 [bed_level.py:__init__()] - Using max_distance: 111 to fit: 4 screws.
2024-02-19 23:14:57,551 [bed_level.py:__init__()] - Using 4/4-screw locations
2024-02-19 23:14:57,687 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > bed_level
2024-02-19 23:14:59,020 [network.py:connected_callback()] - Now connected to a new network
2024-02-19 23:15:00,429 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 23:15:00,504 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 23:15:00,534 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 23:15:00,544 [menu.py:arrangeMenuItems()] - X > more led
2024-02-19 23:15:00,560 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 23:15:00,573 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 23:15:00,586 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 23:15:01,250 [screen.py:_load_panel()] - Loading panel: bed_mesh
2024-02-19 23:15:01,333 [bed_mesh.py:add_profile()] - Adding Profile: default
2024-02-19 23:15:01,391 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > bed_mesh
2024-02-19 23:15:01,392 [bed_mesh.py:activate_mesh()] - Clearing active profile
2024-02-19 23:15:01,393 [bed_mesh.py:activate_mesh()] - Clearing active profile
2024-02-19 23:15:03,180 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 23:15:03,244 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 23:15:03,285 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 23:15:03,302 [menu.py:arrangeMenuItems()] - X > more led
2024-02-19 23:15:03,319 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 23:15:03,333 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 23:15:03,347 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 23:15:08,911 [screen.py:_load_panel()] - Loading panel: settings
2024-02-19 23:15:09,271 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-02-19 23:15:16,788 [screen_panel.py:on_dropdown_change()] - [main] font_size changed to small
2024-02-19 23:15:24,779 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 23:15:24,785 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-100-gf0abcfb
2024-02-19 23:15:24,786 [functions.py:log_start()] - Python version: 3.9
2024-02-19 23:15:24,959 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 23:15:24,960 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-19 23:15:24,976 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-19 23:15:24,979 [config.py:__init__()] - ====== Saved Def ======

[main]
font_size = small
use_dpms = False

=======================
2024-02-19 23:15:24,979 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 23:15:25,100 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 23:15:25,100 [config.py:install_language()] - Using lang en
2024-02-19 23:15:25,121 [screen.py:__init__()] - Screen resolution: 2560x1800
2024-02-19 23:15:25,123 [KlippyGtk.py:__init__()] - Font size: 54.2 (small)
2024-02-19 23:15:25,955 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 23:15:25,955 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-02-19 23:15:25,964 [screen.py:initial_connection()] - Default printer: None
2024-02-19 23:15:26,008 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 23:15:26,008 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 23:15:26,096 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 23:15:26,111 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 23:15:26,130 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 23:15:26,144 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 23:15:26,146 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 23:15:26,160 [_logging.py:info()] - Websocket connected
2024-02-19 23:15:26,160 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 23:15:26,231 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 23:15:26,249 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 23:15:26,250 [printer.py:configure_cameras()] - Cameras: [{'name': 'rpicam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 25, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '291fb565-df8c-4ea2-8117-aa9dfa60ea30'}]
2024-02-19 23:15:26,251 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-313-ge87ab4a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 23:15:26,271 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 23:15:26,395 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 23:15:26,404 [screen.py:init_klipper()] - {'configfile': {'config': {'menu __main': {'type': 'list', 'name': 'Main'}, 'menu __main __pause': {'type': 'command', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Pause printing', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'index': '0', 'name': 'Resume printing', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'index': '1', 'name': 'Abort printing', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'enable': '{printer.idle_timeout.state == "Printing"}', 'name': 'Tune'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM220 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM221 S{'%d' % (menu.input*100)}"}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.005', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __tune __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'realtime': 'True', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __tune __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __octoprint': {'type': 'disabled'}, 'menu __main __octoprint __pause': {'type': 'disabled'}, 'menu __main __octoprint __resume': {'type': 'disabled'}, 'menu __main __octoprint __abort': {'type': 'disabled'}, 'menu __main __sdcard': {'type': 'vsdlist', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}', 'name': 'SD Card'}, 'menu __main __sdcard __start': {'type': 'command', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'name': 'Start printing', 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled'}, 'menu __main __sdcard __pause': {'type': 'disabled'}, 'menu __main __sdcard __cancel': {'type': 'disabled'}, 'menu __main __control': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Control'}, 'menu __main __control __home': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Home All', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled'}, 'menu __main __control __homexy': {'type': 'disabled'}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nM106 S{255 if menu.input else 0}'}, 'menu __main __control __fanspeed': {'type': 'input', 'enable': "{'fan' in printer}", 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nM106 S{'%d' % (menu.input*255)}"}, 'menu __main __control __caselightonoff': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': '1', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}'}, 'menu __main __control __caselightpwm': {'type': 'input', 'enable': "{'output_pin caselight' in printer}", 'name': "Lights: {'%3d' % (menu.input*100)}%", 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': '0.01', 'realtime': 'True', 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}'}, 'menu __main __control __move_10mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 10mm'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '10.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '10.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 1mm'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '1.0', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '1.0', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.1mm'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%05.1f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.1', 'realtime': 'True', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move E:{'%+06.1f' % menu.input}", 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': '0.1', 'realtime': 'False', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __temp': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Temperature'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotend1_target': {'type': 'input', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': '1', 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __hotbed_target': {'type': 'input', 'enable': "{'heater_bed' in printer}", 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': '1', 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}"}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA'}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS'}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Preheat all', 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Preheat hotend', 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Preheat hotbed', 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown'}, 'menu __main __temp __cooldown __all': {'type': 'command', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'name': 'Cooldown all', 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'enable': "{'extruder' in printer}", 'name': 'Cooldown hotend', 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'enable': "{'heater_bed' in printer}", 'name': 'Cooldown hotbed', 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Filament'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'enable': "{'extruder' in printer}", 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': '1', 'gcode': "M104 T0 S{'%.0f' % menu.input}"}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'input': '5', 'input_step': '0.1', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __setup': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Setup'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart'}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart host', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Restart FW', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning'}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'name': 'Tune Hotend PID', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'name': 'Tune Hotbed PID', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration'}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. auto', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Delta cal. man'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Bed probe', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_step': '1', 'realtime': 'True', 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': '1', 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}"}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'respond': {'default_type': 'echo'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'display_status': {}, 'pause_resume': {}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro PREPARE': {'description': 'Etape 1 de la calibration avant impression', 'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}'}, 'gcode_macro BED_MESH': {'description': 'Etape 2 de la calibration avant impression', 'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-31.8', 'y_offset': '-41', 'z_offset': '2.543'}, 'safe_z_home': {'home_xy_position': '146.8,156', 'speed': '250', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '250', 'horizontal_move_z': '5', 'mesh_min': '40,40', 'mesh_max': '198, 189', 'probe_count': '3,3'}, 'screws_tilt_adjust': {'screw1': '61.8,86', 'screw1_name': 'front left screw', 'screw2': '230,86', 'screw2_name': 'front right screw', 'screw3': '230,230', 'screw3_name': 'rear right screw', 'screw4': '61.8,230', 'screw4_name': 'rear left screw', 'horizontal_move_z': '5.', 'speed': '250.', 'screw_thread': 'CW-M4'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '50'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-4', 'position_max': '180'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'gear_ratio': '3.5:1', 'rotation_distance': '26.359', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '100', 'pressure_advance': '0.04', 'pressure_advance_smooth_time': '0.040', 'heater_pin': 'PC8', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '300', 'min_extrude_temp': '170', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '19.438', 'pid_ki': '0.953', 'pid_kd': '99.135'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '73.314', 'pid_ki': '1.276', 'pid_kd': '1052.973'}, 'heater_fan hotend_fan': {'pin': 'PB15', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '300', 'max_accel': '3000', 'max_accel_to_decel': '1000', 'square_corner_velocity': '5.0', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'encoder_pins': '^PA10, ^PA9', 'click_pin': '^!PA15'}, 'output_pin beeper': {'pin': 'PB5'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.085000, 0.062500\n0.002500, 0.002500, 0.000000\n0.037500, 0.052500, 0.052500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '198.0', 'min_y': '40.0', 'max_y': '189.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nG28\nBED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro prepare': {'gcode': '\n\nG28\nSCREWS_TILT_CALCULATE\n\n\n{% if printer.screws_tilt_adjust.max_deviation|float > 0.025 %}\nM117 Bed screws need ajusting\nSCREWS_TILT_CALCULATE\nPROBE_CALIBRATE\nM117 Please save & reboot\n{% else %}\nBED_MESH\n{% endif %}', 'description': 'Etape 1 de la calibration avant impression'}, 'gcode_macro bed_mesh': {'gcode': '\nM190 S60\nG28\nBED_MESH_CALIBRATE\nTURN_OFF_HEATERS\nM117 Please save & reboot', 'description': 'Etape 2 de la calibration avant impression'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'bltouch': {'z_offset': 2.543, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -31.8, 'y_offset': -41.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'safe_z_home': {'home_xy_position': [146.8, 156.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 250.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [3, 3], 'mesh_min': [40.0, 40.0], 'mesh_max': [198.0, 189.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 250.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.085, 0.0625], [0.0025, 0.0025, 0.0], [0.0375, 0.0525, 0.0525]], 'min_x': 40.0, 'max_x': 198.0, 'min_y': 40.0, 'max_y': 189.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [61.8, 86.0], 'screw1_name': 'front left screw', 'screw2': [230.0, 86.0], 'screw2_name': 'front right screw', 'screw3': [230.0, 230.0], 'screw3_name': 'rear right screw', 'screw4': [61.8, 230.0], 'screw4_name': 'rear left screw', 'screw_thread': 'CW-M4', 'horizontal_move_z': 5.0, 'speed': 250.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 180.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 19.438, 'pid_ki': 0.953, 'pid_kd': 99.135, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 100.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.04, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 26.359, 'full_steps_per_rotation': 200, 'gear_ratio': [[3.5, 1.0]], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 73.314, 'pid_ki': 1.276, 'pid_kd': 1052.973, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'display': {'lcd_type': 'st7920', 'cs_pin': 'PB8', 'sclk_pin': 'PB9', 'sid_pin': 'PD6', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^PA10, ^PA9', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!PA15', 'display_group': '_default_16x4'}, 'menu __main': {'type': 'list', 'name': 'Main', 'enable': True}, 'menu __main __pause': {'type': 'command', 'index': 0, 'name': 'Pause printing', 'enable': '{(printer.print_stats.state == "printing") and ("pause_resume" in printer)}', 'gcode': '\nPAUSE\n{ menu.exit() }'}, 'menu __main __resume': {'type': 'command', 'index': 0, 'name': 'Resume printing', 'enable': '{(printer.print_stats.state == "paused") and ("pause_resume" in printer)}', 'gcode': '\nRESUME\n{ menu.exit() }'}, 'menu __main __abort': {'type': 'command', 'index': 1, 'name': 'Abort printing', 'enable': '{((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}', 'gcode': '\nCANCEL_PRINT\n{ menu.exit() }'}, 'menu __main __tune': {'type': 'list', 'name': 'Tune', 'enable': '{printer.idle_timeout.state == "Printing"}'}, 'menu __main __tune __speed': {'type': 'input', 'name': "Speed: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM220 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.speed_factor}', 'input_min': '0.01', 'input_max': '5', 'input_step': 0.01}, 'menu __main __tune __flow': {'type': 'input', 'name': "Flow: {'%3d' % (menu.input*100)}%", 'enable': True, 'gcode': "\nM221 S{'%d' % (menu.input*100)}", 'realtime': True, 'input': '{printer.gcode_move.extrude_factor}', 'input_min': '0.01', 'input_max': '2', 'input_step': 0.01}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.005}, 'menu __main __tune __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __tune __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': True, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __tune __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __octoprint': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __octoprint __abort': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard': {'type': 'vsdlist', 'name': 'SD Card', 'enable': '{not printer.idle_timeout.state == "Printing" and (\'virtual_sdcard\' in printer)}'}, 'menu __main __sdcard __start': {'type': 'command', 'name': 'Start printing', 'enable': "{('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}", 'gcode': '\nM24\n{ menu.exit() }'}, 'menu __main __sdcard __resume': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __pause': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __sdcard __cancel': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control': {'type': 'list', 'name': 'Control', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __home': {'type': 'command', 'name': 'Home All', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G28'}, 'menu __main __control __homez': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __homexy': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __control __disable': {'type': 'command', 'name': 'Steppers off', 'enable': True, 'gcode': '\nM84\nM18'}, 'menu __main __control __fanonoff': {'type': 'input', 'name': "Fan: {'ON ' if menu.input else 'OFF'}", 'enable': "{'fan' in printer}", 'gcode': '\nM106 S{255 if menu.input else 0}', 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __fanspeed': {'type': 'input', 'name': "Fan speed: {'%3d' % (menu.input*100)}%", 'enable': "{'fan' in printer}", 'gcode': "\nM106 S{'%d' % (menu.input*255)}", 'realtime': True, 'input': '{printer.fan.speed}', 'input_min': '0', 'input_max': '1', 'input_step': 0.01}, 'menu __main __control __caselightonoff': {'type': 'input', 'name': "Lights: {'ON ' if menu.input else 'OFF'}", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={1 if menu.input else 0}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0', 'input_max': '1', 'input_step': 1.0}, 'menu __main __control __caselightpwm': {'type': 'input', 'name': "Lights: {'%3d' % (menu.input*100)}%", 'enable': "{'output_pin caselight' in printer}", 'gcode': '\nSET_PIN PIN=caselight VALUE={menu.input}', 'realtime': True, 'input': "{printer['output_pin caselight'].value}", 'input_min': '0.0', 'input_max': '1.0', 'input_step': 0.01}, 'menu __main __control __move_10mm': {'type': 'list', 'name': 'Move 10mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_10mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 10.0}, 'menu __main __control __move_10mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 10.0}, 'menu __main __control __move_1mm': {'type': 'list', 'name': 'Move 1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_1mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 1.0}, 'menu __main __control __move_1mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 1.0}, 'menu __main __control __move_01mm': {'type': 'list', 'name': 'Move 0.1mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_01mm __axis_x': {'type': 'input', 'name': "Move X:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_y': {'type': 'input', 'name': "Move Y:{'%05.1f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_z': {'type': 'input', 'name': "Move Z:{'%05.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.1}, 'menu __main __control __move_01mm __axis_e': {'type': 'input', 'name': "Move E:{'%+06.1f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nM83\nG1 E{menu.input} F240\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '0', 'input_min': '-{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_max': '{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}', 'input_step': 0.1}, 'menu __main __temp': {'type': 'list', 'name': 'Temperature', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __temp __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T0 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotend1_target': {'type': 'input', 'name': '{"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}', 'enable': "{('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}", 'gcode': "\nM104 T1 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.extruder1.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder1.max_temp}', 'input_step': 1.0}, 'menu __main __temp __hotbed_target': {'type': 'input', 'name': '{"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}', 'enable': "{'heater_bed' in printer}", 'gcode': "\nM140 S{'%.0f' % menu.input}\n{ menu.exit()}", 'realtime': False, 'input': '{printer.heater_bed.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.heater_bed.max_temp}', 'input_step': 1.0}, 'menu __main __temp __preheat_pla': {'type': 'list', 'name': 'Preheat PLA', 'enable': True}, 'menu __main __temp __preheat_pla __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S70\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S230\n{ menu.exit()}'}, 'menu __main __temp __preheat_pla __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S70\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs': {'type': 'list', 'name': 'Preheat ABS', 'enable': True}, 'menu __main __temp __preheat_abs __all': {'type': 'command', 'name': 'Preheat all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM140 S110\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotend': {'type': 'command', 'name': 'Preheat hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S245\n{ menu.exit()}'}, 'menu __main __temp __preheat_abs __hotbed': {'type': 'command', 'name': 'Preheat hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S110\n{ menu.exit()}'}, 'menu __main __temp __cooldown': {'type': 'list', 'name': 'Cooldown', 'enable': True}, 'menu __main __temp __cooldown __all': {'type': 'command', 'name': 'Cooldown all', 'enable': "{('extruder' in printer) and ('heater_bed' in printer)}", 'gcode': '\nM104 S0\nM140 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotend': {'type': 'command', 'name': 'Cooldown hotend', 'enable': "{'extruder' in printer}", 'gcode': '\nM104 S0\n{ menu.exit()}'}, 'menu __main __temp __cooldown __hotbed': {'type': 'command', 'name': 'Cooldown hotbed', 'enable': "{'heater_bed' in printer}", 'gcode': '\nM140 S0\n{ menu.exit()}'}, 'menu __main __filament': {'type': 'list', 'name': 'Filament', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __filament __hotend0_target': {'type': 'input', 'name': '{"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}', 'enable': "{'extruder' in printer}", 'gcode': "M104 T0 S{'%.0f' % menu.input}", 'realtime': False, 'input': '{printer.extruder.target}', 'input_min': '0', 'input_max': '{printer.configfile.config.extruder.max_temp}', 'input_step': 1.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Fil. fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __loads': {'type': 'command', 'name': 'Load Fil. slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Fil.fast', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F960\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __unloads': {'type': 'command', 'name': 'Unload Fil.slow', 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E-50 F240\nRESTORE_GCODE_STATE NAME=__filament__load'}, 'menu __main __filament __feed': {'type': 'input', 'name': "Feed: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F60\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '5', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 0.1}, 'menu __main __setup': {'type': 'list', 'name': 'Setup', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __save_config': {'type': 'command', 'name': 'Save config', 'enable': True, 'gcode': 'SAVE_CONFIG'}, 'menu __main __setup __restart': {'type': 'list', 'name': 'Restart', 'enable': True}, 'menu __main __setup __restart __host_restart': {'type': 'command', 'name': 'Restart host', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'RESTART'}, 'menu __main __setup __restart __firmware_restart': {'type': 'command', 'name': 'Restart FW', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'FIRMWARE_RESTART'}, 'menu __main __setup __tuning': {'type': 'list', 'name': 'PID tuning', 'enable': True}, 'menu __main __setup __tuning __hotend_pid_tuning': {'type': 'command', 'name': 'Tune Hotend PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'extruder\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1'}, 'menu __main __setup __tuning __hotbed_pid_tuning': {'type': 'command', 'name': 'Tune Hotbed PID', 'enable': '{(not printer.idle_timeout.state == "Printing") and (\'heater_bed\' in printer)}', 'gcode': 'PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1'}, 'menu __main __setup __calib': {'type': 'list', 'name': 'Calibration', 'enable': True}, 'menu __main __setup __calib __delta_calib_auto': {'type': 'command', 'name': 'Delta cal. auto', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nG28\nDELTA_CALIBRATE'}, 'menu __main __setup __calib __delta_calib_man': {'type': 'list', 'name': 'Delta cal. man', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __setup __calib __bedprobe': {'type': 'command', 'name': 'Bed probe', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PROBE'}, 'menu __main __setup __calib __delta_calib_man __start': {'type': 'command', 'name': 'Start probing', 'enable': True, 'gcode': '\nG28\nDELTA_CALIBRATE METHOD=manual'}, 'menu __main __setup __calib __delta_calib_man __move_z': {'type': 'input', 'name': "Move Z: {'%03.2f' % menu.input}", 'enable': True, 'gcode': "\n{%- if menu.event == 'change' -%}\nG1 Z{'%.2f' % menu.input}\n{%- elif menu.event == 'long_click' -%}\nG1 Z{'%.2f' % menu.input}\nSAVE_GCODE_STATE NAME=__move__axis\nG91\nG1 Z2\nG1 Z-2\nRESTORE_GCODE_STATE NAME=__move__axis\n{%- endif -%}", 'realtime': True, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __test_z': {'type': 'input', 'name': "Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}", 'enable': True, 'gcode': "\n{%- if menu.event == 'long_click' -%}\nTESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}\n{%- endif -%}", 'realtime': False, 'input': '6', 'input_min': '0', 'input_max': '11', 'input_step': 1.0}, 'menu __main __setup __calib __delta_calib_man __accept': {'type': 'command', 'name': 'Accept', 'enable': True, 'gcode': 'ACCEPT'}, 'menu __main __setup __calib __delta_calib_man __abort': {'type': 'command', 'name': 'Abort', 'enable': True, 'gcode': 'ABORT'}, 'menu __main __setup __dump': {'type': 'command', 'name': 'Dump parameters', 'enable': True, 'gcode': '\n{% for name1 in printer %}\n{% for name2 in printer[name1] %}\n{ action_respond_info("printer[\'%s\'].%s = %s"\n% (name1, name2, printer[name1][name2])) }\n{% else %}\n{ action_respond_info("printer[\'%s\'] = %s" % (name1, printer[name1])) }\n{% endfor %}\n{% endfor %}'}, 'output_pin beeper': {'pwm': False, 'pin': 'PB5', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 23:15:26,413 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 23:15:26,418 [printer.py:reinit()] - Klipper version: v0.12.0-113-g28f06a10
2024-02-19 23:15:26,418 [printer.py:reinit()] - # Extruders: 1
2024-02-19 23:15:26,419 [printer.py:reinit()] - # Temperature devices: 1
2024-02-19 23:15:26,419 [printer.py:reinit()] - # Fans: 2
2024-02-19 23:15:26,420 [printer.py:reinit()] - # Output pins: 1
2024-02-19 23:15:26,420 [printer.py:reinit()] - # Leds: 0
2024-02-19 23:15:26,446 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 23:15:26,451 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 23:15:26,645 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&output_pin beeper
2024-02-19 23:15:26,655 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 23:15:26,656 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 23:15:26,662 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 23:15:26,679 [screen.py:init_klipper()] - Printer initialized
2024-02-19 23:15:26,680 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 23:15:26,680 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 23:15:26,835 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 23:15:26,955 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 23:15:26,972 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 23:15:26,980 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 23:15:27,032 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 23:15:27,049 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 23:15:27,069 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-02-19 23:15:27,084 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 23:15:27,086 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 23:15:31,877 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-19 23:15:31,878 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-19 23:15:31,891 [screen.py:_load_panel()] - Loading panel: menu
2024-02-19 23:15:32,292 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 23:15:32,319 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 23:15:32,328 [menu.py:arrangeMenuItems()] - X > more led
2024-02-19 23:15:32,343 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 23:15:32,356 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 23:15:32,369 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 23:15:33,563 [screen.py:_load_panel()] - Loading panel: settings
2024-02-19 23:15:33,902 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-02-19 23:15:51,529 [screen_panel.py:switch_config_option()] - [main] show_heater_power toggled True
2024-02-19 23:15:51,541 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 23:15:51,571 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 23:15:51,721 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 23:15:51,738 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 23:15:51,746 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 23:15:51,799 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 23:15:53,427 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-19 23:15:53,428 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-19 23:15:53,442 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 23:15:53,830 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 23:15:53,855 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 23:15:53,865 [menu.py:arrangeMenuItems()] - X > more led
2024-02-19 23:15:53,880 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 23:15:53,893 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 23:15:53,906 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 23:15:58,310 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 23:15:58,654 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-02-19 23:16:05,191 [screen_panel.py:switch_config_option()] - [main] use_dpms toggled True
2024-02-19 23:16:05,200 [screen.py:set_dpms()] - DPMS set to: True
2024-02-19 23:16:05,216 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 23:16:05,235 [screen.py:set_screenblanking_timeout()] - DPMS State FAIL
2024-02-19 23:16:05,239 [screen.py:show_popup_message()] - error: DPMS has failed to load and has been disabled
2024-02-19 23:16:05,315 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-02-19 23:16:16,167 [screen_panel.py:on_dropdown_change()] - [main] screen_blanking changed to 300
2024-02-19 23:16:16,188 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 300
2024-02-19 23:16:16,189 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-02-19 23:16:20,349 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 23:16:20,419 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 23:16:20,457 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 23:16:20,471 [menu.py:arrangeMenuItems()] - X > more led
2024-02-19 23:16:20,491 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 23:16:20,507 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 23:16:20,520 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 23:16:21,807 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 23:16:21,869 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 23:16:25,110 [screen.py:_load_panel()] - Loading panel: move
2024-02-19 23:16:25,294 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 23:16:26,736 [screen.py:_load_panel()] - Loading panel: menu
2024-02-19 23:16:26,955 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-19 23:16:26,979 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-19 23:16:26,983 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-02-19 23:16:28,827 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-19 23:17:11,658 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 23:17:11,721 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 23:17:13,003 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 23:17:13,069 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 23:17:16,268 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-19 23:17:16,269 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-19 23:17:16,350 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 23:17:16,392 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 23:17:16,404 [menu.py:arrangeMenuItems()] - X > more led
2024-02-19 23:17:16,419 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 23:17:16,432 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 23:17:16,445 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 23:17:17,882 [screen.py:_load_panel()] - Loading panel: system
2024-02-19 23:17:17,914 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/machine/system_info
2024-02-19 23:17:18,008 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-02-19 23:17:18,030 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': 60, 'github_requests_remaining': 59, 'github_limit_reset_time': 1708384475.0, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-313', 'remote_version': 'v0.8.0-313', 'rollback_version': 'v0.8.0-311', 'current_hash': 'e87ab4a8955ca434b7f7c09d3eba443200cb523d', 'remote_hash': 'e87ab4a8955ca434b7f7c09d3eba443200cb523d', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-313-ge87ab4a8', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-113', 'remote_version': 'v0.12.0-113', 'rollback_version': 'v0.12.0-111', 'current_hash': '28f06a104bc0cfe3a7d36db343ade5a805b3e132', 'remote_hash': '28f06a104bc0cfe3a7d36db343ade5a805b3e132', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-113-g28f06a10', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.2.1-0', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.10.0', 'remote_version': 'v2.10.0', 'rollback_version': 'v2.10.0', 'last_error': '', 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.3.8-100', 'remote_version': 'v0.3.8-100', 'rollback_version': 'v0.3.8-100', 'current_hash': 'f0abcfb0b053d5b3fb82a262d34c802538effac1', 'remote_hash': 'f0abcfb0b053d5b3fb82a262d34c802538effac1', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.3.8-100-gf0abcfb0', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 6}
2024-02-19 23:17:19,665 [KlippyGtk.py:Dialog()] - Showing dialog Shutdown (width=2560, height=1800)
2024-02-19 23:17:24,843 [KlippyGtk.py:remove_dialog()] - Removing Dialog
