=============== Log rollover at Sat Feb 24 00:01:55 2024 ===============
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Sat Feb 24 00:01:57 2024 (1708729317.4 23.2)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1963805808: New connection
webhooks client 1963805808: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Sat Feb 24 01:17:28 2024 (1708733848.9 23.1)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1970358616: New connection
webhooks client 1970358616: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-114-ga77d0790'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Sat Feb 24 13:27:08 2024 (1708777628.9 186.4)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1970094936: New connection
webhooks client 1970094936: Client info {'program': 'Moonraker', 'version': 'v0.8.0-317-g0850c16'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-114-ga77d0790'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Sat Feb 24 13:32:54 2024 (1708777974.6 22.3)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
webhooks client 1964604744: New connection
webhooks client 1964604744: Client info {'program': 'Moonraker', 'version': 'v0.8.0-317-g0850c16'}
Loaded MCU 'mcu' 106 commands (v0.12.0-114-ga77d0790 / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'rpi': Starting connect
Loaded MCU 'rpi' 112 commands (v0.12.0-111-g4f00f219 / gcc: (Raspbian 10.2.1-6+rpi1) 10.2.1 20210110 binutils: (GNU Binutils for Raspbian) 2.35.2)
MCU 'rpi' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu_temperature 'mcu' nominal base=-274.985337 slope=1320.967742
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'rpi' printer configuration...
Configured MCU 'rpi' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (71.8, 81.0)    | (40.0, 40.0)
  1   | (111.3, 81.0)   | (79.5, 40.0)
  2   | (150.8, 81.0)   | (119.0, 40.0)
  3   | (190.3, 81.0)   | (158.5, 40.0)
  4   | (229.8, 81.0)   | (198.0, 40.0)
  5   | (229.8, 118.2)  | (198.0, 77.2)
  6   | (190.3, 118.2)  | (158.5, 77.2)
  7   | (150.8, 118.2)  | (119.0, 77.2)
  8   | (111.3, 118.2)  | (79.5, 77.2)
  9   | (71.8, 118.2)   | (40.0, 77.2)
  10  | (71.8, 155.5)   | (40.0, 114.5)
  11  | (111.3, 155.5)  | (79.5, 114.5)
  12  | (150.8, 155.5)  | (119.0, 114.5)
  13  | (190.3, 155.5)  | (158.5, 114.5)
  14  | (229.8, 155.5)  | (198.0, 114.5)
  15  | (229.8, 192.8)  | (198.0, 151.8)
  16  | (190.3, 192.8)  | (158.5, 151.8)
  17  | (150.8, 192.8)  | (119.0, 151.8)
  18  | (111.3, 192.8)  | (79.5, 151.8)
  19  | (71.8, 192.8)   | (40.0, 151.8)
  20  | (71.8, 230.0)   | (40.0, 189.0)
  21  | (111.3, 230.0)  | (79.5, 189.0)
  22  | (150.8, 230.0)  | (119.0, 189.0)
  23  | (190.3, 230.0)  | (158.5, 189.0)
  24  | (229.8, 230.0)  | (198.0, 189.0)
Starting heater checks for extruder
Starting heater checks for heater_bed
Stats 30.2: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=4927 bytes_read=6150 bytes_retransmit=9 bytes_invalid=0 send_seq=279 receive_seq=267 retransmit_seq=2 srtt=0.004 rttvar=0.006 rto=0.026 ready_bytes=501 upcoming_bytes=0 freq=64000055 rpi: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=813 bytes_read=4526 bytes_retransmit=0 bytes_invalid=0 send_seq=111 receive_seq=111 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50003923 adj=50008105  heater_bed: target=0 temp=17.6 pwm=0.000 raspberry_pi: temp=39.2 mcu_temp: temp=25.7 sysload=1.98 cputime=5.872 memavail=523112 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.7 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 1964604744
webhooks: registering remote method 'reboot_machine' for connection id: 1964604744
webhooks: registering remote method 'pause_job_queue' for connection id: 1964604744
webhooks: registering remote method 'start_job_queue' for connection id: 1964604744
Stats 31.2: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=5484 bytes_read=6408 bytes_retransmit=9 bytes_invalid=0 send_seq=290 receive_seq=290 retransmit_seq=2 srtt=0.007 rttvar=0.008 rto=0.041 ready_bytes=0 upcoming_bytes=0 freq=63999136 rpi: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=819 bytes_read=4542 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50001957 adj=50000508  heater_bed: target=0 temp=17.3 pwm=0.000 raspberry_pi: temp=39.2 mcu_temp: temp=25.7 sysload=1.98 cputime=5.922 memavail=581120 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=17.0 pwm=0.000
Stats 32.2: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=5490 bytes_read=6571 bytes_retransmit=9 bytes_invalid=0 send_seq=291 receive_seq=291 retransmit_seq=2 srtt=0.006 rttvar=0.008 rto=0.038 ready_bytes=0 upcoming_bytes=0 freq=63998860 rpi: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=825 bytes_read=4558 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000597 adj=49999312  heater_bed: target=0 temp=17.5 pwm=0.000 raspberry_pi: temp=38.6 mcu_temp: temp=25.7 sysload=1.98 cputime=5.945 memavail=577516 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.6 pwm=0.000
Stats 33.2: gcodein=0  mcu: mcu_awake=0.086 mcu_task_avg=0.000080 mcu_task_stddev=0.000272 bytes_write=5511 bytes_read=6770 bytes_retransmit=9 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=2 srtt=0.005 rttvar=0.006 rto=0.031 ready_bytes=0 upcoming_bytes=0 freq=63998894 rpi: mcu_awake=0.004 mcu_task_avg=0.000024 mcu_task_stddev=0.000013 bytes_write=831 bytes_read=4588 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000147 adj=49997933  heater_bed: target=0 temp=17.5 pwm=0.000 raspberry_pi: temp=38.6 mcu_temp: temp=25.6 sysload=1.98 cputime=5.966 memavail=576312 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=17.0 pwm=0.000
Stats 34.2: gcodein=0  mcu: mcu_awake=0.086 mcu_task_avg=0.000080 mcu_task_stddev=0.000272 bytes_write=5531 bytes_read=6923 bytes_retransmit=9 bytes_invalid=0 send_seq=295 receive_seq=295 retransmit_seq=2 srtt=0.004 rttvar=0.005 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998778 rpi: mcu_awake=0.004 mcu_task_avg=0.000024 mcu_task_stddev=0.000013 bytes_write=837 bytes_read=4604 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50001216 adj=49997772  heater_bed: target=0 temp=17.3 pwm=0.000 raspberry_pi: temp=39.2 mcu_temp: temp=25.9 sysload=1.98 cputime=6.015 memavail=571328 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=17.3 pwm=0.000
Stats 35.2: gcodein=0  mcu: mcu_awake=0.086 mcu_task_avg=0.000080 mcu_task_stddev=0.000272 bytes_write=5537 bytes_read=7086 bytes_retransmit=9 bytes_invalid=0 send_seq=296 receive_seq=296 retransmit_seq=2 srtt=0.004 rttvar=0.005 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998777 rpi: mcu_awake=0.004 mcu_task_avg=0.000024 mcu_task_stddev=0.000013 bytes_write=843 bytes_read=4620 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000635 adj=50000616  heater_bed: target=0 temp=17.4 pwm=0.000 raspberry_pi: temp=38.1 mcu_temp: temp=25.7 sysload=1.90 cputime=6.043 memavail=570016 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=17.0 pwm=0.000
Stats 36.2: gcodein=0  mcu: mcu_awake=0.086 mcu_task_avg=0.000080 mcu_task_stddev=0.000272 bytes_write=5543 bytes_read=7263 bytes_retransmit=9 bytes_invalid=0 send_seq=297 receive_seq=297 retransmit_seq=2 srtt=0.003 rttvar=0.004 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998744 rpi: mcu_awake=0.004 mcu_task_avg=0.000024 mcu_task_stddev=0.000013 bytes_write=849 bytes_read=4636 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000368 adj=49999588  heater_bed: target=0 temp=17.3 pwm=0.000 raspberry_pi: temp=38.6 mcu_temp: temp=25.7 sysload=1.90 cputime=6.073 memavail=560596 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.8 pwm=0.000
Stats 37.2: gcodein=0  mcu: mcu_awake=0.086 mcu_task_avg=0.000080 mcu_task_stddev=0.000272 bytes_write=5549 bytes_read=7411 bytes_retransmit=9 bytes_invalid=0 send_seq=298 receive_seq=298 retransmit_seq=2 srtt=0.003 rttvar=0.004 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998686 rpi: mcu_awake=0.004 mcu_task_avg=0.000024 mcu_task_stddev=0.000013 bytes_write=855 bytes_read=4652 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000225 adj=49998676  heater_bed: target=0 temp=17.4 pwm=0.000 raspberry_pi: temp=38.1 mcu_temp: temp=25.8 sysload=1.90 cputime=6.099 memavail=551936 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.7 pwm=0.000
Stats 38.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000020 bytes_write=5555 bytes_read=7589 bytes_retransmit=9 bytes_invalid=0 send_seq=299 receive_seq=299 retransmit_seq=2 srtt=0.003 rttvar=0.003 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998690 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=861 bytes_read=4681 bytes_retransmit=0 bytes_invalid=0 send_seq=119 receive_seq=119 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000103 adj=49999044  heater_bed: target=0 temp=17.9 pwm=0.000 raspberry_pi: temp=38.1 mcu_temp: temp=25.7 sysload=1.90 cputime=6.129 memavail=562156 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 39.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000020 bytes_write=5575 bytes_read=7771 bytes_retransmit=9 bytes_invalid=0 send_seq=301 receive_seq=301 retransmit_seq=2 srtt=0.002 rttvar=0.003 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998662 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=867 bytes_read=4697 bytes_retransmit=0 bytes_invalid=0 send_seq=120 receive_seq=120 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000100 adj=49999177  heater_bed: target=0 temp=17.4 pwm=0.000 raspberry_pi: temp=38.1 mcu_temp: temp=25.8 sysload=1.90 cputime=6.157 memavail=551908 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.6 pwm=0.000
Stats 40.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000020 bytes_write=5595 bytes_read=7924 bytes_retransmit=9 bytes_invalid=0 send_seq=303 receive_seq=303 retransmit_seq=2 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998656 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=873 bytes_read=4713 bytes_retransmit=0 bytes_invalid=0 send_seq=121 receive_seq=121 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000219 adj=49999734  heater_bed: target=0 temp=17.4 pwm=0.000 raspberry_pi: temp=37.6 mcu_temp: temp=25.7 sysload=1.83 cputime=6.185 memavail=567732 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=17.5 pwm=0.000
Stats 41.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000020 bytes_write=5601 bytes_read=8087 bytes_retransmit=9 bytes_invalid=0 send_seq=304 receive_seq=304 retransmit_seq=2 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998668 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=879 bytes_read=4729 bytes_retransmit=0 bytes_invalid=0 send_seq=122 receive_seq=122 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000160 adj=50000555  heater_bed: target=0 temp=17.6 pwm=0.000 raspberry_pi: temp=37.6 mcu_temp: temp=25.7 sysload=1.83 cputime=6.211 memavail=566756 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 42.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000020 bytes_write=5621 bytes_read=8269 bytes_retransmit=9 bytes_invalid=0 send_seq=306 receive_seq=306 retransmit_seq=2 srtt=0.002 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998667 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=885 bytes_read=4745 bytes_retransmit=0 bytes_invalid=0 send_seq=123 receive_seq=123 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000119 adj=50000458  heater_bed: target=0 temp=17.5 pwm=0.000 raspberry_pi: temp=38.6 mcu_temp: temp=25.9 sysload=1.83 cputime=6.238 memavail=565980 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.7 pwm=0.000
Stats 43.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000018 mcu_task_stddev=0.000021 bytes_write=5646 bytes_read=8442 bytes_retransmit=9 bytes_invalid=0 send_seq=309 receive_seq=309 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998655 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=891 bytes_read=4761 bytes_retransmit=0 bytes_invalid=0 send_seq=124 receive_seq=124 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000067 adj=50000476  heater_bed: target=0 temp=17.4 pwm=0.000 raspberry_pi: temp=38.1 mcu_temp: temp=25.8 sysload=1.83 cputime=6.263 memavail=564568 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.8 pwm=0.000
Stats 44.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000018 mcu_task_stddev=0.000021 bytes_write=5652 bytes_read=8605 bytes_retransmit=9 bytes_invalid=0 send_seq=310 receive_seq=310 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998637 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000008 bytes_write=897 bytes_read=4790 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000021 adj=50000460  heater_bed: target=0 temp=17.5 pwm=0.000 raspberry_pi: temp=37.6 mcu_temp: temp=25.8 sysload=1.83 cputime=6.293 memavail=564340 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.7 pwm=0.000
Stats 45.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000018 mcu_task_stddev=0.000021 bytes_write=5658 bytes_read=8782 bytes_retransmit=9 bytes_invalid=0 send_seq=311 receive_seq=311 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998640 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000008 bytes_write=903 bytes_read=4806 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000023 adj=50000478  heater_bed: target=0 temp=17.2 pwm=0.000 raspberry_pi: temp=36.5 mcu_temp: temp=25.7 sysload=1.68 cputime=6.335 memavail=562328 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.8 pwm=0.000
Stats 46.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000018 mcu_task_stddev=0.000021 bytes_write=5664 bytes_read=8930 bytes_retransmit=9 bytes_invalid=0 send_seq=312 receive_seq=312 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998647 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000008 bytes_write=909 bytes_read=4822 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000098 adj=50000624  heater_bed: target=0 temp=17.7 pwm=0.000 raspberry_pi: temp=38.1 mcu_temp: temp=25.7 sysload=1.68 cputime=6.363 memavail=550880 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.7 pwm=0.000
Stats 47.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000018 mcu_task_stddev=0.000021 bytes_write=5670 bytes_read=9093 bytes_retransmit=9 bytes_invalid=0 send_seq=313 receive_seq=313 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998641 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000008 bytes_write=915 bytes_read=4838 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000108 adj=50001093  heater_bed: target=0 temp=17.4 pwm=0.000 raspberry_pi: temp=38.6 mcu_temp: temp=25.7 sysload=1.68 cputime=6.393 memavail=543084 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.8 pwm=0.000
Stats 48.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000016 mcu_task_stddev=0.000013 bytes_write=5676 bytes_read=9285 bytes_retransmit=9 bytes_invalid=0 send_seq=314 receive_seq=314 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998640 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000008 bytes_write=921 bytes_read=4854 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000097 adj=50001191  heater_bed: target=0 temp=17.4 pwm=0.000 raspberry_pi: temp=38.6 mcu_temp: temp=25.9 sysload=1.68 cputime=6.421 memavail=560188 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=17.0 pwm=0.000
Stats 49.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000016 mcu_task_stddev=0.000013 bytes_write=5701 bytes_read=9443 bytes_retransmit=9 bytes_invalid=0 send_seq=317 receive_seq=317 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998632 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=927 bytes_read=4883 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000079 adj=50000847  heater_bed: target=0 temp=17.6 pwm=0.000 raspberry_pi: temp=38.6 mcu_temp: temp=25.9 sysload=1.68 cputime=6.447 memavail=559004 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.7 pwm=0.000
Stats 50.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000016 mcu_task_stddev=0.000013 bytes_write=5726 bytes_read=9616 bytes_retransmit=9 bytes_invalid=0 send_seq=320 receive_seq=320 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998625 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=933 bytes_read=4899 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000037 adj=50000865  heater_bed: target=0 temp=17.6 pwm=0.000 raspberry_pi: temp=38.1 mcu_temp: temp=25.6 sysload=1.63 cputime=6.472 memavail=558064 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.8 pwm=0.000
Stats 51.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000016 mcu_task_stddev=0.000013 bytes_write=5751 bytes_read=9803 bytes_retransmit=9 bytes_invalid=0 send_seq=323 receive_seq=323 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998610 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=939 bytes_read=4915 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000037 adj=50000892  heater_bed: target=0 temp=17.6 pwm=0.000 raspberry_pi: temp=38.1 mcu_temp: temp=25.7 sysload=1.63 cputime=6.498 memavail=552204 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.8 pwm=0.000
Stats 52.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000016 mcu_task_stddev=0.000013 bytes_write=5757 bytes_read=9951 bytes_retransmit=9 bytes_invalid=0 send_seq=324 receive_seq=324 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998606 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=945 bytes_read=4931 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000030 adj=50001020  heater_bed: target=0 temp=17.5 pwm=0.000 raspberry_pi: temp=38.6 mcu_temp: temp=25.8 sysload=1.63 cputime=6.523 memavail=546148 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 53.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=5777 bytes_read=10134 bytes_retransmit=9 bytes_invalid=0 send_seq=326 receive_seq=326 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998608 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=951 bytes_read=4947 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000009 adj=50000948  heater_bed: target=0 temp=17.5 pwm=0.000 raspberry_pi: temp=38.1 mcu_temp: temp=25.9 sysload=1.63 cputime=6.549 memavail=545908 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 54.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=5797 bytes_read=10316 bytes_retransmit=9 bytes_invalid=0 send_seq=328 receive_seq=328 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998606 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=957 bytes_read=4976 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999989 adj=50000850  heater_bed: target=0 temp=17.4 pwm=0.000 raspberry_pi: temp=38.1 mcu_temp: temp=25.7 sysload=1.63 cputime=6.577 memavail=533280 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.7 pwm=0.000
Stats 55.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=5817 bytes_read=10469 bytes_retransmit=9 bytes_invalid=0 send_seq=330 receive_seq=330 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998610 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=963 bytes_read=4992 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999983 adj=50000453  heater_bed: target=0 temp=17.3 pwm=0.000 raspberry_pi: temp=38.6 mcu_temp: temp=25.7 sysload=1.58 cputime=6.604 memavail=543432 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.5 pwm=0.000
Stats 56.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=5823 bytes_read=10632 bytes_retransmit=9 bytes_invalid=0 send_seq=331 receive_seq=331 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998608 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=969 bytes_read=5008 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999972 adj=50000550  heater_bed: target=0 temp=17.6 pwm=0.000 raspberry_pi: temp=38.6 mcu_temp: temp=25.7 sysload=1.58 cputime=6.629 memavail=543044 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.9 pwm=0.000
Stats 57.2: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=5829 bytes_read=10809 bytes_retransmit=9 bytes_invalid=0 send_seq=332 receive_seq=332 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998610 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=975 bytes_read=5024 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=50000002 adj=50000617  heater_bed: target=0 temp=17.7 pwm=0.000 raspberry_pi: temp=38.6 mcu_temp: temp=25.7 sysload=1.58 cputime=6.662 memavail=490708 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=16.8 pwm=0.000
