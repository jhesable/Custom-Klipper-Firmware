===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Loaded MCU 'mcu' 106 commands (v0.12.0-113-g28f06a10 / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'mcu' (1024 moves)
Loaded MCU 'rpi' 112 commands (v0.12.0-111-g4f00f219 / gcc: (Raspbian 10.2.1-6+rpi1) 10.2.1 20210110 binutils: (GNU Binutils for Raspbian) 2.35.2)
MCU 'rpi' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
Configured MCU 'rpi' (1024 moves)
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
webhooks client 1964428400: {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
=============== Log rollover at Fri Feb 23 03:44:57 2024 ===============
Stats 42.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000018 mcu_task_stddev=0.000019 bytes_write=5603 bytes_read=8505 bytes_retransmit=9 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998500 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=897 bytes_read=4790 bytes_retransmit=0 bytes_invalid=0 send_seq=125 receive_seq=125 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999805 adj=50001461  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=31.1 mcu_temp: temp=25.8 sysload=1.60 cputime=5.769 memavail=699836 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 43.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000018 mcu_task_stddev=0.000019 bytes_write=5609 bytes_read=8668 bytes_retransmit=9 bytes_invalid=0 send_seq=294 receive_seq=294 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998488 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=903 bytes_read=4806 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=126 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999816 adj=50001350  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=25.5 sysload=1.60 cputime=5.808 memavail=695496 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 44.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000018 mcu_task_stddev=0.000019 bytes_write=5634 bytes_read=8826 bytes_retransmit=9 bytes_invalid=0 send_seq=297 receive_seq=297 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998490 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=909 bytes_read=4822 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999823 adj=50001355  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=30.6 mcu_temp: temp=25.6 sysload=1.60 cputime=5.842 memavail=694540 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 45.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000018 mcu_task_stddev=0.000019 bytes_write=5640 bytes_read=9003 bytes_retransmit=9 bytes_invalid=0 send_seq=298 receive_seq=298 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998499 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=915 bytes_read=4838 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999892 adj=50001293  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=30.0 mcu_temp: temp=25.6 sysload=1.47 cputime=5.881 memavail=694108 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 46.3: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000018 mcu_task_stddev=0.000019 bytes_write=5646 bytes_read=9166 bytes_retransmit=9 bytes_invalid=0 send_seq=299 receive_seq=299 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998504 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=921 bytes_read=4854 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999879 adj=50001543  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=30.0 mcu_temp: temp=25.5 sysload=1.47 cputime=5.921 memavail=693604 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 47.3: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000016 mcu_task_stddev=0.000013 bytes_write=5652 bytes_read=9329 bytes_retransmit=9 bytes_invalid=0 send_seq=300 receive_seq=300 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998507 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000009 bytes_write=927 bytes_read=4870 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999890 adj=50001333  heater_bed: target=0 temp=20.7 pwm=0.000 raspberry_pi: temp=30.6 mcu_temp: temp=25.8 sysload=1.47 cputime=5.960 memavail=693604 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 48.3: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000016 mcu_task_stddev=0.000013 bytes_write=5658 bytes_read=9506 bytes_retransmit=9 bytes_invalid=0 send_seq=301 receive_seq=301 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998520 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=933 bytes_read=4899 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999895 adj=50001308  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=30.0 mcu_temp: temp=25.5 sysload=1.47 cputime=6.000 memavail=693356 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.4 pwm=0.000
Stats 49.3: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000016 mcu_task_stddev=0.000013 bytes_write=5664 bytes_read=9669 bytes_retransmit=9 bytes_invalid=0 send_seq=302 receive_seq=302 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998516 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=939 bytes_read=4915 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999904 adj=50001217  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=30.0 mcu_temp: temp=25.7 sysload=1.47 cputime=6.040 memavail=692864 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 50.3: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000016 mcu_task_stddev=0.000013 bytes_write=5689 bytes_read=9827 bytes_retransmit=9 bytes_invalid=0 send_seq=305 receive_seq=305 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998509 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=945 bytes_read=4931 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999911 adj=50001248  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=30.0 mcu_temp: temp=25.6 sysload=1.35 cputime=6.081 memavail=697252 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 51.3: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000016 mcu_task_stddev=0.000013 bytes_write=5709 bytes_read=10009 bytes_retransmit=9 bytes_invalid=0 send_seq=307 receive_seq=307 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998505 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=951 bytes_read=4947 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999919 adj=50001278  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=30.0 mcu_temp: temp=25.9 sysload=1.35 cputime=6.118 memavail=697000 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 52.3: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=5715 bytes_read=10187 bytes_retransmit=9 bytes_invalid=0 send_seq=308 receive_seq=308 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998498 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=957 bytes_read=4963 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999909 adj=50001296  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=30.0 mcu_temp: temp=25.6 sysload=1.35 cputime=6.146 memavail=697000 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 53.3: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=5721 bytes_read=10335 bytes_retransmit=9 bytes_invalid=0 send_seq=309 receive_seq=309 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998502 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=963 bytes_read=4992 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999915 adj=50001216  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=30.0 mcu_temp: temp=25.8 sysload=1.35 cputime=6.186 memavail=697000 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 54.3: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=5727 bytes_read=10512 bytes_retransmit=9 bytes_invalid=0 send_seq=310 receive_seq=310 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998507 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=969 bytes_read=5008 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999917 adj=50000848  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=28.9 mcu_temp: temp=25.8 sysload=1.35 cputime=6.229 memavail=696496 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 55.3: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=5733 bytes_read=10675 bytes_retransmit=9 bytes_invalid=0 send_seq=311 receive_seq=311 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998508 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=975 bytes_read=5024 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999914 adj=50000889  heater_bed: target=0 temp=20.8 pwm=0.000 raspberry_pi: temp=30.0 mcu_temp: temp=25.7 sysload=1.25 cputime=6.272 memavail=696004 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 56.3: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=5758 bytes_read=10833 bytes_retransmit=9 bytes_invalid=0 send_seq=314 receive_seq=314 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998509 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=981 bytes_read=5040 bytes_retransmit=0 bytes_invalid=0 send_seq=139 receive_seq=139 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999914 adj=50000914  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=29.5 mcu_temp: temp=25.7 sysload=1.25 cputime=6.315 memavail=695756 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
TMC 'stepper_z' reports GSTAT:      00000001 reset=1(Reset)
TMC 'stepper_z' reports GSTAT:      00000000
Stats 194.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000019 mcu_task_stddev=0.000037 bytes_write=8292 bytes_read=34636 bytes_retransmit=9 bytes_invalid=0 send_seq=591 receive_seq=591 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998571 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1827 bytes_read=7648 bytes_retransmit=0 bytes_invalid=0 send_seq=280 receive_seq=280 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999339 adj=50000058  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.0 sysload=0.40 cputime=11.872 memavail=699484 print_time=199.281 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 195.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000019 mcu_task_stddev=0.000037 bytes_write=8326 bytes_read=34845 bytes_retransmit=9 bytes_invalid=0 send_seq=594 receive_seq=594 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1833 bytes_read=7664 bytes_retransmit=0 bytes_invalid=0 send_seq=281 receive_seq=281 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999336 adj=50000179  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=26.7 sysload=0.40 cputime=11.907 memavail=698488 print_time=199.281 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.8 pwm=0.000
TMC 'stepper_x' reports GSTAT:      00000001 reset=1(Reset)
TMC 'stepper_x' reports GSTAT:      00000000
Stats 196.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000019 mcu_task_stddev=0.000037 bytes_write=8999 bytes_read=35630 bytes_retransmit=9 bytes_invalid=0 send_seq=638 receive_seq=638 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1839 bytes_read=7680 bytes_retransmit=0 bytes_invalid=0 send_seq=282 receive_seq=282 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999331 adj=50000151  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=26.9 sysload=0.37 cputime=12.012 memavail=698496 print_time=199.931 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.4 pwm=0.000
Stats 197.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000019 mcu_task_stddev=0.000037 bytes_write=9468 bytes_read=36232 bytes_retransmit=9 bytes_invalid=0 send_seq=676 receive_seq=676 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998571 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1845 bytes_read=7696 bytes_retransmit=0 bytes_invalid=0 send_seq=283 receive_seq=283 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999326 adj=50000131  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=26.7 sysload=0.37 cputime=12.092 memavail=697992 print_time=200.931 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 198.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000019 mcu_task_stddev=0.000037 bytes_write=9933 bytes_read=36809 bytes_retransmit=9 bytes_invalid=0 send_seq=714 receive_seq=714 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998571 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1851 bytes_read=7712 bytes_retransmit=0 bytes_invalid=0 send_seq=284 receive_seq=284 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999325 adj=50000112  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.0 sysload=0.37 cputime=12.167 memavail=697748 print_time=201.931 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 199.4: gcodein=0  mcu: mcu_awake=0.015 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=10409 bytes_read=37406 bytes_retransmit=9 bytes_invalid=0 send_seq=753 receive_seq=753 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1857 bytes_read=7741 bytes_retransmit=0 bytes_invalid=0 send_seq=285 receive_seq=285 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999320 adj=50000172  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=31.1 mcu_temp: temp=26.8 sysload=0.37 cputime=12.246 memavail=697748 print_time=202.931 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 200.4: gcodein=0  mcu: mcu_awake=0.015 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=10938 bytes_read=38009 bytes_retransmit=9 bytes_invalid=0 send_seq=789 receive_seq=789 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=38 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1863 bytes_read=7757 bytes_retransmit=0 bytes_invalid=0 send_seq=286 receive_seq=286 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999318 adj=49999966  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.0 sysload=0.37 cputime=12.328 memavail=697256 print_time=204.059 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
TMC 'stepper_y' reports GSTAT:      00000001 reset=1(Reset)
TMC 'stepper_y' reports GSTAT:      00000000
Stats 201.4: gcodein=0  mcu: mcu_awake=0.015 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=11832 bytes_read=38957 bytes_retransmit=9 bytes_invalid=0 send_seq=845 receive_seq=845 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998566 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1869 bytes_read=7773 bytes_retransmit=0 bytes_invalid=0 send_seq=287 receive_seq=287 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999316 adj=50000082  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=31.1 mcu_temp: temp=26.8 sysload=0.34 cputime=12.465 memavail=697004 print_time=204.908 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 202.4: gcodein=0  mcu: mcu_awake=0.015 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=12333 bytes_read=39585 bytes_retransmit=9 bytes_invalid=0 send_seq=884 receive_seq=884 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998564 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1875 bytes_read=7789 bytes_retransmit=0 bytes_invalid=0 send_seq=288 receive_seq=288 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999317 adj=50000152  heater_bed: target=0 temp=20.1 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=26.9 sysload=0.34 cputime=12.547 memavail=696752 print_time=205.908 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 203.4: gcodein=0  mcu: mcu_awake=0.015 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=12903 bytes_read=40194 bytes_retransmit=9 bytes_invalid=0 send_seq=918 receive_seq=918 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998562 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1881 bytes_read=7805 bytes_retransmit=0 bytes_invalid=0 send_seq=289 receive_seq=289 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999316 adj=50000266  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=26.8 sysload=0.34 cputime=12.633 memavail=696760 print_time=206.933 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 204.4: gcodein=0  mcu: mcu_awake=0.020 mcu_task_avg=0.000018 mcu_task_stddev=0.000023 bytes_write=13563 bytes_read=40694 bytes_retransmit=9 bytes_invalid=0 send_seq=944 receive_seq=944 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=26 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1887 bytes_read=7834 bytes_retransmit=0 bytes_invalid=0 send_seq=290 receive_seq=290 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999315 adj=50000300  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=26.9 sysload=0.34 cputime=12.719 memavail=696508 print_time=209.322 buffer_time=1.595 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 205.4: gcodein=0  mcu: mcu_awake=0.020 mcu_task_avg=0.000018 mcu_task_stddev=0.000023 bytes_write=13653 bytes_read=40980 bytes_retransmit=9 bytes_invalid=0 send_seq=951 receive_seq=951 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=26 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1893 bytes_read=7850 bytes_retransmit=0 bytes_invalid=0 send_seq=291 receive_seq=291 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999314 adj=50000296  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=31.1 mcu_temp: temp=26.8 sysload=0.34 cputime=12.777 memavail=696260 print_time=209.322 buffer_time=0.595 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 206.4: gcodein=0  mcu: mcu_awake=0.020 mcu_task_avg=0.000018 mcu_task_stddev=0.000023 bytes_write=13770 bytes_read=41305 bytes_retransmit=9 bytes_invalid=0 send_seq=960 receive_seq=960 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=18 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1899 bytes_read=7866 bytes_retransmit=0 bytes_invalid=0 send_seq=292 receive_seq=292 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999316 adj=50000292  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.0 sysload=0.31 cputime=12.838 memavail=695768 print_time=209.322 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 207.4: gcodein=0  mcu: mcu_awake=0.020 mcu_task_avg=0.000018 mcu_task_stddev=0.000023 bytes_write=14050 bytes_read=41760 bytes_retransmit=9 bytes_invalid=0 send_seq=980 receive_seq=980 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1905 bytes_read=7882 bytes_retransmit=0 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999317 adj=50000323  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=31.1 mcu_temp: temp=26.9 sysload=0.31 cputime=12.908 memavail=695776 print_time=211.086 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 208.4: gcodein=0  mcu: mcu_awake=0.020 mcu_task_avg=0.000018 mcu_task_stddev=0.000023 bytes_write=14510 bytes_read=42297 bytes_retransmit=9 bytes_invalid=0 send_seq=1012 receive_seq=1012 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1911 bytes_read=7898 bytes_retransmit=0 bytes_invalid=0 send_seq=294 receive_seq=294 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999317 adj=50000369  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.0 sysload=0.31 cputime=12.981 memavail=695524 print_time=211.936 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 209.4: gcodein=0  mcu: mcu_awake=0.011 mcu_task_avg=0.000018 mcu_task_stddev=0.000016 bytes_write=15023 bytes_read=42988 bytes_retransmit=9 bytes_invalid=0 send_seq=1052 receive_seq=1052 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1917 bytes_read=7927 bytes_retransmit=0 bytes_invalid=0 send_seq=295 receive_seq=295 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999317 adj=50000387  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.0 sysload=0.31 cputime=13.061 memavail=695028 print_time=212.936 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 210.4: gcodein=0  mcu: mcu_awake=0.011 mcu_task_avg=0.000018 mcu_task_stddev=0.000016 bytes_write=15529 bytes_read=43636 bytes_retransmit=9 bytes_invalid=0 send_seq=1092 receive_seq=1092 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998566 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1923 bytes_read=7943 bytes_retransmit=0 bytes_invalid=0 send_seq=296 receive_seq=296 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999316 adj=50000410  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=31.1 mcu_temp: temp=27.1 sysload=0.31 cputime=13.145 memavail=695028 print_time=213.936 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 211.4: gcodein=0  mcu: mcu_awake=0.011 mcu_task_avg=0.000018 mcu_task_stddev=0.000016 bytes_write=16085 bytes_read=44355 bytes_retransmit=9 bytes_invalid=0 send_seq=1137 receive_seq=1137 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=38 upcoming_bytes=8 freq=63998566 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1929 bytes_read=7959 bytes_retransmit=0 bytes_invalid=0 send_seq=297 receive_seq=297 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999317 adj=50000432  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.2 sysload=0.29 cputime=13.231 memavail=694536 print_time=214.902 buffer_time=0.171 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 212.4: gcodein=0  mcu: mcu_awake=0.011 mcu_task_avg=0.000018 mcu_task_stddev=0.000016 bytes_write=16517 bytes_read=44825 bytes_retransmit=9 bytes_invalid=0 send_seq=1155 receive_seq=1155 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=8 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1935 bytes_read=7975 bytes_retransmit=0 bytes_invalid=0 send_seq=298 receive_seq=298 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999322 adj=50000447  heater_bed: target=0 temp=20.1 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.0 sysload=0.29 cputime=13.310 memavail=694540 print_time=217.508 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 213.4: gcodein=0  mcu: mcu_awake=0.011 mcu_task_avg=0.000018 mcu_task_stddev=0.000016 bytes_write=16630 bytes_read=45136 bytes_retransmit=9 bytes_invalid=0 send_seq=1164 receive_seq=1164 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=8 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1941 bytes_read=7991 bytes_retransmit=0 bytes_invalid=0 send_seq=299 receive_seq=299 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999323 adj=50000469  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.2 sysload=0.29 cputime=13.369 memavail=694036 print_time=217.508 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 214.4: gcodein=0  mcu: mcu_awake=0.014 mcu_task_avg=0.000018 mcu_task_stddev=0.000018 bytes_write=16897 bytes_read=45548 bytes_retransmit=9 bytes_invalid=0 send_seq=1182 receive_seq=1182 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=1947 bytes_read=8020 bytes_retransmit=0 bytes_invalid=0 send_seq=300 receive_seq=300 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999324 adj=50000485  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.2 sysload=0.29 cputime=13.437 memavail=694044 print_time=217.908 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 215.4: gcodein=0  mcu: mcu_awake=0.014 mcu_task_avg=0.000018 mcu_task_stddev=0.000018 bytes_write=17378 bytes_read=46205 bytes_retransmit=9 bytes_invalid=0 send_seq=1221 receive_seq=1221 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998564 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=1953 bytes_read=8036 bytes_retransmit=0 bytes_invalid=0 send_seq=301 receive_seq=301 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999323 adj=50000532  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.0 sysload=0.29 cputime=13.501 memavail=694040 print_time=218.908 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 216.4: gcodein=0  mcu: mcu_awake=0.014 mcu_task_avg=0.000018 mcu_task_stddev=0.000018 bytes_write=17931 bytes_read=46915 bytes_retransmit=9 bytes_invalid=0 send_seq=1264 receive_seq=1264 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998563 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=1959 bytes_read=8052 bytes_retransmit=0 bytes_invalid=0 send_seq=302 receive_seq=302 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999322 adj=50000521  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.2 sysload=0.26 cputime=13.566 memavail=693796 print_time=219.766 buffer_time=0.032 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 217.4: gcodein=0  mcu: mcu_awake=0.014 mcu_task_avg=0.000018 mcu_task_stddev=0.000018 bytes_write=18220 bytes_read=47345 bytes_retransmit=9 bytes_invalid=0 send_seq=1282 receive_seq=1282 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998563 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=1965 bytes_read=8068 bytes_retransmit=0 bytes_invalid=0 send_seq=303 receive_seq=303 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999322 adj=50000495  heater_bed: target=0 temp=20.7 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.2 sysload=0.26 cputime=13.634 memavail=693796 print_time=222.224 buffer_time=1.489 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 218.4: gcodein=0  mcu: mcu_awake=0.014 mcu_task_avg=0.000018 mcu_task_stddev=0.000018 bytes_write=18310 bytes_read=47660 bytes_retransmit=9 bytes_invalid=0 send_seq=1289 receive_seq=1289 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998565 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=1971 bytes_read=8084 bytes_retransmit=0 bytes_invalid=0 send_seq=304 receive_seq=304 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999323 adj=50000476  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.3 sysload=0.26 cputime=13.694 memavail=693796 print_time=222.224 buffer_time=0.488 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 219.4: gcodein=0  mcu: mcu_awake=0.013 mcu_task_avg=0.000017 mcu_task_stddev=0.000016 bytes_write=18461 bytes_read=47981 bytes_retransmit=9 bytes_invalid=0 send_seq=1297 receive_seq=1297 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998566 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000008 bytes_write=1977 bytes_read=8113 bytes_retransmit=0 bytes_invalid=0 send_seq=305 receive_seq=305 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999331 adj=50000475  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.26 cputime=13.757 memavail=693332 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 220.4: gcodein=0  mcu: mcu_awake=0.013 mcu_task_avg=0.000017 mcu_task_stddev=0.000016 bytes_write=18584 bytes_read=48277 bytes_retransmit=9 bytes_invalid=0 send_seq=1306 receive_seq=1306 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998566 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000008 bytes_write=1983 bytes_read=8129 bytes_retransmit=0 bytes_invalid=0 send_seq=306 receive_seq=306 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999335 adj=50000582  heater_bed: target=0 temp=19.7 pwm=0.000 raspberry_pi: temp=31.1 mcu_temp: temp=27.4 sysload=0.26 cputime=13.818 memavail=693336 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 221.4: gcodein=0  mcu: mcu_awake=0.013 mcu_task_avg=0.000017 mcu_task_stddev=0.000016 bytes_write=18674 bytes_read=48592 bytes_retransmit=9 bytes_invalid=0 send_seq=1313 receive_seq=1313 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998566 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000008 bytes_write=1989 bytes_read=8145 bytes_retransmit=0 bytes_invalid=0 send_seq=307 receive_seq=307 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999339 adj=50000608  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.24 cputime=13.877 memavail=693336 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 222.4: gcodein=0  mcu: mcu_awake=0.013 mcu_task_avg=0.000017 mcu_task_stddev=0.000016 bytes_write=18764 bytes_read=48893 bytes_retransmit=9 bytes_invalid=0 send_seq=1320 receive_seq=1320 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998565 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000008 bytes_write=1995 bytes_read=8161 bytes_retransmit=0 bytes_invalid=0 send_seq=308 receive_seq=308 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999343 adj=50000632  heater_bed: target=0 temp=20.7 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.4 sysload=0.24 cputime=13.937 memavail=693340 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 223.4: gcodein=0  mcu: mcu_awake=0.013 mcu_task_avg=0.000017 mcu_task_stddev=0.000016 bytes_write=18854 bytes_read=49194 bytes_retransmit=9 bytes_invalid=0 send_seq=1327 receive_seq=1327 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998565 rpi: mcu_awake=0.000 mcu_task_avg=0.000009 mcu_task_stddev=0.000008 bytes_write=2001 bytes_read=8177 bytes_retransmit=0 bytes_invalid=0 send_seq=309 receive_seq=309 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999345 adj=50000652  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.4 sysload=0.24 cputime=13.995 memavail=693340 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 224.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000018 mcu_task_stddev=0.000032 bytes_write=18977 bytes_read=49524 bytes_retransmit=9 bytes_invalid=0 send_seq=1337 receive_seq=1337 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998562 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2007 bytes_read=8206 bytes_retransmit=0 bytes_invalid=0 send_seq=310 receive_seq=310 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999348 adj=50000648  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.3 sysload=0.24 cputime=14.045 memavail=693348 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 225.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000018 mcu_task_stddev=0.000032 bytes_write=19067 bytes_read=49825 bytes_retransmit=9 bytes_invalid=0 send_seq=1344 receive_seq=1344 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998562 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2013 bytes_read=8222 bytes_retransmit=0 bytes_invalid=0 send_seq=311 receive_seq=311 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999347 adj=50000669  heater_bed: target=0 temp=20.1 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.2 sysload=0.24 cputime=14.092 memavail=697488 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 226.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000018 mcu_task_stddev=0.000032 bytes_write=19157 bytes_read=50126 bytes_retransmit=9 bytes_invalid=0 send_seq=1351 receive_seq=1351 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998564 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2019 bytes_read=8238 bytes_retransmit=0 bytes_invalid=0 send_seq=312 receive_seq=312 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999352 adj=50000619  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.5 sysload=0.22 cputime=14.150 memavail=697488 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.8 pwm=0.000
Stats 227.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000018 mcu_task_stddev=0.000032 bytes_write=19247 bytes_read=50426 bytes_retransmit=9 bytes_invalid=0 send_seq=1358 receive_seq=1358 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2025 bytes_read=8254 bytes_retransmit=0 bytes_invalid=0 send_seq=313 receive_seq=313 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999358 adj=50000644  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.5 sysload=0.22 cputime=14.211 memavail=697488 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 228.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000018 mcu_task_stddev=0.000032 bytes_write=19337 bytes_read=50727 bytes_retransmit=9 bytes_invalid=0 send_seq=1365 receive_seq=1365 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2031 bytes_read=8270 bytes_retransmit=0 bytes_invalid=0 send_seq=314 receive_seq=314 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999361 adj=50000642  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.22 cputime=14.271 memavail=697492 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 229.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000017 mcu_task_stddev=0.000014 bytes_write=19446 bytes_read=51053 bytes_retransmit=9 bytes_invalid=0 send_seq=1374 receive_seq=1374 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2037 bytes_read=8299 bytes_retransmit=0 bytes_invalid=0 send_seq=315 receive_seq=315 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999366 adj=50000640  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.5 sysload=0.22 cputime=14.334 memavail=697492 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 230.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000017 mcu_task_stddev=0.000014 bytes_write=19555 bytes_read=51363 bytes_retransmit=9 bytes_invalid=0 send_seq=1383 receive_seq=1383 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2043 bytes_read=8315 bytes_retransmit=0 bytes_invalid=0 send_seq=316 receive_seq=316 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999367 adj=50000675  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.6 sysload=0.22 cputime=14.393 memavail=697492 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 231.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000017 mcu_task_stddev=0.000014 bytes_write=19645 bytes_read=51664 bytes_retransmit=9 bytes_invalid=0 send_seq=1390 receive_seq=1390 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2049 bytes_read=8331 bytes_retransmit=0 bytes_invalid=0 send_seq=317 receive_seq=317 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999370 adj=50000645  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.20 cputime=14.453 memavail=697504 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 232.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000017 mcu_task_stddev=0.000014 bytes_write=19735 bytes_read=51965 bytes_retransmit=9 bytes_invalid=0 send_seq=1397 receive_seq=1397 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2055 bytes_read=8347 bytes_retransmit=0 bytes_invalid=0 send_seq=318 receive_seq=318 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999374 adj=50000643  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.20 cputime=14.512 memavail=697504 print_time=222.224 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 233.4: gcodein=0  mcu: mcu_awake=0.007 mcu_task_avg=0.000017 mcu_task_stddev=0.000014 bytes_write=19803 bytes_read=52142 bytes_retransmit=9 bytes_invalid=0 send_seq=1401 receive_seq=1401 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2061 bytes_read=8363 bytes_retransmit=0 bytes_invalid=0 send_seq=319 receive_seq=319 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999377 adj=50000680  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.20 cputime=14.559 memavail=697504 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 234.4: gcodein=0  mcu: mcu_awake=0.008 mcu_task_avg=0.000020 mcu_task_stddev=0.000045 bytes_write=19842 bytes_read=52330 bytes_retransmit=9 bytes_invalid=0 send_seq=1404 receive_seq=1404 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=2067 bytes_read=8392 bytes_retransmit=0 bytes_invalid=0 send_seq=320 receive_seq=320 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999380 adj=50000659  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.7 sysload=0.20 cputime=14.602 memavail=697508 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 235.4: gcodein=0  mcu: mcu_awake=0.008 mcu_task_avg=0.000020 mcu_task_stddev=0.000045 bytes_write=19848 bytes_read=52493 bytes_retransmit=9 bytes_invalid=0 send_seq=1405 receive_seq=1405 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998572 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=2073 bytes_read=8408 bytes_retransmit=0 bytes_invalid=0 send_seq=321 receive_seq=321 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999383 adj=50000651  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.4 sysload=0.20 cputime=14.643 memavail=697516 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 236.4: gcodein=0  mcu: mcu_awake=0.008 mcu_task_avg=0.000020 mcu_task_stddev=0.000045 bytes_write=19854 bytes_read=52670 bytes_retransmit=9 bytes_invalid=0 send_seq=1406 receive_seq=1406 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998573 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=2079 bytes_read=8424 bytes_retransmit=0 bytes_invalid=0 send_seq=322 receive_seq=322 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999388 adj=50000651  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.4 sysload=0.19 cputime=14.684 memavail=697516 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 237.4: gcodein=0  mcu: mcu_awake=0.008 mcu_task_avg=0.000020 mcu_task_stddev=0.000045 bytes_write=19860 bytes_read=52818 bytes_retransmit=9 bytes_invalid=0 send_seq=1407 receive_seq=1407 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998572 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=2085 bytes_read=8440 bytes_retransmit=0 bytes_invalid=0 send_seq=323 receive_seq=323 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999393 adj=50000676  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.19 cputime=14.725 memavail=697516 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 238.4: gcodein=0  mcu: mcu_awake=0.008 mcu_task_avg=0.000020 mcu_task_stddev=0.000045 bytes_write=19866 bytes_read=52981 bytes_retransmit=9 bytes_invalid=0 send_seq=1408 receive_seq=1408 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998572 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000009 bytes_write=2091 bytes_read=8456 bytes_retransmit=0 bytes_invalid=0 send_seq=324 receive_seq=324 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999396 adj=50000707  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.5 sysload=0.19 cputime=14.766 memavail=697516 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 239.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=19872 bytes_read=53172 bytes_retransmit=9 bytes_invalid=0 send_seq=1409 receive_seq=1409 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998572 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2097 bytes_read=8485 bytes_retransmit=0 bytes_invalid=0 send_seq=325 receive_seq=325 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999402 adj=50000719  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.4 sysload=0.19 cputime=14.809 memavail=697280 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 240.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=19878 bytes_read=53320 bytes_retransmit=9 bytes_invalid=0 send_seq=1410 receive_seq=1410 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998571 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2103 bytes_read=8501 bytes_retransmit=0 bytes_invalid=0 send_seq=326 receive_seq=326 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999405 adj=50000747  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.8 sysload=0.19 cputime=14.848 memavail=697280 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 241.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=19884 bytes_read=53483 bytes_retransmit=9 bytes_invalid=0 send_seq=1411 receive_seq=1411 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998571 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2109 bytes_read=8517 bytes_retransmit=0 bytes_invalid=0 send_seq=327 receive_seq=327 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999409 adj=50000749  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.7 sysload=0.17 cputime=14.890 memavail=697028 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 242.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=19890 bytes_read=53660 bytes_retransmit=9 bytes_invalid=0 send_seq=1412 receive_seq=1412 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998573 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2115 bytes_read=8533 bytes_retransmit=0 bytes_invalid=0 send_seq=328 receive_seq=328 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999414 adj=50000764  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.8 sysload=0.17 cputime=14.931 memavail=696776 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 243.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=19896 bytes_read=53808 bytes_retransmit=9 bytes_invalid=0 send_seq=1413 receive_seq=1413 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998572 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2121 bytes_read=8549 bytes_retransmit=0 bytes_invalid=0 send_seq=329 receive_seq=329 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999421 adj=50000763  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.8 sysload=0.17 cputime=14.970 memavail=696528 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 244.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=19902 bytes_read=53985 bytes_retransmit=9 bytes_invalid=0 send_seq=1414 receive_seq=1414 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998573 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2127 bytes_read=8578 bytes_retransmit=0 bytes_invalid=0 send_seq=330 receive_seq=330 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999427 adj=50000814  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.8 sysload=0.17 cputime=15.011 memavail=696300 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 245.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=19941 bytes_read=54177 bytes_retransmit=9 bytes_invalid=0 send_seq=1418 receive_seq=1418 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998572 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2133 bytes_read=8594 bytes_retransmit=0 bytes_invalid=0 send_seq=331 receive_seq=331 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999433 adj=50000843  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.6 sysload=0.17 cputime=15.054 memavail=695320 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 246.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=19947 bytes_read=54325 bytes_retransmit=9 bytes_invalid=0 send_seq=1419 receive_seq=1419 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998572 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2139 bytes_read=8610 bytes_retransmit=0 bytes_invalid=0 send_seq=332 receive_seq=332 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999439 adj=50000865  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.16 cputime=15.094 memavail=695328 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 247.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=19953 bytes_read=54488 bytes_retransmit=9 bytes_invalid=0 send_seq=1420 receive_seq=1420 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998572 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2151 bytes_read=8642 bytes_retransmit=0 bytes_invalid=0 send_seq=334 receive_seq=334 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999450 adj=50000886  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.8 sysload=0.16 cputime=15.135 memavail=695328 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 248.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=19959 bytes_read=54665 bytes_retransmit=9 bytes_invalid=0 send_seq=1421 receive_seq=1421 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998572 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2157 bytes_read=8658 bytes_retransmit=0 bytes_invalid=0 send_seq=335 receive_seq=335 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999455 adj=50000966  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.7 sysload=0.16 cputime=15.175 memavail=695076 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 249.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=19965 bytes_read=54813 bytes_retransmit=9 bytes_invalid=0 send_seq=1422 receive_seq=1422 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998571 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2163 bytes_read=8687 bytes_retransmit=0 bytes_invalid=0 send_seq=336 receive_seq=336 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999461 adj=50000949  heater_bed: target=0 temp=20.7 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.6 sysload=0.16 cputime=15.217 memavail=694840 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 250.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=19971 bytes_read=54991 bytes_retransmit=9 bytes_invalid=0 send_seq=1423 receive_seq=1423 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998571 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2169 bytes_read=8703 bytes_retransmit=0 bytes_invalid=0 send_seq=337 receive_seq=337 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999465 adj=50000955  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.16 cputime=15.258 memavail=694336 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 251.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=20015 bytes_read=55188 bytes_retransmit=9 bytes_invalid=0 send_seq=1428 receive_seq=1428 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2175 bytes_read=8719 bytes_retransmit=0 bytes_invalid=0 send_seq=338 receive_seq=338 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999469 adj=50000931  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.14 cputime=15.300 memavail=694084 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 252.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=20021 bytes_read=55336 bytes_retransmit=9 bytes_invalid=0 send_seq=1429 receive_seq=1429 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2181 bytes_read=8735 bytes_retransmit=0 bytes_invalid=0 send_seq=339 receive_seq=339 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999474 adj=50000912  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.14 cputime=15.339 memavail=694084 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 253.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=20027 bytes_read=55499 bytes_retransmit=9 bytes_invalid=0 send_seq=1430 receive_seq=1430 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998572 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2187 bytes_read=8751 bytes_retransmit=0 bytes_invalid=0 send_seq=340 receive_seq=340 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999478 adj=50000896  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.8 sysload=0.14 cputime=15.381 memavail=693840 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 254.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=20033 bytes_read=55676 bytes_retransmit=9 bytes_invalid=0 send_seq=1431 receive_seq=1431 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998572 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2193 bytes_read=8780 bytes_retransmit=0 bytes_invalid=0 send_seq=341 receive_seq=341 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999479 adj=50000874  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.14 cputime=15.418 memavail=693356 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.8 pwm=0.000
Stats 255.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000015 bytes_write=20039 bytes_read=55839 bytes_retransmit=9 bytes_invalid=0 send_seq=1432 receive_seq=1432 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2199 bytes_read=8796 bytes_retransmit=0 bytes_invalid=0 send_seq=342 receive_seq=342 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999485 adj=50000814  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.7 sysload=0.14 cputime=15.449 memavail=693356 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 256.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000015 bytes_write=20045 bytes_read=56002 bytes_retransmit=9 bytes_invalid=0 send_seq=1433 receive_seq=1433 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2205 bytes_read=8812 bytes_retransmit=0 bytes_invalid=0 send_seq=343 receive_seq=343 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999490 adj=50000873  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.13 cputime=15.490 memavail=693356 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 257.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000015 bytes_write=20051 bytes_read=56179 bytes_retransmit=9 bytes_invalid=0 send_seq=1434 receive_seq=1434 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998571 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2211 bytes_read=8828 bytes_retransmit=0 bytes_invalid=0 send_seq=344 receive_seq=344 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999496 adj=50000897  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.13 cputime=15.534 memavail=693112 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 258.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000015 bytes_write=20057 bytes_read=56327 bytes_retransmit=9 bytes_invalid=0 send_seq=1435 receive_seq=1435 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2217 bytes_read=8844 bytes_retransmit=0 bytes_invalid=0 send_seq=345 receive_seq=345 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999500 adj=50000901  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=31.1 mcu_temp: temp=27.6 sysload=0.13 cputime=15.574 memavail=693112 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 259.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000015 bytes_write=20063 bytes_read=56490 bytes_retransmit=9 bytes_invalid=0 send_seq=1436 receive_seq=1436 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000011 bytes_write=2223 bytes_read=8873 bytes_retransmit=0 bytes_invalid=0 send_seq=346 receive_seq=346 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999505 adj=50000907  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.8 sysload=0.13 cputime=15.617 memavail=697256 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 260.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20069 bytes_read=56681 bytes_retransmit=9 bytes_invalid=0 send_seq=1437 receive_seq=1437 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000011 bytes_write=2229 bytes_read=8889 bytes_retransmit=0 bytes_invalid=0 send_seq=347 receive_seq=347 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999510 adj=50000901  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.13 cputime=15.659 memavail=697016 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 261.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20075 bytes_read=56829 bytes_retransmit=9 bytes_invalid=0 send_seq=1438 receive_seq=1438 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000011 bytes_write=2235 bytes_read=8905 bytes_retransmit=0 bytes_invalid=0 send_seq=348 receive_seq=348 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999514 adj=50000914  heater_bed: target=0 temp=20.0 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.7 sysload=0.12 cputime=15.699 memavail=696764 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 262.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20081 bytes_read=56992 bytes_retransmit=9 bytes_invalid=0 send_seq=1439 receive_seq=1439 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000011 bytes_write=2241 bytes_read=8921 bytes_retransmit=0 bytes_invalid=0 send_seq=349 receive_seq=349 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999516 adj=50000903  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.7 sysload=0.12 cputime=15.739 memavail=696772 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 263.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20087 bytes_read=57169 bytes_retransmit=9 bytes_invalid=0 send_seq=1440 receive_seq=1440 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998571 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000011 bytes_write=2247 bytes_read=8937 bytes_retransmit=0 bytes_invalid=0 send_seq=350 receive_seq=350 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999520 adj=50000875  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.8 sysload=0.12 cputime=15.780 memavail=696268 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 264.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20093 bytes_read=57311 bytes_retransmit=9 bytes_invalid=0 send_seq=1441 receive_seq=1441 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998571 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2253 bytes_read=8966 bytes_retransmit=0 bytes_invalid=0 send_seq=351 receive_seq=351 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999524 adj=50000851  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.12 cputime=15.820 memavail=696020 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 265.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20113 bytes_read=57481 bytes_retransmit=9 bytes_invalid=0 send_seq=1443 receive_seq=1443 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2259 bytes_read=8982 bytes_retransmit=0 bytes_invalid=0 send_seq=352 receive_seq=352 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999528 adj=50000860  heater_bed: target=0 temp=20.9 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.12 cputime=15.863 memavail=695560 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 266.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20138 bytes_read=57656 bytes_retransmit=9 bytes_invalid=0 send_seq=1446 receive_seq=1446 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2265 bytes_read=8998 bytes_retransmit=0 bytes_invalid=0 send_seq=353 receive_seq=353 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999533 adj=50000880  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.11 cputime=15.906 memavail=695308 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 267.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20144 bytes_read=57794 bytes_retransmit=9 bytes_invalid=0 send_seq=1447 receive_seq=1447 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2271 bytes_read=9014 bytes_retransmit=0 bytes_invalid=0 send_seq=354 receive_seq=354 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999538 adj=50000914  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=31.1 mcu_temp: temp=27.8 sysload=0.11 cputime=15.947 memavail=695056 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 268.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20150 bytes_read=57950 bytes_retransmit=9 bytes_invalid=0 send_seq=1448 receive_seq=1448 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2277 bytes_read=9030 bytes_retransmit=0 bytes_invalid=0 send_seq=355 receive_seq=355 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999542 adj=50000939  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.7 sysload=0.11 cputime=15.989 memavail=694804 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 269.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20156 bytes_read=58127 bytes_retransmit=9 bytes_invalid=0 send_seq=1449 receive_seq=1449 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2283 bytes_read=9045 bytes_retransmit=0 bytes_invalid=0 send_seq=356 receive_seq=356 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999544 adj=50000928  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=31.6 mcu_temp: temp=27.4 sysload=0.11 cputime=16.034 memavail=694552 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 270.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=20162 bytes_read=58290 bytes_retransmit=9 bytes_invalid=0 send_seq=1450 receive_seq=1450 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2289 bytes_read=9073 bytes_retransmit=0 bytes_invalid=0 send_seq=357 receive_seq=357 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999547 adj=50000913  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.11 cputime=16.077 memavail=694072 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 271.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=20168 bytes_read=58453 bytes_retransmit=9 bytes_invalid=0 send_seq=1451 receive_seq=1451 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2295 bytes_read=9088 bytes_retransmit=0 bytes_invalid=0 send_seq=358 receive_seq=358 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999553 adj=50000900  heater_bed: target=0 temp=20.2 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.10 cputime=16.120 memavail=693820 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 272.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=20174 bytes_read=58630 bytes_retransmit=9 bytes_invalid=0 send_seq=1452 receive_seq=1452 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2301 bytes_read=9103 bytes_retransmit=0 bytes_invalid=0 send_seq=359 receive_seq=359 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999558 adj=50000934  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.10 cputime=16.163 memavail=693820 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 273.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=20186 bytes_read=58794 bytes_retransmit=9 bytes_invalid=0 send_seq=1454 receive_seq=1454 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2307 bytes_read=9118 bytes_retransmit=0 bytes_invalid=0 send_seq=360 receive_seq=360 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999563 adj=50000929  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.10 cputime=16.207 memavail=693568 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 274.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000017 bytes_write=20192 bytes_read=58957 bytes_retransmit=9 bytes_invalid=0 send_seq=1455 receive_seq=1455 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000011 bytes_write=2313 bytes_read=9134 bytes_retransmit=0 bytes_invalid=0 send_seq=361 receive_seq=361 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999567 adj=50000940  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.10 cputime=16.248 memavail=693064 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.8 pwm=0.000
Stats 275.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20198 bytes_read=59148 bytes_retransmit=9 bytes_invalid=0 send_seq=1456 receive_seq=1456 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998569 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2319 bytes_read=9163 bytes_retransmit=0 bytes_invalid=0 send_seq=362 receive_seq=362 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999574 adj=50000945  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.7 sysload=0.10 cputime=16.290 memavail=692836 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 276.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20204 bytes_read=59296 bytes_retransmit=9 bytes_invalid=0 send_seq=1457 receive_seq=1457 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2325 bytes_read=9179 bytes_retransmit=0 bytes_invalid=0 send_seq=363 receive_seq=363 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999581 adj=50000972  heater_bed: target=0 temp=20.0 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.09 cputime=16.330 memavail=692836 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 277.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20210 bytes_read=59459 bytes_retransmit=9 bytes_invalid=0 send_seq=1458 receive_seq=1458 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998570 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2331 bytes_read=9195 bytes_retransmit=0 bytes_invalid=0 send_seq=364 receive_seq=364 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999590 adj=50000997  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.7 sysload=0.09 cputime=16.370 memavail=692836 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 278.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20216 bytes_read=59636 bytes_retransmit=9 bytes_invalid=0 send_seq=1459 receive_seq=1459 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2337 bytes_read=9211 bytes_retransmit=0 bytes_invalid=0 send_seq=365 receive_seq=365 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999597 adj=50001063  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.09 cputime=16.411 memavail=692840 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 279.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20222 bytes_read=59784 bytes_retransmit=9 bytes_invalid=0 send_seq=1460 receive_seq=1460 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2343 bytes_read=9227 bytes_retransmit=0 bytes_invalid=0 send_seq=366 receive_seq=366 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999604 adj=50001110  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.09 cputime=16.452 memavail=692596 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 280.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20228 bytes_read=59961 bytes_retransmit=9 bytes_invalid=0 send_seq=1461 receive_seq=1461 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2349 bytes_read=9256 bytes_retransmit=0 bytes_invalid=0 send_seq=367 receive_seq=367 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999612 adj=50001114  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.09 cputime=16.493 memavail=697852 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 281.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20253 bytes_read=60148 bytes_retransmit=9 bytes_invalid=0 send_seq=1464 receive_seq=1464 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2355 bytes_read=9272 bytes_retransmit=0 bytes_invalid=0 send_seq=368 receive_seq=368 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999618 adj=50001148  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.09 cputime=16.534 memavail=697868 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 282.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20259 bytes_read=60296 bytes_retransmit=9 bytes_invalid=0 send_seq=1465 receive_seq=1465 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2361 bytes_read=9288 bytes_retransmit=0 bytes_invalid=0 send_seq=369 receive_seq=369 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999621 adj=50001149  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.7 mcu_temp: temp=27.7 sysload=0.09 cputime=16.560 memavail=696872 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 283.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20265 bytes_read=60459 bytes_retransmit=9 bytes_invalid=0 send_seq=1466 receive_seq=1466 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2367 bytes_read=9304 bytes_retransmit=0 bytes_invalid=0 send_seq=370 receive_seq=370 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999626 adj=50001094  heater_bed: target=0 temp=20.3 pwm=0.000 raspberry_pi: temp=32.7 mcu_temp: temp=27.6 sysload=0.09 cputime=16.600 memavail=696872 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 284.5: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000011 bytes_write=20290 bytes_read=60646 bytes_retransmit=9 bytes_invalid=0 send_seq=1469 receive_seq=1469 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=2373 bytes_read=9320 bytes_retransmit=0 bytes_invalid=0 send_seq=371 receive_seq=371 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999632 adj=50001088  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.09 cputime=16.641 memavail=696872 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 285.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000015 bytes_write=20296 bytes_read=60809 bytes_retransmit=9 bytes_invalid=0 send_seq=1470 receive_seq=1470 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000010 bytes_write=2379 bytes_read=9349 bytes_retransmit=0 bytes_invalid=0 send_seq=372 receive_seq=372 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999638 adj=50001096  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.09 cputime=16.680 memavail=695904 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 286.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000015 bytes_write=20316 bytes_read=60977 bytes_retransmit=9 bytes_invalid=0 send_seq=1472 receive_seq=1472 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998565 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000010 bytes_write=2385 bytes_read=9365 bytes_retransmit=0 bytes_invalid=0 send_seq=373 receive_seq=373 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999642 adj=50001094  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.4 sysload=0.08 cputime=16.712 memavail=700548 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 287.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000015 bytes_write=20341 bytes_read=61164 bytes_retransmit=9 bytes_invalid=0 send_seq=1475 receive_seq=1475 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998565 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000010 bytes_write=2391 bytes_read=9381 bytes_retransmit=0 bytes_invalid=0 send_seq=374 receive_seq=374 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999649 adj=50001107  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.7 sysload=0.08 cputime=16.753 memavail=700548 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 288.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000015 bytes_write=20385 bytes_read=61332 bytes_retransmit=9 bytes_invalid=0 send_seq=1480 receive_seq=1480 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998565 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000010 bytes_write=2397 bytes_read=9397 bytes_retransmit=0 bytes_invalid=0 send_seq=375 receive_seq=375 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999658 adj=50001125  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.08 cputime=16.796 memavail=700548 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Stats 289.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000017 mcu_task_stddev=0.000015 bytes_write=20429 bytes_read=61515 bytes_retransmit=9 bytes_invalid=0 send_seq=1485 receive_seq=1485 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998565 rpi: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000010 bytes_write=2403 bytes_read=9413 bytes_retransmit=0 bytes_invalid=0 send_seq=376 receive_seq=376 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999662 adj=50001175  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.08 cputime=16.841 memavail=700560 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.0 pwm=0.000
Stats 290.5: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000019 mcu_task_stddev=0.000022 bytes_write=20435 bytes_read=61707 bytes_retransmit=9 bytes_invalid=0 send_seq=1486 receive_seq=1486 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998566 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000011 bytes_write=2409 bytes_read=9442 bytes_retransmit=0 bytes_invalid=0 send_seq=377 receive_seq=377 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999668 adj=50001131  heater_bed: target=0 temp=20.6 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.08 cputime=16.883 memavail=700564 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 291.5: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000019 mcu_task_stddev=0.000022 bytes_write=20441 bytes_read=61855 bytes_retransmit=9 bytes_invalid=0 send_seq=1487 receive_seq=1487 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998567 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000011 bytes_write=2415 bytes_read=9458 bytes_retransmit=0 bytes_invalid=0 send_seq=378 receive_seq=378 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999676 adj=50001131  heater_bed: target=0 temp=20.4 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.5 sysload=0.07 cputime=16.922 memavail=700312 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.1 pwm=0.000
Stats 292.5: gcodein=0  mcu: mcu_awake=0.005 mcu_task_avg=0.000019 mcu_task_stddev=0.000022 bytes_write=20447 bytes_read=62018 bytes_retransmit=9 bytes_invalid=0 send_seq=1488 receive_seq=1488 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998568 rpi: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000011 bytes_write=2421 bytes_read=9474 bytes_retransmit=0 bytes_invalid=0 send_seq=379 receive_seq=379 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999685 adj=50001170  heater_bed: target=0 temp=20.5 pwm=0.000 raspberry_pi: temp=32.2 mcu_temp: temp=27.6 sysload=0.07 cputime=16.964 memavail=699836 print_time=236.321 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.9 pwm=0.000
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 03:52:07 2024 (1708656727.9 20.1)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1964403608: New connection
webhooks client 1964403608: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 12:31:57 2024 (1708687917.3 21.8)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1964428376: New connection
webhooks client 1964428376: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 12:52:03 2024 (1708689123.9 22.3)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1963723720: New connection
webhooks client 1963723720: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 14:23:47 2024 (1708694627.6 24.3)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1964587976: New connection
webhooks client 1964587976: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 14:53:43 2024 (1708696423.0 24.3)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1964579784: New connection
webhooks client 1964579784: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Attempting MCU 'mcu' reset
Unhandled exception during post run
Traceback (most recent call last):
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialposix.py", line 265, in open
    self.fd = os.open(self.portstr, os.O_RDWR | os.O_NOCTTY | os.O_NONBLOCK)
FileNotFoundError: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 234, in run
    self.send_event("klippy:firmware_restart")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 915, in _firmware_restart
    self._restart_arduino()
  File "/home/pi/klipper/klippy/mcu.py", line 875, in _restart_arduino
    serialhdl.arduino_reset(self._serialport, self._reactor)
  File "/home/pi/klipper/klippy/serialhdl.py", line 379, in arduino_reset
    ser = serial.Serial(serialport, 2400, timeout=0, exclusive=True)
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialutil.py", line 240, in __init__
    self.open()
  File "/home/pi/klippy-env/lib/python3.9/site-packages/serial/serialposix.py", line 268, in open
    raise SerialException(msg.errno, "could not open port {}: {}".format(self._port, msg))
serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
Restarting printer
Start printer at Fri Feb 23 14:59:56 2024 (1708696796.2 383.4)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1964427680: New connection
webhooks client 1964427680: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
webhooks client 1964427680: Disconnected
webhooks client 1966269584: New connection
webhooks client 1966269584: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 15:06:37 2024 (1708697197.4 20.6)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1963936712: New connection
webhooks client 1963936712: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 15:07:53 2024 (1708697273.3 21.6)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1964297160: New connection
webhooks client 1964297160: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 15:09:08 2024 (1708697348.7 23.2)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1963666904: New connection
webhooks client 1963666904: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 17:44:56 2024 (1708706696.5 21.7)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1970915672: New connection
webhooks client 1970915672: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 17:53:39 2024 (1708707219.2 21.6)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1970260288: New connection
webhooks client 1970260288: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 21:38:15 2024 (1708720695.1 23.4)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1964432280: New connection
webhooks client 1964432280: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 22:32:48 2024 (1708723968.2 22.4)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1970485640: New connection
webhooks client 1970485640: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 23:07:08 2024 (1708726028.7 22.3)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1964227528: New connection
webhooks client 1964227528: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-113-g28f06a10'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ARMv7 Processor rev 4 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Fri Feb 23 23:40:20 2024 (1708728020.2 22.8)
===== Config file =====
[menu __main]
type = list
name = Main

[menu __main __pause]
type = command
enable = {(printer.print_stats.state == "printing") and ("pause_resume" in printer)}
index = 0
name = Pause printing
gcode = 
	PAUSE
	{ menu.exit() }

[menu __main __resume]
type = command
enable = {(printer.print_stats.state == "paused") and ("pause_resume" in printer)}
index = 0
name = Resume printing
gcode = 
	RESUME
	{ menu.exit() }

[menu __main __abort]
type = command
enable = {((printer.print_stats.state == "printing" or printer.print_stats.state == "paused")) and ("pause_resume" in printer)}
index = 1
name = Abort printing
gcode = 
	CANCEL_PRINT
	{ menu.exit() }

[menu __main __tune]
type = list
enable = {printer.idle_timeout.state == "Printing"}
name = Tune

[menu __main __tune __speed]
type = input
name = Speed: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.speed_factor}
input_min = 0.01
input_max = 5
input_step = 0.01
realtime = True
gcode = 
	M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type = input
name = Flow: {'%3d' % (menu.input*100)}%
input = {printer.gcode_move.extrude_factor}
input_min = 0.01
input_max = 2
input_step = 0.01
realtime = True
gcode = 
	M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type = input
name = Offset Z:{'%05.3f' % menu.input}
input = {printer.gcode_move.homing_origin.z}
input_min = -5
input_max = 5
input_step = 0.005
realtime = True
gcode = 
	SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
realtime = True
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
realtime = True
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __tune __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __octoprint]
type = disabled

[menu __main __octoprint __pause]
type = disabled

[menu __main __octoprint __resume]
type = disabled

[menu __main __octoprint __abort]
type = disabled

[menu __main __sdcard]
type = vsdlist
enable = {not printer.idle_timeout.state == "Printing" and ('virtual_sdcard' in printer)}
name = SD Card

[menu __main __sdcard __start]
type = command
enable = {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name = Start printing
gcode = 
	M24
	{ menu.exit() }

[menu __main __sdcard __resume]
type = disabled

[menu __main __sdcard __pause]
type = disabled

[menu __main __sdcard __cancel]
type = disabled

[menu __main __control]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Control

[menu __main __control __home]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Home All
gcode = G28

[menu __main __control __homez]
type = disabled

[menu __main __control __homexy]
type = disabled

[menu __main __control __disable]
type = command
name = Steppers off
gcode = 
	M84
	M18

[menu __main __control __fanonoff]
type = input
enable = {'fan' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type = input
enable = {'fan' in printer}
name = Fan speed: {'%3d' % (menu.input*100)}%
input = {printer.fan.speed}
input_min = 0
input_max = 1
input_step = 0.01
realtime = True
gcode = 
	M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'ON ' if menu.input else 'OFF'}
input = {printer['output_pin caselight'].value}
input_min = 0
input_max = 1
input_step = 1
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type = input
enable = {'output_pin caselight' in printer}
name = Lights: {'%3d' % (menu.input*100)}%
input = {printer['output_pin caselight'].value}
input_min = 0.0
input_max = 1.0
input_step = 0.01
realtime = True
gcode = 
	SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __move_10mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 10mm

[menu __main __control __move_10mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 10.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 10.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 1mm

[menu __main __control __move_1mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 1.0
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 1.0
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type = input
name = Move X:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type = input
name = Move Y:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%05.1f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.1
realtime = True
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move E:{'%+06.1f' % menu.input}
input = 0
input_min = -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max = {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step = 0.1
realtime = False
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	M83
	G1 E{menu.input} F240
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __temp]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Temperature

[menu __main __temp __hotend0_target]
type = input
enable = {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = 
	M104 T0 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotend1_target]
type = input
enable = {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name = {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input = {printer.extruder1.target}
input_min = 0
input_max = {printer.configfile.config.extruder1.max_temp}
input_step = 1
gcode = 
	M104 T1 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __hotbed_target]
type = input
enable = {'heater_bed' in printer}
name = {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input = {printer.heater_bed.target}
input_min = 0
input_max = {printer.configfile.config.heater_bed.max_temp}
input_step = 1
gcode = 
	M140 S{'%.0f' % menu.input}
	{ menu.exit()}

[menu __main __temp __preheat_pla]
type = list
name = Preheat PLA

[menu __main __temp __preheat_pla __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S70
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S230
	{ menu.exit()}

[menu __main __temp __preheat_pla __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S70
	{ menu.exit()}

[menu __main __temp __preheat_abs]
type = list
name = Preheat ABS

[menu __main __temp __preheat_abs __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Preheat all
gcode = 
	M140 S110
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotend]
type = command
enable = {'extruder' in printer}
name = Preheat hotend
gcode = 
	M104 S245
	{ menu.exit()}

[menu __main __temp __preheat_abs __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Preheat hotbed
gcode = 
	M140 S110
	{ menu.exit()}

[menu __main __temp __cooldown]
type = list
name = Cooldown

[menu __main __temp __cooldown __all]
type = command
enable = {('extruder' in printer) and ('heater_bed' in printer)}
name = Cooldown all
gcode = 
	M104 S0
	M140 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotend]
type = command
enable = {'extruder' in printer}
name = Cooldown hotend
gcode = 
	M104 S0
	{ menu.exit()}

[menu __main __temp __cooldown __hotbed]
type = command
enable = {'heater_bed' in printer}
name = Cooldown hotbed
gcode = 
	M140 S0
	{ menu.exit()}

[menu __main __filament]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Filament

[menu __main __filament __hotend0_target]
type = input
enable = {'extruder' in printer}
name = {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input = {printer.extruder.target}
input_min = 0
input_max = {printer.configfile.config.extruder.max_temp}
input_step = 1
gcode = M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type = command
name = Load Fil. fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type = command
name = Load Fil. slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type = command
name = Unload Fil.fast
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F960
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type = command
name = Unload Fil.slow
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E-50 F240
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type = input
name = Feed: {'%.1f' % menu.input}
input = 5
input_step = 0.1
gcode = 
	SAVE_GCODE_STATE NAME=__filament__load
	M83
	G1 E{'%.1f' % menu.input} F60
	RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Setup

[menu __main __setup __save_config]
type = command
name = Save config
gcode = SAVE_CONFIG

[menu __main __setup __restart]
type = list
name = Restart

[menu __main __setup __restart __host_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart host
gcode = RESTART

[menu __main __setup __restart __firmware_restart]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Restart FW
gcode = FIRMWARE_RESTART

[menu __main __setup __tuning]
type = list
name = PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name = Tune Hotend PID
gcode = PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type = command
enable = {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name = Tune Hotbed PID
gcode = PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type = list
name = Calibration

[menu __main __setup __calib __delta_calib_auto]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. auto
gcode = 
	G28
	DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Delta cal. man

[menu __main __setup __calib __bedprobe]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = Bed probe
gcode = PROBE

[menu __main __setup __calib __delta_calib_man __start]
type = command
name = Start probing
gcode = 
	G28
	DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type = input
name = Move Z: {'%03.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_step = 1
realtime = True
gcode = 
	{%- if menu.event == 'change' -%}
	G1 Z{'%.2f' % menu.input}
	{%- elif menu.event == 'long_click' -%}
	G1 Z{'%.2f' % menu.input}
	SAVE_GCODE_STATE NAME=__move__axis
	G91
	G1 Z2
	G1 Z-2
	RESTORE_GCODE_STATE NAME=__move__axis
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type = input
name = Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input = 6
input_min = 0
input_max = 11
input_step = 1
gcode = 
	{%- if menu.event == 'long_click' -%}
	TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
	{%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type = command
name = Accept
gcode = ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type = command
name = Abort
gcode = ABORT

[menu __main __setup __dump]
type = command
name = Dump parameters
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{ action_respond_info("printer['%s'].%s = %s"
	% (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
	{% endfor %}
	{% endfor %}

[respond]
default_type = echo

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[display_status]

[pause_resume]

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[exclude_object]

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro PREPARE]
description = Etape 1 de la calibration avant impression
gcode = 
	{% set TILT = params.TILT|default(0.0)|float %}
	G28
	SCREWS_TILT_CALCULATE
	{% set TILT = printer.MAX_DEVIATION|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	
	
	{% if printer.screws_tilt_adjust.max_deviation|float>0.025 %}
	M117 Deviation NOK ({ TILT|float }), screws and probe calibration
	SCREWS_TILT_CALCULATE
	PROBE_CALIBRATE
	M117 Please save & reboot
	{% else %}
	M117 Deviation OK ({ TILT|float }), bed calibration
	BED_MESH
	{% endif %}

[gcode_macro SCREW_TILT]
description = Max deviation check
gcode = 
	
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5
	G28
	SCREWS_TILT_CALCULATE

[delayed_gcode report_deviation]
gcode = 
	{% set TILT = printer.MAX_DEVIATION|default(0.0)|float %}
	{action_respond_info("Deviation: %.2f" % TILT|float )}
	UPDATE_DELAYED_GCODE ID=report_deviation DURATION=5

[gcode_macro BED_MESH]
description = Etape 2 de la calibration avant impression
gcode = 
	M190 S60
	G28
	BED_MESH_CALIBRATE
	TURN_OFF_HEATERS
	M117 Please save & reboot

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_BASE
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
variable_mesh_area_offset = 5.0
variable_probe_samples = 2
variable_min_probe_count = 4
variable_probe_count_scale_factor = 1.0
variable_enable_reference_index = False
gcode = 
	{% if params.AREA_START and params.AREA_END %}
	{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
	{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	{% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}
	
	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	{% else %}
	{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
	{% endif %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}
	
	
	{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
	{% if area_min_x - mesh_area_offset >=  safe_min_x %}
	{% set area_min_x = area_min_x - mesh_area_offset %}
	{% else %}
	{% set area_min_x = safe_min_x %}
	{% endif %}
	
	{% if area_min_y - mesh_area_offset >=  safe_min_y %}
	{% set area_min_y = area_min_y - mesh_area_offset %}
	{% else %}
	{% set area_min_y = safe_min_y %}
	{% endif %}
	
	{% if area_max_x + mesh_area_offset <=  safe_max_x %}
	{% set area_max_x = area_max_x + mesh_area_offset %}
	{% else %}
	{% set area_max_x = safe_max_x %}
	{% endif %}
	
	{% if area_max_y + mesh_area_offset <=  safe_max_y %}
	{% set area_max_y = area_max_y + mesh_area_offset %}
	{% else %}
	{% set area_max_y = safe_max_y %}
	{% endif %}
	
	{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	{% if meshPointX < min_probe_count %}
	{% set meshPointX = min_probe_count %}
	{% endif %}
	{% if meshPointX > meshMaxPointX %}
	{% set meshPointX = meshMaxPointX %}
	{% endif %}
	
	{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	{% if meshPointY < min_probe_count %}
	{% set meshPointY = min_probe_count %}
	{% endif %}
	{% if meshPointY > meshMaxPointY %}
	{% set meshPointY = meshMaxPointY %}
	{% endif %}
	
	{% set algorithm = "bicubic" %}
	{% if "algorithm" in bedMeshConfig %}
	{% set algorithm = bedMeshConfig.algorithm %}
	{% endif %}
	{% if meshPointX >=7 or meshPointY >=7 %}
	{% set algorithm = "bicubic" %}
	{% endif %}
	
	{% if enable_reference_index %}
	{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
	{% else %}
	BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}
	{% else %}
	BED_MESH_CALIBRATE_BASE
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -31.8
y_offset = -41
z_offset = 2.43

[safe_z_home]
home_xy_position = 146.8,156
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 100
horizontal_move_z = 5
probe_count = 5,5
algorithm = bicubic
mesh_min = 40,40
mesh_max = 198, 189

[bed_screws]
speed = 100
screw1 = 30,30
screw1_name = front left screw
screw2 = 200,30
screw2_name = front right screw
screw3 = 200,200
screw3_name = rear right screw
screw4 = 30,200
screw4_name = rear left screw
horizontal_move_z = 5.

[screws_tilt_adjust]
speed = 100
screw1 = 61.8,86
screw1_name = front left screw
screw2 = 230,86
screw2_name = front right screw
screw3 = 230,230
screw3_name = rear right screw
screw4 = 61.8,230
screw4_name = rear left screw
horizontal_move_z = 5.
screw_thread = CW-M4

[axis_twist_compensation]
speed = 100
horizontal_move_z = 5.
calibrate_start_x = 35
calibrate_end_x = 195
calibrate_y = 156
z_compensations = 0.019167, -0.008333, -0.010833
compensation_start_x = 35.0
compensation_end_x = 195.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
position_min = 0
position_max = 230
homing_speed = 50

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.580
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 180

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999

[extruder]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD1
microsteps = 16
rotation_distance = 7.531
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
pressure_advance = 0.04
pressure_advance_smooth_time = 0.040
heater_pin = PC8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA0
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
control = pid
pid_kp = 19.438
pid_ki = 0.953
pid_kd = 99.135

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.650
stealthchop_threshold = 999999

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 73.314
pid_ki = 1.276
pid_kd = 1052.973

[heater_fan heatbreak_cooling_fan]
pin = PC7
heater = extruder
heater_temp = 50.0

[heater_fan controller_fan]
pin = PB15

[fan]
pin = PC6

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00

[mcu rpi]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_accel_to_decel = 1000
square_corner_velocity = 5.0
max_z_velocity = 5
max_z_accel = 100

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = PB8
sclk_pin = PB9
sid_pin = PD6
encoder_pins = ^PA10, ^PA9
click_pin = ^!PA15

[output_pin beeper]
pin = PB5

[bed_mesh default]
version = 1
points = 
	0.015222, 0.028544, 0.018115, -0.003563
	0.012722, 0.016044, -0.001885, -0.026063
	0.007722, 0.021044, 0.011865, -0.013563
	0.010222, 0.007294, -0.008135, -0.023563
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 89.44
max_x = 130.56
min_y = 76.49
max_y = 143.59
=======================
Declaration of '__main' hides previous menuitem declaration
Declaration of '__main __tune' hides previous menuitem declaration
Declaration of '__main __tune __speed' hides previous menuitem declaration
Declaration of '__main __tune __flow' hides previous menuitem declaration
Declaration of '__main __tune __offsetz' hides previous menuitem declaration
Declaration of '__main __octoprint' hides previous menuitem declaration
Declaration of '__main __octoprint __pause' hides previous menuitem declaration
Declaration of '__main __octoprint __resume' hides previous menuitem declaration
Declaration of '__main __octoprint __abort' hides previous menuitem declaration
Declaration of '__main __sdcard' hides previous menuitem declaration
Declaration of '__main __sdcard __start' hides previous menuitem declaration
Declaration of '__main __sdcard __resume' hides previous menuitem declaration
Declaration of '__main __sdcard __pause' hides previous menuitem declaration
Declaration of '__main __sdcard __cancel' hides previous menuitem declaration
Declaration of '__main __control' hides previous menuitem declaration
Declaration of '__main __control __home' hides previous menuitem declaration
Declaration of '__main __control __homez' hides previous menuitem declaration
Declaration of '__main __control __homexy' hides previous menuitem declaration
Declaration of '__main __control __disable' hides previous menuitem declaration
Declaration of '__main __control __fanonoff' hides previous menuitem declaration
Declaration of '__main __control __fanspeed' hides previous menuitem declaration
Declaration of '__main __control __caselightonoff' hides previous menuitem declaration
Declaration of '__main __control __caselightpwm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_10mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_1mm' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_1mm __axis_e' hides previous menuitem declaration
Declaration of '__main __control __move_01mm' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_x' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_y' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_z' hides previous menuitem declaration
Declaration of '__main __control __move_01mm __axis_e' hides previous menuitem declaration
Declaration of '__main __temp' hides previous menuitem declaration
Declaration of '__main __temp __hotend0_target' hides previous menuitem declaration
Declaration of '__main __temp __hotend1_target' hides previous menuitem declaration
Declaration of '__main __temp __hotbed_target' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_pla __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __all' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotend' hides previous menuitem declaration
Declaration of '__main __temp __preheat_abs __hotbed' hides previous menuitem declaration
Declaration of '__main __temp __cooldown' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __all' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotend' hides previous menuitem declaration
Declaration of '__main __temp __cooldown __hotbed' hides previous menuitem declaration
Declaration of '__main __filament' hides previous menuitem declaration
Declaration of '__main __filament __hotend0_target' hides previous menuitem declaration
Declaration of '__main __filament __loadf' hides previous menuitem declaration
Declaration of '__main __filament __loads' hides previous menuitem declaration
Declaration of '__main __filament __unloadf' hides previous menuitem declaration
Declaration of '__main __filament __unloads' hides previous menuitem declaration
Declaration of '__main __filament __feed' hides previous menuitem declaration
Declaration of '__main __setup' hides previous menuitem declaration
Declaration of '__main __setup __save_config' hides previous menuitem declaration
Declaration of '__main __setup __restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __host_restart' hides previous menuitem declaration
Declaration of '__main __setup __restart __firmware_restart' hides previous menuitem declaration
Declaration of '__main __setup __tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotend_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __tuning __hotbed_pid_tuning' hides previous menuitem declaration
Declaration of '__main __setup __calib' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_auto' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man' hides previous menuitem declaration
Declaration of '__main __setup __calib __bedprobe' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __start' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __move_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __test_z' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __accept' hides previous menuitem declaration
Declaration of '__main __setup __calib __delta_calib_man __abort' hides previous menuitem declaration
Declaration of '__main __setup __dump' hides previous menuitem declaration
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
webhooks client 1970358616: New connection
webhooks client 1970358616: Client info {'program': 'Moonraker', 'version': 'v0.8.0-313-ge87ab4a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_2F00120013504B5735313920-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2708): Fri Feb 16 12:04:30 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7719): Mon Feb 19 22:33:50 2024
Last MCU build version: v0.12.0-113-g28f06a10
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Mon Feb 19 22:34:03 2024
